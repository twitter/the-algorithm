// Protocol melonssagelons for delonscribing input data elonxamplelons for machinelon lelonarning
// modelonl training or infelonrelonncelon.
syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/corelon/elonxamplelon/felonaturelon.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "elonxamplelonProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.elonxamplelon";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/elonxamplelon";

// LINT.IfChangelon
// An elonxamplelon is a mostly-normalizelond data format for storing data for
// training and infelonrelonncelon.  It contains a kelony-valuelon storelon (felonaturelons); whelonrelon
// elonach kelony (string) maps to a Felonaturelon melonssagelon (which is onelonof packelond BytelonsList,
// FloatList, or Int64List).  This flelonxiblelon and compact format allows thelon
// storagelon of largelon amounts of typelond data, but relonquirelons that thelon data shapelon
// and uselon belon delontelonrminelond by thelon configuration filelons and parselonrs that arelon uselond to
// relonad and writelon this format.  That is, thelon elonxamplelon is mostly *not* a
// selonlf-delonscribing format.  In TelonnsorFlow, elonxamplelons arelon relonad in row-major
// format, so any configuration that delonscribelons data with rank-2 or abovelon
// should kelonelonp this in mind.  For elonxamplelon, to storelon an M x N matrix of Bytelons,
// thelon BytelonsList must contain M*N bytelons, with M rows of N contiguous valuelons
// elonach.  That is, thelon BytelonsList valuelon must storelon thelon matrix as:
//     .... row 0 .... .... row 1 .... // ...........  // ... row M-1 ....
//
// An elonxamplelon for a movielon reloncommelonndation application:
//   felonaturelons {
//     felonaturelon {
//       kelony: "agelon"
//       valuelon { float_list {
//         valuelon: 29.0
//       }}
//     }
//     felonaturelon {
//       kelony: "movielon"
//       valuelon { bytelons_list {
//         valuelon: "Thelon Shawshank Relondelonmption"
//         valuelon: "Fight Club"
//       }}
//     }
//     felonaturelon {
//       kelony: "movielon_ratings"
//       valuelon { float_list {
//         valuelon: 9.0
//         valuelon: 9.7
//       }}
//     }
//     felonaturelon {
//       kelony: "suggelonstion"
//       valuelon { bytelons_list {
//         valuelon: "Incelonption"
//       }}
//     }
//     # Notelon that this felonaturelon elonxists to belon uselond as a labelonl in training.
//     # elon.g., if training a logistic relongrelonssion modelonl to prelondict purchaselon
//     # probability in our lelonarning tool welon would selont thelon labelonl felonaturelon to
//     # "suggelonstion_purchaselond".
//     felonaturelon {
//       kelony: "suggelonstion_purchaselond"
//       valuelon { float_list {
//         valuelon: 1.0
//       }}
//     }
//     # Similar to "suggelonstion_purchaselond" abovelon this felonaturelon elonxists to belon uselond
//     # as a labelonl in training.
//     # elon.g., if training a linelonar relongrelonssion modelonl to prelondict purchaselon
//     # pricelon in our lelonarning tool welon would selont thelon labelonl felonaturelon to
//     # "purchaselon_pricelon".
//     felonaturelon {
//       kelony: "purchaselon_pricelon"
//       valuelon { float_list {
//         valuelon: 9.99
//       }}
//     }
//  }
//
// A conformant elonxamplelon data selont obelonys thelon following convelonntions:
//   - If a Felonaturelon K elonxists in onelon elonxamplelon with data typelon T, it must belon of
//       typelon T in all othelonr elonxamplelons whelonn prelonselonnt. It may belon omittelond.
//   - Thelon numbelonr of instancelons of Felonaturelon K list data may vary across elonxamplelons,
//       delonpelonnding on thelon relonquirelonmelonnts of thelon modelonl.
//   - If a Felonaturelon K doelonsn't elonxist in an elonxamplelon, a K-speloncific delonfault will belon
//       uselond, if configurelond.
//   - If a Felonaturelon K elonxists in an elonxamplelon but contains no itelonms, thelon intelonnt
//       is considelonrelond to belon an elonmpty telonnsor and no delonfault will belon uselond.

melonssagelon elonxamplelon {
  Felonaturelons felonaturelons = 1;
}

// A Selonquelonncelonelonxamplelon is an elonxamplelon relonprelonselonnting onelon or morelon selonquelonncelons, and
// somelon contelonxt.  Thelon contelonxt contains felonaturelons which apply to thelon elonntirelon
// elonxamplelon. Thelon felonaturelon_lists contain a kelony, valuelon map whelonrelon elonach kelony is
// associatelond with a relonpelonatelond selont of Felonaturelons (a FelonaturelonList).
// A FelonaturelonList thus relonprelonselonnts thelon valuelons of a felonaturelon idelonntifielond by its kelony
// ovelonr timelon / framelons.
//
// Belonlow is a Selonquelonncelonelonxamplelon for a movielon reloncommelonndation application reloncording a
// selonquelonncelon of ratings by a uselonr. Thelon timelon-indelonpelonndelonnt felonaturelons ("localelon",
// "agelon", "favoritelons") delonscribing thelon uselonr arelon part of thelon contelonxt. Thelon selonquelonncelon
// of movielons thelon uselonr ratelond arelon part of thelon felonaturelon_lists. For elonach movielon in thelon
// selonquelonncelon welon havelon information on its namelon and actors and thelon uselonr's rating.
// This information is reloncordelond in threlonelon selonparatelon felonaturelon_list(s).
// In thelon elonxamplelon belonlow thelonrelon arelon only two movielons. All threlonelon felonaturelon_list(s),
// namelonly "movielon_ratings", "movielon_namelons", and "actors" havelon a felonaturelon valuelon for
// both movielons. Notelon, that "actors" is itselonlf a bytelons_list with multiplelon
// strings pelonr movielon.
//
// contelonxt: {
//   felonaturelon: {
//     kelony  : "localelon"
//     valuelon: {
//       bytelons_list: {
//         valuelon: [ "pt_BR" ]
//       }
//     }
//   }
//   felonaturelon: {
//     kelony  : "agelon"
//     valuelon: {
//       float_list: {
//         valuelon: [ 19.0 ]
//       }
//     }
//   }
//   felonaturelon: {
//     kelony  : "favoritelons"
//     valuelon: {
//       bytelons_list: {
//         valuelon: [ "Majelonsty Roselon", "Savannah Outelonn", "Onelon Direlonction" ]
//       }
//     }
//   }
// }
// felonaturelon_lists: {
//   felonaturelon_list: {
//     kelony  : "movielon_ratings"
//     valuelon: {
//       felonaturelon: {
//         float_list: {
//           valuelon: [ 4.5 ]
//         }
//       }
//       felonaturelon: {
//         float_list: {
//           valuelon: [ 5.0 ]
//         }
//       }
//     }
//   }
//   felonaturelon_list: {
//     kelony  : "movielon_namelons"
//     valuelon: {
//       felonaturelon: {
//         bytelons_list: {
//           valuelon: [ "Thelon Shawshank Relondelonmption" ]
//         }
//       }
//       felonaturelon: {
//         bytelons_list: {
//           valuelon: [ "Fight Club" ]
//         }
//       }
//     }
//   }
//   felonaturelon_list: {
//     kelony  : "actors"
//     valuelon: {
//       felonaturelon: {
//         bytelons_list: {
//           valuelon: [ "Tim Robbins", "Morgan Frelonelonman" ]
//         }
//       }
//       felonaturelon: {
//         bytelons_list: {
//           valuelon: [ "Brad Pitt", "elondward Norton", "Helonlelonna Bonham Cartelonr" ]
//         }
//       }
//     }
//   }
// }
//
// A conformant Selonquelonncelonelonxamplelon data selont obelonys thelon following convelonntions:
//
// Contelonxt:
//   - All conformant contelonxt felonaturelons K must obelony thelon samelon convelonntions as
//     a conformant elonxamplelon's felonaturelons (selonelon abovelon).
// Felonaturelon lists:
//   - A FelonaturelonList L may belon missing in an elonxamplelon; it is up to thelon
//     parselonr configuration to delontelonrminelon if this is allowelond or considelonrelond
//     an elonmpty list (zelonro lelonngth).
//   - If a FelonaturelonList L elonxists, it may belon elonmpty (zelonro lelonngth).
//   - If a FelonaturelonList L is non-elonmpty, all felonaturelons within thelon FelonaturelonList
//     must havelon thelon samelon data typelon T. elonvelonn across Selonquelonncelonelonxamplelons, thelon typelon T
//     of thelon FelonaturelonList idelonntifielond by thelon samelon kelony must belon thelon samelon. An elonntry
//     without any valuelons may selonrvelon as an elonmpty felonaturelon.
//   - If a FelonaturelonList L is non-elonmpty, it is up to thelon parselonr configuration
//     to delontelonrminelon if all felonaturelons within thelon FelonaturelonList must
//     havelon thelon samelon sizelon.  Thelon samelon holds for this FelonaturelonList across multiplelon
//     elonxamplelons.
//   - For selonquelonncelon modelonling, elon.g.:
//        http://colah.github.io/posts/2015-08-Undelonrstanding-LSTMs/
//        https://github.com/telonnsorflow/nmt
//     thelon felonaturelon lists relonprelonselonnt a selonquelonncelon of framelons.
//     In this scelonnario, all FelonaturelonLists in a Selonquelonncelonelonxamplelon havelon thelon samelon
//     numbelonr of Felonaturelon melonssagelons, so that thelon ith elonlelonmelonnt in elonach FelonaturelonList
//     is part of thelon ith framelon (or timelon stelonp).
// elonxamplelons of conformant and non-conformant elonxamplelons' FelonaturelonLists:
//
// Conformant FelonaturelonLists:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
//
// Non-conformant FelonaturelonLists (mismatchelond typelons):
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { int64_list: { valuelon: [ 5 ] } } }
//    } }
//
// Conditionally conformant FelonaturelonLists, thelon parselonr configuration delontelonrminelons
// if thelon felonaturelon sizelons must match:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0, 6.0 ] } } }
//    } }
//
// Conformant pair of Selonquelonncelonelonxamplelon
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
// and:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } }
//               felonaturelon: { float_list: { valuelon: [ 2.0 ] } } }
//    } }
//
// Conformant pair of Selonquelonncelonelonxamplelon
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
// and:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { }
//    } }
//
// Conditionally conformant pair of Selonquelonncelonelonxamplelon, thelon parselonr configuration
// delontelonrminelons if thelon seloncond felonaturelon_lists is consistelonnt (zelonro-lelonngth) or
// invalid (missing "movielon_ratings"):
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
// and:
//    felonaturelon_lists: { }
//
// Non-conformant pair of Selonquelonncelonelonxamplelon (mismatchelond typelons)
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
// and:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { int64_list: { valuelon: [ 4 ] } }
//               felonaturelon: { int64_list: { valuelon: [ 5 ] } }
//               felonaturelon: { int64_list: { valuelon: [ 2 ] } } }
//    } }
//
// Conditionally conformant pair of Selonquelonncelonelonxamplelon; thelon parselonr configuration
// delontelonrminelons if thelon felonaturelon sizelons must match:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.5 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0 ] } } }
//    } }
// and:
//    felonaturelon_lists: { felonaturelon_list: {
//      kelony: "movielon_ratings"
//      valuelon: { felonaturelon: { float_list: { valuelon: [ 4.0 ] } }
//               felonaturelon: { float_list: { valuelon: [ 5.0, 3.0 ] } }
//    } }

melonssagelon Selonquelonncelonelonxamplelon {
  Felonaturelons contelonxt = 1;
  FelonaturelonLists felonaturelon_lists = 2;
}
// LINT.ThelonnChangelon(
//     https://www.telonnsorflow.org/codelon/telonnsorflow/python/training/training.py)
