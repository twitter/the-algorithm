// pwotocow messages fow descwibing i-input data exampwes f-fow machine w-weawning
// modew t-twaining ow i-infewence. UwU
syntax = "pwoto3";

p-package tensowfwow;

i-impowt "tensowfwow/cowe/exampwe/featuwe.pwoto";

o-option cc_enabwe_awenas = twue;
option java_outew_cwassname = "exampwepwotos";
option java_muwtipwe_fiwes = twue;
option java_package = "owg.tensowfwow.exampwe";
option go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/exampwe";

// wint.ifchange
// a-an exampwe is a mostwy-nowmawized data fowmat fow s-stowing data fow
// twaining and i-infewence. /(^•ω•^)  it contains a key-vawue stowe (featuwes); whewe
// e-each key (stwing) maps to a featuwe m-message (which i-is oneof packed byteswist, (ꈍᴗꈍ)
// fwoatwist, 😳 ow int64wist). mya  this fwexibwe and c-compact fowmat awwows the
// stowage of wawge amounts of typed data, mya but wequiwes t-that the data shape
// and use b-be detewmined by t-the configuwation f-fiwes and pawsews t-that awe used to
// wead and wwite this fowmat. /(^•ω•^)  t-that is, ^^;; the exampwe is mostwy *not* a
// s-sewf-descwibing fowmat. 🥺  in tensowfwow, ^^ exampwes awe wead in wow-majow
// fowmat, ^•ﻌ•^ so any configuwation t-that descwibes data with w-wank-2 ow above
// s-shouwd keep t-this in mind. /(^•ω•^)  fow exampwe, to stowe an m x ny matwix of bytes, ^^
// t-the byteswist m-must contain m*n bytes, 🥺 with m w-wows of ny contiguous v-vawues
// each. (U ᵕ U❁)  that is, t-the byteswist vawue must stowe the m-matwix as:
//     .... wow 0 .... .... wow 1 .... // ...........  // ... w-wow m-1 ....
//
// an e-exampwe fow a movie wecommendation a-appwication:
//   f-featuwes {
//     featuwe {
//       key: "age"
//       vawue { fwoat_wist {
//         vawue: 29.0
//       }}
//     }
//     featuwe {
//       key: "movie"
//       v-vawue { bytes_wist {
//         v-vawue: "the shawshank wedemption"
//         v-vawue: "fight c-cwub"
//       }}
//     }
//     f-featuwe {
//       key: "movie_watings"
//       vawue { fwoat_wist {
//         vawue: 9.0
//         vawue: 9.7
//       }}
//     }
//     f-featuwe {
//       key: "suggestion"
//       vawue { bytes_wist {
//         vawue: "inception"
//       }}
//     }
//     # nyote t-that this featuwe exists to be u-used as a wabew i-in twaining. 😳😳😳
//     # e-e.g., if twaining a wogistic w-wegwession modew t-to pwedict puwchase
//     # p-pwobabiwity in o-ouw weawning toow we wouwd set the wabew featuwe t-to
//     # "suggestion_puwchased". nyaa~~
//     f-featuwe {
//       key: "suggestion_puwchased"
//       v-vawue { fwoat_wist {
//         v-vawue: 1.0
//       }}
//     }
//     # s-simiwaw to "suggestion_puwchased" above this featuwe exists to be used
//     # a-as a wabew in twaining. (˘ω˘)
//     # e.g., if twaining a wineaw wegwession modew to pwedict p-puwchase
//     # pwice in ouw weawning toow we wouwd set the w-wabew featuwe t-to
//     # "puwchase_pwice". >_<
//     f-featuwe {
//       key: "puwchase_pwice"
//       v-vawue { fwoat_wist {
//         v-vawue: 9.99
//       }}
//     }
//  }
//
// a-a confowmant exampwe data set obeys the fowwowing conventions:
//   - if a featuwe k exists i-in one exampwe with data type t, XD i-it must be of
//       type t i-in aww othew exampwes w-when pwesent. rawr x3 it may be omitted. ( ͡o ω ͡o )
//   - the n-numbew of instances o-of featuwe k wist data may v-vawy acwoss exampwes, :3
//       d-depending on the wequiwements of the modew. mya
//   - if a featuwe k doesn't exist i-in an exampwe, σωσ a k-k-specific defauwt w-wiww be
//       used, (ꈍᴗꈍ) if configuwed. OwO
//   - i-if a featuwe k e-exists in an exampwe but contains n-no items, o.O the intent
//       is considewed to be an empty tensow and nyo defauwt w-wiww be used. 😳😳😳

m-message exampwe {
  featuwes featuwes = 1;
}

// a-a sequenceexampwe i-is an exampwe wepwesenting one ow mowe sequences, /(^•ω•^) and
// some c-context. OwO  the context contains featuwes which appwy to the entiwe
// exampwe. ^^ t-the featuwe_wists contain a key, (///ˬ///✿) vawue map whewe e-each key is
// a-associated with a wepeated set of featuwes (a featuwewist). (///ˬ///✿)
// a-a featuwewist thus w-wepwesents the vawues of a featuwe identified by its key
// o-ovew time / fwames. (///ˬ///✿)
//
// bewow i-is a sequenceexampwe fow a movie wecommendation appwication wecowding a-a
// sequence of watings by a-a usew. the time-independent featuwes ("wocawe", ʘwʘ
// "age", ^•ﻌ•^ "favowites") d-descwibing the usew awe p-pawt of the context. OwO the sequence
// o-of movies t-the usew wated a-awe pawt of the featuwe_wists. (U ﹏ U) fow e-each movie in t-the
// sequence we have infowmation on its nyame a-and actows and t-the usew's wating. (ˆ ﻌ ˆ)♡
// t-this infowmation is wecowded in thwee sepawate f-featuwe_wist(s). (⑅˘꒳˘)
// in the e-exampwe bewow thewe a-awe onwy two movies. (U ﹏ U) aww thwee featuwe_wist(s), o.O
// nyamewy "movie_watings", mya "movie_names", a-and "actows" have a-a featuwe vawue f-fow
// both movies. XD n-nyote, òωó that "actows" is itsewf a-a bytes_wist with muwtipwe
// stwings pew movie.
//
// context: {
//   featuwe: {
//     key  : "wocawe"
//     v-vawue: {
//       bytes_wist: {
//         v-vawue: [ "pt_bw" ]
//       }
//     }
//   }
//   featuwe: {
//     k-key  : "age"
//     vawue: {
//       f-fwoat_wist: {
//         vawue: [ 19.0 ]
//       }
//     }
//   }
//   f-featuwe: {
//     k-key  : "favowites"
//     v-vawue: {
//       b-bytes_wist: {
//         v-vawue: [ "majesty wose", "savannah outen", (˘ω˘) "one diwection" ]
//       }
//     }
//   }
// }
// featuwe_wists: {
//   featuwe_wist: {
//     key  : "movie_watings"
//     v-vawue: {
//       f-featuwe: {
//         f-fwoat_wist: {
//           vawue: [ 4.5 ]
//         }
//       }
//       f-featuwe: {
//         fwoat_wist: {
//           vawue: [ 5.0 ]
//         }
//       }
//     }
//   }
//   featuwe_wist: {
//     key  : "movie_names"
//     v-vawue: {
//       f-featuwe: {
//         bytes_wist: {
//           v-vawue: [ "the shawshank wedemption" ]
//         }
//       }
//       f-featuwe: {
//         b-bytes_wist: {
//           vawue: [ "fight c-cwub" ]
//         }
//       }
//     }
//   }
//   f-featuwe_wist: {
//     key  : "actows"
//     vawue: {
//       featuwe: {
//         bytes_wist: {
//           vawue: [ "tim w-wobbins", :3 "mowgan f-fweeman" ]
//         }
//       }
//       f-featuwe: {
//         b-bytes_wist: {
//           v-vawue: [ "bwad pitt", OwO "edwawd n-nyowton", mya "hewena b-bonham cawtew" ]
//         }
//       }
//     }
//   }
// }
//
// a confowmant s-sequenceexampwe d-data set obeys the fowwowing c-conventions:
//
// context:
//   - aww confowmant c-context featuwes k must obey t-the same conventions a-as
//     a confowmant e-exampwe's featuwes (see above). (˘ω˘)
// featuwe wists:
//   - a-a featuwewist w-w may be m-missing in an exampwe; it is up to the
//     pawsew configuwation t-to detewmine if this is awwowed ow considewed
//     a-an empty w-wist (zewo wength). o.O
//   - if a f-featuwewist w exists, (✿oωo) it may be e-empty (zewo wength). (ˆ ﻌ ˆ)♡
//   - i-if a featuwewist w is nyon-empty, ^^;; aww f-featuwes within the featuwewist
//     must have t-the same data t-type t. even acwoss sequenceexampwes, OwO t-the type t
//     of the f-featuwewist identified b-by the same k-key must be the same. 🥺 an entwy
//     without any vawues may sewve as an empty featuwe. mya
//   - if a featuwewist w is nyon-empty, 😳 it is up to the pawsew configuwation
//     to detewmine if aww featuwes within the featuwewist m-must
//     h-have the same size. òωó  the same howds fow this featuwewist a-acwoss m-muwtipwe
//     e-exampwes. /(^•ω•^)
//   - fow sequence modewing, -.- e-e.g.:
//        http://cowah.github.io/posts/2015-08-undewstanding-wstms/
//        h-https://github.com/tensowfwow/nmt
//     t-the featuwe wists wepwesent a-a sequence of fwames. òωó
//     in t-this scenawio, /(^•ω•^) a-aww featuwewists in a sequenceexampwe have the s-same
//     nyumbew o-of featuwe messages, /(^•ω•^) s-so that t-the ith ewement i-in each featuwewist
//     i-is pawt o-of the ith fwame (ow t-time step). 😳
// e-exampwes of confowmant and n-nyon-confowmant e-exampwes' featuwewists:
//
// c-confowmant featuwewists:
//    featuwe_wists: { f-featuwe_wist: {
//      key: "movie_watings"
//      vawue: { featuwe: { f-fwoat_wist: { vawue: [ 4.5 ] } }
//               f-featuwe: { f-fwoat_wist: { v-vawue: [ 5.0 ] } } }
//    } }
//
// nyon-confowmant f-featuwewists (mismatched types):
//    f-featuwe_wists: { featuwe_wist: {
//      k-key: "movie_watings"
//      vawue: { f-featuwe: { fwoat_wist: { vawue: [ 4.5 ] } }
//               featuwe: { int64_wist: { vawue: [ 5 ] } } }
//    } }
//
// c-conditionawwy confowmant f-featuwewists, :3 t-the pawsew configuwation detewmines
// if the featuwe sizes must m-match:
//    featuwe_wists: { featuwe_wist: {
//      key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { v-vawue: [ 4.5 ] } }
//               featuwe: { fwoat_wist: { v-vawue: [ 5.0, (U ᵕ U❁) 6.0 ] } } }
//    } }
//
// c-confowmant paiw of s-sequenceexampwe
//    featuwe_wists: { featuwe_wist: {
//      key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { vawue: [ 4.5 ] } }
//               f-featuwe: { fwoat_wist: { v-vawue: [ 5.0 ] } } }
//    } }
// and:
//    f-featuwe_wists: { f-featuwe_wist: {
//      k-key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { v-vawue: [ 4.5 ] } }
//               f-featuwe: { fwoat_wist: { v-vawue: [ 5.0 ] } }
//               f-featuwe: { fwoat_wist: { v-vawue: [ 2.0 ] } } }
//    } }
//
// confowmant p-paiw of s-sequenceexampwe
//    featuwe_wists: { f-featuwe_wist: {
//      key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { v-vawue: [ 4.5 ] } }
//               f-featuwe: { fwoat_wist: { vawue: [ 5.0 ] } } }
//    } }
// and:
//    featuwe_wists: { featuwe_wist: {
//      k-key: "movie_watings"
//      v-vawue: { }
//    } }
//
// c-conditionawwy confowmant paiw of sequenceexampwe, ʘwʘ the p-pawsew configuwation
// d-detewmines if the second f-featuwe_wists i-is consistent (zewo-wength) ow
// invawid (missing "movie_watings"):
//    featuwe_wists: { f-featuwe_wist: {
//      k-key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { vawue: [ 4.5 ] } }
//               featuwe: { f-fwoat_wist: { v-vawue: [ 5.0 ] } } }
//    } }
// and:
//    featuwe_wists: { }
//
// nyon-confowmant p-paiw of sequenceexampwe (mismatched types)
//    featuwe_wists: { f-featuwe_wist: {
//      key: "movie_watings"
//      v-vawue: { f-featuwe: { fwoat_wist: { vawue: [ 4.5 ] } }
//               f-featuwe: { fwoat_wist: { v-vawue: [ 5.0 ] } } }
//    } }
// and:
//    f-featuwe_wists: { featuwe_wist: {
//      k-key: "movie_watings"
//      vawue: { f-featuwe: { i-int64_wist: { v-vawue: [ 4 ] } }
//               featuwe: { int64_wist: { v-vawue: [ 5 ] } }
//               f-featuwe: { i-int64_wist: { vawue: [ 2 ] } } }
//    } }
//
// c-conditionawwy confowmant paiw of sequenceexampwe; t-the p-pawsew configuwation
// d-detewmines if the featuwe sizes must match:
//    featuwe_wists: { featuwe_wist: {
//      k-key: "movie_watings"
//      vawue: { featuwe: { f-fwoat_wist: { v-vawue: [ 4.5 ] } }
//               featuwe: { fwoat_wist: { vawue: [ 5.0 ] } } }
//    } }
// a-and:
//    featuwe_wists: { featuwe_wist: {
//      k-key: "movie_watings"
//      v-vawue: { featuwe: { f-fwoat_wist: { v-vawue: [ 4.0 ] } }
//               f-featuwe: { fwoat_wist: { vawue: [ 5.0, o.O 3.0 ] } }
//    } }

message sequenceexampwe {
  featuwes context = 1;
  f-featuwewists featuwe_wists = 2;
}
// w-wint.thenchange(
//     https://www.tensowfwow.owg/code/tensowfwow/python/twaining/twaining.py)
