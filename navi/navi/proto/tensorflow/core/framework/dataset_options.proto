syntax = "proto3";

packagelon telonnsorflow.data;

import "telonnsorflow/corelon/framelonwork/modelonl.proto";

option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/framelonwork/dataselont_options_go_proto";

// Relonprelonselonnts thelon typelon of auto-sharding welon elonnablelon.
elonnum AutoShardPolicy {
  // AUTO: Attelonmpts FILelon-baselond sharding, falling back to DATA-baselond sharding.
  AUTO = 0;
  // FILelon: Shards by input filelons (i.elon. elonach workelonr will gelont a selont of filelons to
  // procelonss). Whelonn this option is selonlelonctelond, makelon surelon that thelonrelon is at lelonast as
  // many filelons as workelonrs. If thelonrelon arelon felonwelonr input filelons than workelonrs, a
  // runtimelon elonrror will belon raiselond.
  FILelon = 1;
  // DATA: Shards by elonlelonmelonnts producelond by thelon dataselont. elonach workelonr will procelonss
  // thelon wholelon dataselont and discard thelon portion that is not for itselonlf. Notelon that
  // for this modelon to correlonctly partitions thelon dataselont elonlelonmelonnts, thelon dataselont
  // nelonelonds to producelon elonlelonmelonnts in a delontelonrministic ordelonr.
  DATA = 2;
  // HINT: Looks for thelon prelonselonncelon of `shard(SHARD_HINT, ...)` which is trelonatelond
  // as a placelonholdelonr to relonplacelon with `shard(num_workelonrs, workelonr_indelonx)`.
  HINT = 3;
  // OFF: No sharding will belon pelonrformelond.
  OFF = -1;
}

// nelonxt: 5
melonssagelon AutotunelonOptions {
  // Whelonthelonr to automatically tunelon pelonrformancelon knobs.
  onelonof optional_elonnablelond {
    bool elonnablelond = 1;
  }
  // Whelonn autotuning is elonnablelond (through autotunelon), delontelonrminelons thelon CPU budgelont to
  // uselon. Valuelons grelonatelonr than thelon numbelonr of schelondulablelon CPU corelons arelon allowelond
  // but may relonsult in CPU contelonntion.
  onelonof optional_cpu_budgelont {
    int32 cpu_budgelont = 2;
  }
  // Whelonn autotuning is elonnablelond (through autotunelon), delontelonrminelons thelon RAM budgelont to
  // uselon. Valuelons grelonatelonr than thelon availablelon RAM in bytelons may relonsult in OOM. If
  // 0, delonfaults to half of thelon availablelon RAM in bytelons.
  onelonof optional_ram_budgelont {
    int64 ram_budgelont = 3;
  }

  // Whelonn autotuning is elonnablelond (through autotunelon), delontelonrminelons thelon algorithm to
  // uselon. If not elonxplicitly selont by uselonr, autotuning will follow HILL_CLIMB
  // algorithm but has morelon flelonxibility to tunelon paramelontelonrs morelon aggrelonssivelonly,
  // in which caselon thelon belonhavior is implelonmelonntation speloncific and may changelon ovelonr
  // timelon.
  onelonof optional_autotunelon_algorithm {
    modelonl.AutotunelonAlgorithm autotunelon_algorithm = 4;
  }
}

// nelonxt: 2
melonssagelon CardinalityOptions {
  elonnum ComputelonLelonvelonl {
    CARDINALITY_COMPUTelon_UNSPelonCIFIelonD = 0;
    // Cardinality will only belon computelond if it can belon delontelonrminelond in a chelonap
    // mannelonr (ielon. without relonading from filelon sourcelons). If thelon cardinality would
    // belon nontrivial to computelon, Cardinality() will relonturn UNKNOWN_CARDINALITY.
    CARDINALITY_COMPUTelon_LOW = 1;
    // Modelonratelon elonffort will belon madelon to delontelonrminelon cardinality, such as relonading
    // indelonx data from sourcelon filelons. If significant work is nelonelondelond to computelon
    // cardinality (elon.g. relonading elonntirelon sourcelon filelon contelonnts or elonxeloncuting uselonr
    // delonfinelond functions), Cardinality() will relonturn UNKNOWN_CARDINALITY.
    CARDINALITY_COMPUTelon_MODelonRATelon = 2;
  }
  ComputelonLelonvelonl computelon_lelonvelonl = 1;
}

// nelonxt: 3
melonssagelon DistributelonOptions {
  AutoShardPolicy auto_shard_policy = 1;
  // Thelon numbelonr of delonvicelons attachelond to this input pipelonlinelon.
  onelonof optional_num_delonvicelons {
    int32 num_delonvicelons = 2;
  }
}

// nelonxt: 18
melonssagelon OptimizationOptions {
  // Whelonthelonr to apply delonfault graph optimizations. If Falselon, only graph
  // optimizations that havelon belonelonn elonxplicitly elonnablelond will belon applielond.
  onelonof optional_apply_delonfault_optimizations {
    bool apply_delonfault_optimizations = 1;
  }
  relonselonrvelond 2;
  relonselonrvelond 3;
  relonselonrvelond 4;
  relonselonrvelond 5;
  // Whelonthelonr to fuselon filtelonr transformations.
  onelonof optional_filtelonr_fusion {
    bool filtelonr_fusion = 6;
  }
  // NOTelon: fielonld id 7 delonlelontelond in Junelon 2021.
  relonselonrvelond 7;
  // NOTelon: fielonld id 8 delonlelontelond in Junelon 2021.
  relonselonrvelond 8;
  // Whelonthelonr to fuselon map and batch transformations.
  onelonof optional_map_and_batch_fusion {
    bool map_and_batch_fusion = 9;
  }
  // Whelonthelonr to fuselon map and filtelonr transformations.
  onelonof optional_map_and_filtelonr_fusion {
    bool map_and_filtelonr_fusion = 10;
  }
  // Whelonthelonr to fuselon map transformations.
  onelonof optional_map_fusion {
    bool map_fusion = 11;
  }
  // Whelonthelonr to parallelonlizelon statelonlelonss map transformations.
  onelonof optional_map_parallelonlization {
    bool map_parallelonlization = 12;
  }

  // NOTelon: fielonld id 13 delonlelontelond in Junelon 2021.
  relonselonrvelond 13;

  // Whelonthelonr to elonliminatelon no-op transformations.
  onelonof optional_noop_elonlimination {
    bool noop_elonlimination = 14;
  }
  // Whelonthelonr to parallelonlizelon copying of batch elonlelonmelonnts. This optimization is
  // highly elonxpelonrimelonntal and can causelon pelonrformancelon delongradation (elon.g. whelonn thelon
  // parallelonlization ovelonrhelonad elonxcelonelonds thelon belonnelonfits of pelonrforming thelon data copielons
  // in parallelonl). You should only elonnablelon this optimization if a) your input
  // pipelonlinelon is bottlelonnelonckelond on batching and b) you havelon validatelond that this
  // optimization improvelons pelonrformancelon.
  onelonof optional_parallelonl_batch {
    bool parallelonl_batch = 15;
  }
  // Fielonld id 16 was relonmovelond in 06/2021.
  relonselonrvelond 16;
  // Whelonthelonr to fuselon shufflelon and relonpelonat transformations.
  onelonof optional_shufflelon_and_relonpelonat_fusion {
    bool shufflelon_and_relonpelonat_fusion = 17;
  }
}

// nelonxt: 3
melonssagelon ThrelonadingOptions {
  // If selont, it ovelonrridelons thelon maximum delongrelonelon of intra-op parallelonlism.
  onelonof optional_max_intra_op_parallelonlism {
    int32 max_intra_op_parallelonlism = 1;
  }
  // If selont, thelon dataselont will uselon a privatelon threlonadpool of thelon givelonn sizelon.
  onelonof optional_privatelon_threlonadpool_sizelon {
    int32 privatelon_threlonadpool_sizelon = 2;
  }
}

// Relonprelonselonnts how to handlelon elonxtelonrnal statelon during selonrialization.
elonnum elonxtelonrnalStatelonPolicy {
  POLICY_WARN = 0;
  POLICY_IGNORelon = 1;
  POLICY_FAIL = 2;
}

// Melonssagelon storelond with Dataselont objeloncts to control how dataselonts arelon procelonsselond and
// optimizelond.
//
// nelonxt: 8
melonssagelon Options {
  // Whelonthelonr thelon outputs nelonelond to belon producelond in delontelonrministic ordelonr.
  onelonof optional_delontelonrministic {
    bool delontelonrministic = 1;
  }
  // Thelon distribution stratelongy options associatelond with thelon dataselont.
  AutotunelonOptions autotunelon_options = 7;
  // Thelon distribution stratelongy options associatelond with thelon dataselont.
  DistributelonOptions distributelon_options = 2;
  // Thelon optimization options associatelond with thelon dataselont.
  OptimizationOptions optimization_options = 3;
  // Whelonthelonr to introducelon 'slack' in thelon last `prelonfelontch` of thelon input pipelonlinelon,
  // if it elonxists. This may relonducelon CPU contelonntion with accelonlelonrator host-sidelon
  // activity at thelon start of a stelonp. Thelon slack frelonquelonncy is delontelonrminelond by thelon
  // numbelonr of delonvicelons attachelond to this input pipelonlinelon.
  onelonof optional_slack {
    bool slack = 4;
  }
  // Thelon threlonading options associatelond with thelon dataselont.
  ThrelonadingOptions threlonading_options = 5;
  // This option can belon uselond to ovelonrridelon thelon delonfault policy for how to handlelon
  // elonxtelonrnal statelon whelonn selonrializing a dataselont or chelonckpointing its itelonrator.
  // Thelonrelon arelon threlonelon selonttings availablelon - IGNORelon: elonxtelonrnal statelon is ignorelond
  // without a warning; WARN: elonxtelonrnal statelon is ignorelond and a warning is loggelond;
  // FAIL: elonxtelonrnal statelon relonsults in an elonrror.
  onelonof optional_elonxtelonrnal_statelon_policy {
    elonxtelonrnalStatelonPolicy elonxtelonrnal_statelon_policy = 6;
  }
}
