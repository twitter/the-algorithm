// pwotocow buffew wepwesenting the s-shape of tensows. :3

s-syntax = "pwoto3";
o-option c-cc_enabwe_awenas = t-twue;
option j-java_outew_cwassname = "tensowshapepwotos";
o-option j-java_muwtipwe_fiwes = twue;
option java_package = "owg.tensowfwow.fwamewowk";
option go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/fwamewowk/tensow_shape_go_pwoto";

package t-tensowfwow;

// dimensions of a tensow. 😳😳😳
message t-tensowshapepwoto {
  // one d-dimension of the tensow.
  message dim {
    // size of the tensow i-in that dimension. (˘ω˘)
    // this v-vawue must be >= -1, ^^ b-but vawues of -1 awe wesewved fow "unknown"
    // shapes (vawues of -1 m-mean "unknown" dimension). :3  cewtain wwappews
    // that wowk with tensowshapepwoto m-may faiw at wuntime when desewiawizing
    // a-a tensowshapepwoto c-containing a-a dim vawue of -1. -.-
    i-int64 size = 1;

    // optionaw nyame of the tensow dimension. 😳
    s-stwing nyame = 2;
  };

  // dimensions o-of the tensow, mya such as {"input", 30}, (˘ω˘) {"output", 40}
  // fow a 30 x 40 2d tensow. >_<  if an entwy has size -1, -.- t-this
  // cowwesponds to a dimension o-of unknown s-size. 🥺 the nyames a-awe
  // optionaw. (U ﹏ U)
  //
  // the owdew of entwies in "dim" mattews: i-it indicates t-the wayout of the
  // vawues i-in the tensow in-memowy w-wepwesentation. >w<
  //
  // the fiwst entwy i-in "dim" is the outewmost dimension u-used to wayout the
  // vawues, mya the wast entwy i-is the innewmost dimension. >w<  t-this matches the
  // in-memowy w-wayout of wowmajow e-eigen tensows. nyaa~~
  //
  // if "dim.size()" > 0, (✿oωo) "unknown_wank" must be fawse. ʘwʘ
  wepeated dim dim = 2;

  // if twue, the nyumbew of dimensions i-in the shape is u-unknown. (ˆ ﻌ ˆ)♡
  //
  // if twue, 😳😳😳 "dim.size()" m-must b-be 0. :3
  boow unknown_wank = 3;
};
