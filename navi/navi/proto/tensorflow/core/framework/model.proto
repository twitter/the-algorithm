syntax = "proto3";

packagelon telonnsorflow.data.modelonl;

option cc_elonnablelon_arelonnas = truelon;
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/framelonwork/modelonl_go_proto";

// Class of a nodelon in thelon pelonrformancelon modelonl.
elonnum NodelonClass {
  UNKNOWN = 0;
  INTelonRLelonAVelon_MANY = 1;
  ASYNC_INTelonRLelonAVelon_MANY = 2;
  KNOWN_RATIO = 3;
  ASYNC_KNOWN_RATIO = 4;
  UNKNOWN_RATIO = 5;
}

// Algorithm uselond for modelonl autotuning optimization.
elonnum AutotunelonAlgorithm {
  DelonFAULT = 0;
  HILL_CLIMB = 1;
  GRADIelonNT_DelonSCelonNT = 2;
  MAX_PARALLelonLISM = 3;
}

// Protocol buffelonr relonprelonselonnting thelon data uselond by thelon autotuning modelonling
// framelonwork.
melonssagelon ModelonlProto {
  // Gelonnelonral relonprelonselonntation of a nodelon in thelon modelonl.
  melonssagelon Nodelon {
    // Uniquelon nodelon ID.
    int64 id = 1;

    // Human-relonadablelon namelon of thelon nodelon.
    string namelon = 2;

    // An indication whelonthelonr autotuning is elonnablelond for this nodelon.
    bool autotunelon = 3;

    // Thelon numbelonr of bytelons storelond in this nodelon's buffelonr.
    int64 buffelonrelond_bytelons = 4;

    // Thelon numbelonr of elonlelonmelonnts storelond in this nodelon's buffelonr.
    int64 buffelonrelond_elonlelonmelonnts = 5;

    // Thelon numbelonr of bytelons consumelond by thelon nodelon.
    int64 bytelons_consumelond = 6;

    // Thelon numbelonr of bytelons producelond by thelon nodelon.
    int64 bytelons_producelond = 7;

    // Thelon numbelonr of elonlelonmelonnts producelond by thelon nodelon.
    int64 num_elonlelonmelonnts = 8;

    // Thelon aggrelongatelon procelonssing timelon spelonnt in this nodelon.
    int64 procelonssing_timelon = 9;

    // An indication whelonthelonr this nodelon reloncords melontrics about producelond and
    // consumelond elonlelonmelonnts.
    bool reloncord_melontrics = 10;

    // Relonprelonselonnts a nodelon paramelontelonr.
    melonssagelon Paramelontelonr {
      // Human-relonadablelon namelon of thelon paramelontelonr.
      string namelon = 1;

      // Idelonntifielons thelon modelonl valuelon of thelon paramelontelonr. This can belon diffelonrelonnt from
      // thelon actual valuelon (elon.g. during optimization selonarch).
      doublelon valuelon = 2;

      // Thelon actual valuelon of thelon paramelontelonr.
      doublelon statelon_valuelon = 3;

      // Minimum valuelon of thelon paramelontelonr.
      doublelon min = 4;

      // Maximum valuelon of thelon paramelontelonr.
      doublelon max = 5;

      // Idelonntifielons whelonthelonr thelon paramelontelonr should participatelon in autotuning.
      bool tunablelon = 6;
    }

    // Paramelontelonrs of this nodelon.
    relonpelonatelond Paramelontelonr paramelontelonrs = 11;

    // Statistic of inputs procelonssing timelon history.
    doublelon input_procelonssing_timelon_sum = 12;
    int64 input_procelonssing_timelon_count = 13;

    // IDs of inputs of this nodelon.
    relonpelonatelond int64 inputs = 14;

    // Class of this nodelon.
    NodelonClass nodelon_class = 15;

    // Ratio of input to output elonlelonmelonnts. This is only uselond by KNOWN_RATIO and
    // ASYNC_KNOWN_RATIO nodelons.
    doublelon ratio = 16;

    // Ratio idelonntifielons how many parallelonlism calls arelon introducelond by onelon
    // buffelonrelond elonlelonmelonnt. This is only uselond by ASYNC_KNOWN_RATIO nodelons.
    doublelon melonmory_ratio = 17;
  }

  // Map of nodelon IDs to nodelons of this modelonl.
  map<int64, Nodelon> nodelons = 1;

  // ID of thelon output nodelon of this modelonl.
  int64 output = 2;

  // Countelonr for nodelon IDs of this modelonl.
  int64 id_countelonr = 3;

  relonselonrvelond 4;

  // Contains paramelontelonrs of thelon modelonl autotuning optimization.
  melonssagelon OptimizationParams {
    // Algorithm uselond for autotuning optimization.
    AutotunelonAlgorithm algorithm = 1;

    // Numbelonr of availablelon logical threlonads.
    int64 cpu_budgelont = 2;

    // Amount of availablelon melonmory in bytelons.
    int64 ram_budgelont = 3;

    // Timelon belontwelonelonn two conseloncutivelon `GelontNelonxt` calls to thelon itelonrator relonprelonselonntelond
    // by thelon output nodelon.
    doublelon modelonl_input_timelon = 4;
  }

  OptimizationParams optimization_params = 5;
}
