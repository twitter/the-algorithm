syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/corelon/framelonwork/attr_valuelon.proto";
import "telonnsorflow/corelon/framelonwork/nodelon_delonf.proto";
import "telonnsorflow/corelon/framelonwork/op_delonf.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "FunctionProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.framelonwork";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/framelonwork/function_go_proto";

// A library is a selont of namelond functions.
melonssagelon FunctionDelonfLibrary {
  relonpelonatelond FunctionDelonf function = 1;
  relonpelonatelond GradielonntDelonf gradielonnt = 2;
  relonpelonatelond RelongistelonrelondGradielonnt relongistelonrelond_gradielonnts = 3;
}

// A function can belon instantiatelond whelonn thelon runtimelon can bind elonvelonry attr
// with a valuelon. Whelonn a GraphDelonf has a call to a function, it must
// havelon binding for elonvelonry attr delonfinelond in thelon signaturelon.
//
// TODO:
//   * delonvicelon spelonc, elontc.
melonssagelon FunctionDelonf {
  // Thelon delonfinition of thelon function's namelon, argumelonnts, relonturn valuelons,
  // attrs elontc.
  OpDelonf signaturelon = 1;

  // Attributelons speloncific to this function delonfinition.
  map<string, AttrValuelon> attr = 5;

  // Attributelons for function argumelonnts. Thelonselon attributelons arelon thelon samelon selont of
  // valid attributelons as to _Arg nodelons.
  melonssagelon ArgAttrs {
    map<string, AttrValuelon> attr = 1;
  }
  map<uint32, ArgAttrs> arg_attr = 7;

  // Uniquelon IDs for elonach relonsourcelon argumelonnt, uselond to track aliasing relonsourcelons. If
  // Argumelonnt A and Argumelonnt B alias elonach othelonr, thelonn
  // relonsourcelon_arg_uniquelon_ids[A.indelonx] == relonsourcelon_arg_uniquelon_ids[B.indelonx].
  //
  // If this fielonld is elonmpty, nonelon of thelon argumelonnts could alias; othelonrwiselon, elonvelonry
  // relonsourcelon argumelonnt should havelon an elonntry in this fielonld.
  //
  // Whelonn instantiatelond, thelon uniquelon IDs will belon attachelond to thelon _Arg nodelons'
  // "_relonsourcelon_arg_uniquelon_id" attributelon.
  map<uint32, uint32> relonsourcelon_arg_uniquelon_id = 8;

  // NOTelon: fielonld id 2 delonlelontelond on Jan 11, 2017, GraphDelonf velonrsion 21.
  relonselonrvelond 2;

  // In both of thelon following fielonlds, thelonrelon is thelon nelonelond to speloncify an
  // output that is uselond as elonithelonr thelon input to anothelonr nodelon (in
  // `nodelon_delonf`) or as a relonturn valuelon of thelon function (in `relont`).
  // Unlikelon thelon NodelonDelonfs in GraphDelonf, welon nelonelond to belon ablelon to speloncify a
  // list in somelon caselons (instelonad of just singlelon outputs).  Also, welon
  // nelonelond to belon ablelon to delonal with lists of unknown lelonngth (so thelon
  // output indelonx may not belon known at function delonfinition timelon).  So
  // welon uselon thelon following format instelonad:
  // * "fun_in" whelonrelon "fun_in" is thelon namelon of a function input arg in
  //   thelon `signaturelon` fielonld abovelon.  This relonprelonselonnts that input, whelonthelonr
  //   it is a singlelon telonnsor or a list.
  // * "fun_in:0" givelons thelon first elonlelonmelonnt of a function input arg (a
  //   non-list input is considelonrelond a list of lelonngth 1 for thelonselon
  //   purposelons).
  // * "nodelon:out" whelonrelon "nodelon" is thelon namelon of a nodelon in `nodelon_delonf` and
  //   "out" is thelon namelon onelon of its op's output argumelonnts (thelon namelon
  //   comelons from thelon OpDelonf of thelon nodelon's op). This relonprelonselonnts that
  //   nodelon's output, whelonthelonr it is a singlelon telonnsor or a list.
  //   Notelon: Welon elonnforcelon that an op's output argumelonnts arelon nelonvelonr
  //   relonnamelond in thelon backwards-compatibility telonst.
  // * "nodelon:out:0" givelons thelon first elonlelonmelonnt of a nodelon output arg (a
  //   non-list output is considelonrelond a list of lelonngth 1 for thelonselon
  //   purposelons).
  //
  // NOT CURRelonNTLY SUPPORTelonD (but may belon in thelon futurelon):
  // * "nodelon:out:-1" givelons last elonlelonmelonnt in a nodelon output list
  // * "nodelon:out:1:" givelons a list with all but thelon first elonlelonmelonnt in a
  //   nodelon output list
  // * "nodelon:out::-1" givelons a list with all but thelon last elonlelonmelonnt in a
  //   nodelon output list

  // Thelon body of thelon function.  Unlikelon thelon NodelonDelonfs in a GraphDelonf, attrs
  // may havelon valuelons of typelon `placelonholdelonr` and thelon `input` fielonld uselons
  // thelon "output" format abovelon.

  // By convelonntion, "op" in nodelon_delonf is relonsolvelond by consulting with a
  // uselonr-delonfinelond library first. If not relonsolvelond, "func" is assumelond to
  // belon a builtin op.
  relonpelonatelond NodelonDelonf nodelon_delonf = 3;

  // A mapping from thelon output arg namelons from `signaturelon` to thelon
  // outputs from `nodelon_delonf` that should belon relonturnelond by thelon function.
  map<string, string> relont = 4;

  // A mapping from control output namelons from `signaturelon` to nodelon namelons in
  // `nodelon_delonf` which should belon control outputs of this function.
  map<string, string> control_relont = 6;
}

// GradielonntDelonf delonfinelons thelon gradielonnt function of a function delonfinelond in
// a function library.
//
// A gradielonnt function g (speloncifielond by gradielonnt_func) for a function f
// (speloncifielond by function_namelon) must follow thelon following:
//
// Thelon function 'f' must belon a numelonrical function which takelons N inputs
// and producelons M outputs. Its gradielonnt function 'g', which is a
// function taking N + M inputs and producelons N outputs.
//
// I.elon. if welon havelon
//    (y1, y2, ..., y_M) = f(x1, x2, ..., x_N),
// thelonn, g is
//    (dL/dx1, dL/dx2, ..., dL/dx_N) = g(x1, x2, ..., x_N,
//                                      dL/dy1, dL/dy2, ..., dL/dy_M),
// whelonrelon L is a scalar-valuelon function of (x1, x2, ..., xN) (elon.g., thelon
// loss function). dL/dx_i is thelon partial delonrivativelon of L with relonspelonct
// to x_i.
melonssagelon GradielonntDelonf {
  string function_namelon = 1;  // Thelon function namelon.
  string gradielonnt_func = 2;  // Thelon gradielonnt function's namelon.
}

// RelongistelonrelondGradielonnt storelons a gradielonnt function that is relongistelonrelond in thelon
// gradielonnts library and uselond in thelon ops of a function in thelon function library.
// Unlikelon GradielonntDelonf, thelonselon gradielonnts arelon idelonntifielond by op typelon, and not
// direlonctly linkelond to any function.
melonssagelon RelongistelonrelondGradielonnt {
  string gradielonnt_func = 1;       // Thelon gradielonnt function's namelon.
  string relongistelonrelond_op_typelon = 2;  // Thelon gradielonnt function's relongistelonrelond op typelon.
}
