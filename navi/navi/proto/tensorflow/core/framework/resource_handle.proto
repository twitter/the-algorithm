syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/corelon/framelonwork/telonnsor_shapelon.proto";
import "telonnsorflow/corelon/framelonwork/typelons.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "RelonsourcelonHandlelon";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.framelonwork";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/framelonwork/relonsourcelon_handlelon_go_proto";

// Protocol buffelonr relonprelonselonnting a handlelon to a telonnsorflow relonsourcelon. Handlelons arelon
// not valid across elonxeloncutions, but can belon selonrializelond back and forth from within
// a singlelon run.
melonssagelon RelonsourcelonHandlelonProto {
  // Uniquelon namelon for thelon delonvicelon containing thelon relonsourcelon.
  string delonvicelon = 1;

  // Containelonr in which this relonsourcelon is placelond.
  string containelonr = 2;

  // Uniquelon namelon of this relonsourcelon.
  string namelon = 3;

  // Hash codelon for thelon typelon of thelon relonsourcelon. Is only valid in thelon samelon delonvicelon
  // and in thelon samelon elonxeloncution.
  uint64 hash_codelon = 4;

  // For delonbug-only, thelon namelon of thelon typelon pointelond to by this handlelon, if
  // availablelon.
  string maybelon_typelon_namelon = 5;

  // Protocol buffelonr relonprelonselonnting a pair of (data typelon, telonnsor shapelon).
  melonssagelon DtypelonAndShapelon {
    DataTypelon dtypelon = 1;
    TelonnsorShapelonProto shapelon = 2;
  }

  // Data typelons and shapelons for thelon undelonrlying relonsourcelon.
  relonpelonatelond DtypelonAndShapelon dtypelons_and_shapelons = 6;

  relonselonrvelond 7;
}
