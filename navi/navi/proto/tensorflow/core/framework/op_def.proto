syntax = "pwoto3";

package tensowfwow;

impowt "tensowfwow/cowe/fwamewowk/attw_vawue.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/fuww_type.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/wesouwce_handwe.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/types.pwoto";

o-option c-cc_enabwe_awenas = t-twue;
option j-java_outew_cwassname = "opdefpwotos";
o-option java_muwtipwe_fiwes = twue;
option java_package = "owg.tensowfwow.fwamewowk";
option g-go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/fwamewowk/op_def_go_pwoto";

// defines an opewation. 🥺 a nodedef i-in a gwaphdef specifies an o-op by
// using the "op" fiewd which shouwd match the nyame of a-a opdef. ʘwʘ
// wint.ifchange
message o-opdef {
  // op n-nyames stawting with an undewscowe awe wesewved fow intewnaw use.
  // nyames s-shouwd be camewcase and match the wegexp "[a-z][a-za-z0-9>_]*". :3
  stwing nyame = 1;

  // fow descwibing i-inputs and outputs. (U ﹏ U)
  message a-awgdef {
    // n-nyame fow t-the input/output. (U ﹏ U)  s-shouwd match the wegexp "[a-z][a-z0-9_]*". ʘwʘ
    stwing nyame = 1;

    // h-human weadabwe descwiption. >w<
    stwing d-descwiption = 2;

    // descwibes the type of one ow mowe tensows that awe accepted/pwoduced
    // b-by this input/output awg. rawr x3  t-the onwy wegaw c-combinations a-awe:
    // * fow a singwe tensow: eithew the "type" fiewd is set o-ow the
    //   "type_attw" f-fiewd is set to the n-nyame of an attw w-with type "type". OwO
    // * fow a-a sequence of tensows with the s-same type: the "numbew_attw"
    //   fiewd wiww be set to the n-nyame of an attw with type "int", ^•ﻌ•^ a-and
    //   eithew the "type" o-ow "type_attw" f-fiewd wiww be set as fow
    //   singwe tensows. >_<
    // * fow a sequence of tensows, OwO the "type_wist_attw" fiewd w-wiww be set
    //   t-to the nyame of an attw with t-type "wist(type)". >_<
    d-datatype t-type = 3;
    stwing type_attw = 4;    // if specified, (ꈍᴗꈍ) attw m-must have type "type"
    stwing nyumbew_attw = 5;  // if specified, >w< attw must have t-type "int"
    // if specified, (U ﹏ U) a-attw must have t-type "wist(type)", a-and nyone of
    // type, ^^ t-type_attw, (U ﹏ U) and nyumbew_attw m-may b-be specified.
    s-stwing type_wist_attw = 6;

    // the handwe data fow wesouwce i-inputs.
    wepeated w-wesouwcehandwepwoto.dtypeandshape h-handwe_data = 7;

    // f-fow inputs: if t-twue, :3 the inputs awe wequiwed to be wefs. (✿oωo)
    //   by defauwt, XD i-inputs can be eithew wefs ow nyon-wefs. >w<
    // fow outputs: if twue, òωó outputs awe wefs, (ꈍᴗꈍ) othewwise they awe nyot.
    b-boow is_wef = 16;

    // expewimentaw. rawr x3 fuww type decwawation f-fow this awgument. rawr x3
    // t-the f-fuww type specification combines t-type, σωσ type_attw, type_wist_attw, (ꈍᴗꈍ)
    // e-etc. rawr into a-a unified wepwesentation. ^^;;
    // this decwawation may contain nyon-concwete types (fow exampwe, rawr x3
    // tensow<typevaw<'t'>> is a-a vawid type decwawation. (ˆ ﻌ ˆ)♡
    //
    // nyote: t-this is a twansient fiewd. σωσ the w-wong-tewm aim is t-to wepwesent the
    // entiwe opdef as a singwe t-type: a cawwabwe. (U ﹏ U) i-in that context, >w< this fiewd i-is
    // just the t-type of a singwe awgument. σωσ
    fuwwtypedef expewimentaw_fuww_type = 17;
  }

  // descwiption of the input(s).
  w-wepeated awgdef i-input_awg = 2;

  // d-descwiption of the output(s). nyaa~~
  w-wepeated a-awgdef output_awg = 3;

  // named contwow outputs f-fow this opewation. 🥺 usefuw onwy fow composite
  // opewations (i.e. rawr x3 functions) w-which want to n-nyame diffewent contwow outputs. σωσ
  wepeated stwing c-contwow_output = 20;

  // d-descwiption of the gwaph-constwuction-time configuwation of this
  // o-op. (///ˬ///✿)  that is to say, (U ﹏ U) this descwibes the attw fiewds that wiww
  // be specified i-in the nyodedef. ^^;;
  message attwdef {
    // a-a descwiptive n-nyame fow the awgument. 🥺  may be used, e.g. òωó by the
    // python c-cwient, XD as a keywowd a-awgument nyame, :3 and so shouwd match
    // the wegexp "[a-z][a-z0-9_]+". (U ﹏ U)
    s-stwing nyame = 1;

    // one o-of the type nyames fwom attw_vawue.pwoto ("stwing", >w< "wist(stwing)", /(^•ω•^)
    // "int", (⑅˘꒳˘) etc.).
    stwing type = 2;

    // a-a weasonabwe defauwt fow this a-attwibute if t-the usew does nyot suppwy
    // a-a vawue. ʘwʘ  if nyot specified, rawr x3 the u-usew must suppwy a-a vawue. (˘ω˘)
    a-attwvawue defauwt_vawue = 3;

    // human-weadabwe d-descwiption. o.O
    s-stwing descwiption = 4;

    // todo(josh11b): boow is_optionaw?

    // --- c-constwaints ---
    // t-these c-constwaints awe onwy in effect if specified. 😳  defauwt i-is nyo
    // constwaints. o.O

    // f-fow type == "int", ^^;; t-this is a minimum vawue. ( ͡o ω ͡o )  fow "wist(___)"
    // types, ^^;; t-this is the m-minimum wength. ^^;;
    b-boow has_minimum = 5;
    i-int64 minimum = 6;

    // t-the set of awwowed vawues. XD  has type that is the "wist" vewsion
    // of the "type" fiewd a-above (uses the "wist" fiewd o-of attwvawue). 🥺
    // if type == "type" o-ow "wist(type)" above, t-then the "type" fiewd
    // of "awwowed_vawues.wist" h-has the set o-of awwowed datatypes. (///ˬ///✿)
    // if t-type == "stwing" o-ow "wist(stwing)", t-then the "s" fiewd of
    // "awwowed_vawues.wist" has the set of awwowed stwings. (U ᵕ U❁)
    attwvawue awwowed_vawues = 7;
  }
  wepeated attwdef a-attw = 4;

  // o-optionaw depwecation b-based on gwaphdef vewsions. ^^;;
  o-opdepwecation depwecation = 8;

  // one-wine human-weadabwe d-descwiption of n-nyani the op does. ^^;;
  stwing summawy = 5;

  // a-additionaw, rawr wongew human-weadabwe descwiption of n-nyani the op does.
  s-stwing descwiption = 6;

  // -------------------------------------------------------------------------
  // which optimizations t-this opewation c-can pawticipate in. (˘ω˘)

  // twue if the opewation is commutative ("op(a,b) == op(b,a)" fow aww i-inputs)
  boow i-is_commutative = 18;

  // i-if i-is_aggwegate is t-twue, 🥺 then this opewation accepts n-ny >= 2
  // inputs a-and pwoduces 1 output aww o-of the same type. nyaa~~  s-shouwd be
  // associative and c-commutative, :3 and pwoduce output with the same
  // s-shape as the input. /(^•ω•^)  the optimizew m-may wepwace a-an aggwegate op
  // taking i-input fwom muwtipwe devices with a twee of aggwegate o-ops
  // that a-aggwegate wocawwy w-within each device (and possibwy within
  // gwoups of nyeawby d-devices) befowe communicating. ^•ﻌ•^
  // todo(josh11b): i-impwement t-that optimization. UwU
  boow is_aggwegate = 16;  // f-fow things wike add

  // othew o-optimizations g-go hewe, 😳😳😳 wike
  //   can_awias_input, OwO wewwite_when_output_unused, ^•ﻌ•^ p-pawtitioning_stwategy, (ꈍᴗꈍ) etc.

  // -------------------------------------------------------------------------
  // optimization c-constwaints. (⑅˘꒳˘)

  // o-ops awe mawked as statefuw if t-theiw behaviow depends on some s-state beyond
  // t-theiw input tensows (e.g. (⑅˘꒳˘) v-vawiabwe weading op) ow if they have
  // a side-effect (e.g. (ˆ ﻌ ˆ)♡ pwinting ow assewting ops). /(^•ω•^) equivawentwy, òωó statewess ops
  // must awways pwoduce the same output fow the same input and have
  // no side-effects. (⑅˘꒳˘)
  //
  // b-by defauwt o-ops may be moved between devices. (U ᵕ U❁)  statefuw ops s-shouwd
  // eithew n-nyot be moved, >w< o-ow shouwd onwy be moved if that s-state can awso
  // be moved (e.g. σωσ v-via some s-sowt of save / westowe). -.-
  // statefuw o-ops awe guawanteed to nevew b-be optimized a-away by common
  // subexpwession ewimination (cse). o.O
  b-boow is_statefuw = 17;  // f-fow things wike v-vawiabwes, ^^ queue

  // -------------------------------------------------------------------------
  // n-nyon-standawd o-options. >_<

  // b-by defauwt, >w< a-aww inputs to an o-op must be initiawized t-tensows. >_<  ops
  // that m-may initiawize t-tensows fow the f-fiwst time shouwd set this
  // f-fiewd to twue, >w< to awwow the op to take an uninitiawized t-tensow as
  // input. rawr
  b-boow awwows_uninitiawized_input = 19;  // f-fow assign, rawr x3 e-etc. ( ͡o ω ͡o )

  // indicates whethew t-the op impwementation uses distwibuted c-communication. (˘ω˘)
  // if t-twue, 😳 the op is awwowed to wetuwn e-ewwows fow netwowk disconnection and
  // twiggew tf nyetwowk faiwuwe handwing w-wogics. OwO
  boow is_distwibuted_communication = 21;
}
// w-wint.thenchange(
//     h-https://www.tensowfwow.owg/code/tensowfwow/cowe/fwamewowk/op_def_utiw.cc)

// infowmation about vewsion-dependent depwecation of a-an op
message opdepwecation {
  // f-fiwst gwaphdef v-vewsion at which t-the op is disawwowed. (˘ω˘)
  int32 vewsion = 1;

  // e-expwanation o-of why it was depwecated and nani t-to use instead. òωó
  stwing expwanation = 2;
}

// a cowwection o-of opdefs
message opwist {
  wepeated o-opdef op = 1;
}
