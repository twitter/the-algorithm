syntax = "pwoto3";

package tensowfwow;

option cc_enabwe_awenas = t-twue;
option java_outew_cwassname = "fuwwtypepwotos";
o-option java_muwtipwe_fiwes = t-twue;
option j-java_package = "owg.tensowfwow.fwamewowk";
o-option g-go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/fwamewowk/fuww_type_go_pwoto";

// e-expewimentaw. (ÀòœâÀò) w-wepwesents the compwete type infowmation of a tensowfwow vawue. :3
enum fuwwtypeid {
  // t-the defauwt wepwesents an uninitiawized v-vawues. OwO
  tft_unset = 0;

  // t-type symbows. mya used to constwuct mowe compwex type expwessions w-wike
  // awgebwaic data types. (ÀòœâÀò)

  // t-type vawiabwes m-may sewve as pwacehowdew fow any othew type id in type
  // tempwates. o.O
  //
  // e-exampwes:
  //   tft_dataset[tft_vaw["t"]] is a dataset wetuwning a type indicated by "t". (‚úøoœâo)
  //   t-tft_tensow[tft_vaw["t"]] is a tensow o-of ny ewement type i-indicated by "t". (ÀÜ Ôªå ÀÜ)‚ô°
  //   t-tft_tensow[tft_vaw["t"]], ^^;; t-tft_tensow[tft_vaw["t"]] awe two tensows of
  //     identicaw e-ewement types. OwO
  //   tft_tensow[tft_vaw["p"]], ü•∫ tft_tensow[tft_vaw["q"]] a-awe two tensows of
  //     independent ewement types. mya
  //
  tft_vaw = 1;

  // wiwdcawd type. üò≥ descwibes a-a pawametew of unknown type. √≤œâ√≥ i-in tensowfwow, /(^‚Ä¢œâ‚Ä¢^) t-that
  // can m-mean eithew a "top" type (accepts any type), -.- ow a dynamicawwy t-typed
  // object w-whose type is unknown in context. √≤œâ√≥
  // i-impowtant: "unknown" d-does nyot nyecessawiwy m-mean undetewminabwe! /(^‚Ä¢œâ‚Ä¢^)
  tft_any = 2;

  // the a-awgebwaic pwoduct type. /(^‚Ä¢œâ‚Ä¢^) this is an awgebwaic t-type that may be used just
  // f-fow wogicaw gwouping. üò≥ nyot to confused w-with tft_tupwe w-which descwibes a
  // concwete object of sevewaw ewements. :3
  //
  // exampwe:
  //   tft_dataset[tft_pwoduct[tft_tensow[tft_int32], (U ·µï U‚ùÅ) tft_tensow[tft_fwoat64]]]
  //     i-is a-a dataset pwoducing two tensows,  òw ò a-an integew one a-and a fwoat one. o.O
  //
  t-tft_pwoduct = 3;

  // wepwesents a nyamed fiewd,  òw ò with the name stowed i-in the attwibute. ^^
  //
  // pawametwization:
  //   tft_named[<type>]{<name>}
  //   * <type> is the type of the f-fiewd
  //   * <name> is the fiewd n-name, ^‚Ä¢Ôªå‚Ä¢^ as stwing (thpugh c-can t-theoweticawwy be an int
  //     a-as weww)
  //
  // e-exampwe:
  //   t-tft_wecowd[
  //     t-tft_named[tft_tensow[tft_int32]]{'foo'}, mya
  //     tft_named[tft_tensow[tft_fwoat32]]{'baw'}, UwU
  //   ]
  //     is a stwuctuwe w-with two f-fiewds, an int tensow "foo" a-and a-a fwoat tensow
  //     "baw". >_<
  t-tft_named = 4;

  // tempwate definition. /(^‚Ä¢œâ‚Ä¢^) expands the vawiabwes b-by wepeating a tempwate as
  // awguments of containew. √≤œâ√≥
  //
  // pawametwization:
  //   tft_fow_each[<containew_type>, œÉœâœÉ <tempwate>, ( Õ°o œâ Õ°o ) <expansions>]
  //   * <containew_type> is t-the type of the containew that the tempwate wiww be
  //     expanded i-into
  //   * <tempwate> i-is any type definition t-that potentiawwy contains t-type
  //     vawiabwes
  //   * <expansions> is a tft_vaw and m-may incwude mowe t-types in the futuwe
  //
  // exampwe:
  //   tft_fow_each[
  //         tft_pwoduct, nyaa~~
  //         tft_tensow[tft_vaw["t"]], :3
  //         tft_vaw["t"]
  //     ]
  //     wiww substitute a t = t-tft_int32 to tft_pwoduct[tft_tensow[tft_int32]]
  //     and a t-t = (tft_int32, UwU tft_int64) to
  //     t-tft_pwoduct[tft_tensow[tft_int32], o.O t-tft_tensow[tft_int64]]. (ÀÜ Ôªå ÀÜ)‚ô°
  tft_fow_each = 20;

  // cawwabwe t-types descwibe f-functions and ops. ^^;;
  //
  // p-pawametwization:
  //   t-tft_cawwabwe[<awg type>,  òw ò <wetuwn type>]
  //   * <awg type> is the type of the awguments; t-tft_pwoduct w-wepwesents
  //   m-muwtipwe
  //     awguments. œÉœâœÉ
  //   * <wetuwn t-type> is the wetuwn t-type; tft_pwoduct wepwesents m-muwtipwe
  //     wetuwn vawues (that means that cawwabwes wetuwning muwtipwe t-things
  //     d-don't nyecessawiwy wetuwn a singwe tupwe). ^^;;
  //
  // e-exampwe:
  //   t-tft_cawwabwe[
  //     tft_any,  òw ò
  //     tft_pwoduct[tft_tensow[tft_int32], ^^ tft_tensow[tft_fwoat64]], nyaa~~
  //   ]
  //     i-is a cawwabwe with unspecified (fow nyow) input awguments, (///À¨///‚úø) and
  //     t-two wetuwn vawues of type tensow. XD
  //
  tft_cawwabwe = 100;

  // c-concwete t-type ids, :3 wepwesenting "pwopew" data types that can descwibe
  // wuntime tensowfwow o-objects. √≤œâ√≥

  // t-the usuaw tensow. ^^ this is a pawametwic type.
  //
  // pawametwization:
  //   t-tft_tensow[<ewement type>, ^‚Ä¢Ôªå‚Ä¢^ <shape t-type>]
  //   * <ewement type> is cuwwentwy wimited to one of the ewement t-types
  //     defined bewow. œÉœâœÉ
  //   * <shape t-type> i-is nyot yet defined, (ÀÜ Ôªå ÀÜ)‚ô° and may o-onwy be tft_unknown fow nyow. nyaa~~
  //
  // a-a tft_shape t-type wiww be d-defined in the futuwe.  òw ò
  //
  // e-exampwe:
  //   t-tft_tensow[tft_int32, ^‚Ä¢Ôªå‚Ä¢^ tft_unknown]
  //     is a tensow of int32 e-ewement type a-and unknown shape. rawr x3
  //
  // t-todo(mdan): define tft_shape and add m-mowe exampwes. ü•∫
  tft_tensow = 1000;

  // a-awway (ow t-tensowfwow::tensowwist in the vawiant type wegistwy).  òw ò
  // n-nyote: this is n-nyot to be confused w-with the depwecated `tensowawway*` o-ops
  // which awe nyot s-suppowted by fuwwtype. (ÀòœâÀò)
  // this type wepwesents a wandom-access wist whose ewements can be
  // d-descwibed by a singwe type. o.O awthough i-immutabwe, œÉœâœÉ awway is expected t-to
  // suppowt efficient mutation s-semantics (i.e. (Íàç·¥óÍàç) ewement update) i-in the
  // u-usew-facing api. (ÀÜ Ôªå ÀÜ)‚ô°
  // t-the ewement t-type may be g-genewic ow even tft_any fow a hetewogenous wist. o.O
  //
  // pawametwization:
  //   tft_awway[<ewement type>]
  //   * <ewement type> may be any c-concwete type. :3
  //
  // e-exampwes:
  //   t-tft_awway[tft_tensow[tft_int32]] is a t-tensowawway howding int32 tensows
  //     of any shape. -.-
  //   t-tft_awway[tft_tensow[tft_unknown]] i-is a tensowawway howding tensows o-of
  //     mixed ewement types. ( Õ°o œâ Õ°o )
  //   tft_awway[tft_unknown] i-is a tensowawway h-howding any ewement type. /(^‚Ä¢œâ‚Ä¢^)
  //   t-tft_awway[] i-is equivawent to tft_awway[tft_unknown]. (‚ëÖÀòÍí≥Àò)
  //   tft_awway[tft_awway[]] is an awway ow awways (of u-unknown types). √≤œâ√≥
  t-tft_awway = 1001;

  // o-optionaw (ow t-tensowfwow::optionawvawiant i-in the vawiant type wegistwy).
  // t-this type w-wepwesents a vawue that may eithew h-howd an ewement o-of a singwe
  // specified t-type, ü•∫ ow nyothing at aww. (ÀÜ Ôªå ÀÜ)‚ô°
  //
  // pawametwization:
  //   t-tft_optionaw[<ewement type>]
  //   * <ewement t-type> m-may be any concwete type. -.-
  //
  // e-exampwes:
  //   tft_optionaw[tft_tensow[tft_int32]] is an o-optionaw howding a-an int32
  //     t-tensow of any shape. œÉœâœÉ
  tft_optionaw = 1002;

  // witewaw types descwibe compiwe-time c-constant vawues. >_<
  // witewaw types may a-awso pawticipate i-in dependent types. :3
  //
  // p-pawametwization:
  //   tft_witewaw[<vawue t-type>]{<vawue>}
  //   * <vawue t-type> may be any concwete type compatibwe t-that can howd <vawue>
  //   * <vawue> is the type's attwibute, OwO a-and howds t-the actuaw witewaw vawue
  //
  // e-exampwes:
  //   tft_witewaw[tft_int32]{1} i-is t-the compiwe-time c-constant 1. rawr
  tft_witewaw = 1003;

  // type attwibutes. (///À¨///‚úø) these awways appeaw in the pawametwization of a type, ^^
  // nyevew awone. XD fow exampwe, thewe is nyo such thing as a "boow" tensowfwow
  // object (fow n-nyow). UwU

  // the b-boow ewement type. o.O
  // todo(mdan): quantized t-types, üò≥ wegacy wepwesentations (e.g. (ÀòœâÀò) w-wef)
  tft_boow = 200;
  // i-integew ewement types. ü•∫
  tft_uint8 = 201;
  t-tft_uint16 = 202;
  tft_uint32 = 203;
  t-tft_uint64 = 204;
  t-tft_int8 = 205;
  tft_int16 = 206;
  t-tft_int32 = 207;
  tft_int64 = 208;
  // f-fwoating-point e-ewement types. ^^
  tft_hawf = 209;
  tft_fwoat = 210;
  t-tft_doubwe = 211;
  tft_bfwoat16 = 215;
  // c-compwex e-ewement types. >w<
  // t-todo(mdan): w-wepwesent as tft_compwex[tft_doubwe] i-instead?
  t-tft_compwex64 = 212;
  t-tft_compwex128 = 213;
  // t-the stwing ewement type. ^^;;
  tft_stwing = 214;

  // o-othew types t-that we don't know y-yet whethew they wiww become p-pawt of the
  // cowe type system ow be consisdewed t-thiwd-pawty (and consequentwy m-moved to
  // u-usew-defined type m-mechanisms). (ÀòœâÀò) pwesentwy, OwO they a-awe effectivewy in the cowe
  // t-type system, (Íàç·¥óÍàç) because key compiwation p-passes wike pwacew account f-fow theiw
  // existence. √≤œâ√≥

  // datasets cweated by tf.data ops and apis.  òw ò datasets h-have genewatow/itewabwe
  // semantics,  òw ò that i-is, nyaa~~ one can constwuct a-an itewatow fwom them. UwU wike
  // awway, (‚ëÖÀòÍí≥Àò) they awe considewed t-to wetuwn ewements that can be d-descwibed
  // b-by a singwe type. (ÀòœâÀò) u-unwike awway, :3 they do nyot suppowt wandom access o-ow
  // mutation, (ÀòœâÀò) a-and can potentiawwy pwoduce a-an infinite nyumbew of ewements. nyaa~~
  // a datasets c-can pwoduce wogicaw stwuctuwes (e.g. (U Ôπè U) m-muwtipwe e-ewements). nyaa~~ this
  // i-is expwessed using tft_pwoduct.
  //
  //
  // p-pawametwization: t-tft_awway[<ewement t-type>]. ^^;;
  //   * <ewement t-type> may be a concwete type o-ow a type symbow. OwO i-it wepwesents
  //     t-the data t-type of the ewements p-pwoduced b-by the dataset. nyaa~~
  //
  // e-exampwes:
  //   t-tft_datset[tft_tensow[tft_int32]] is a-a dataset pwoducing singwe int32
  //     t-tensows of unknown shape. UwU
  //   t-tft_datset[tft_pwoduct[tft_tensow[tft_int32], üò≥ t-tft_tensow[tft_fwoat32]] i-is
  //     a dataset pwoducing paiws of tensows, one integew a-and one fwoat. üò≥
  // n-nyote: the high i-id nyumbew is to pwepawe fow the eventuawity that datasets
  // w-wiww be suppowted b-by usew types in the futuwe. (ÀÜ Ôªå ÀÜ)‚ô°
  t-tft_dataset = 10102;

  // a-a wagged tensow cweated by tf.wagged ops and apis. (‚úøoœâo)
  //
  // pawametwization: t-tft_wagged[<ewement_type>]. nyaa~~
  t-tft_wagged = 10103;

  // a-a mutex wock t-tensow, ^^ pwoduced by tf.waw_ops.mutexwock. (///À¨///‚úø)
  // unwike stwict e-execution modews, üò≥ w-whewe ownewship of a wock is denoted by
  // "wunning a-aftew the wock has been acquiwed", √≤œâ√≥ in nyon-stwict m-mode, ^^;; wock
  // ownewship i-is in the twue s-sense: "the op awgument wepwesenting t-the wock i-is
  // avaiwabwe". rawr
  // mutex w-wocks awe the dynamic countewpawt o-of contwow dependencies. (ÀÜ Ôªå ÀÜ)‚ô°
  // t-todo(mdan): pwopewwy d-document this t-thing. XD
  //
  // pawametwization: t-tft_mutex_wock[]. >_<
  t-tft_mutex_wock = 10202;

  // t-the equivawent of a tensow w-with dt_vawiant dtype, (ÀòœâÀò) kept hewe to simpwify
  // t-twanswation. üò≥ t-this type shouwd n-nyot nyowmawwy appeaw aftew type infewence. o.O
  // nyote that wegacy_vawiant != any: tensow[int32] i-is a subtype of any, (Íàç·¥óÍàç) but is
  // n-nyot a subtype o-of wegacy_vawiant. rawr x3
  tft_wegacy_vawiant = 10203;
}

// highwy e-expewimentaw and vewy wikewy to c-change. ^^
// this e-encoding uses tags i-instead of dedicated m-messages f-fow weguwawity. OwO in
// pawticuwaw the encoding imposes no westwictions on nyani t-the pawametews of any
// type shouwd b-be, ^^ which in pawticuwaw nyeeds to be twue fow type symbows. :3
m-message fuwwtypedef {
  // the pwincipaw type wepwesented by this object. o.O this m-may be a concwete t-type
  // (tensow, -.- dataset) a t-type vawiabwe (used fow dependent types) a type
  // s-symbow (any, (U Ôπè U) u-union). o.O see fuwwtypeid fow detaiws. OwO
  f-fuwwtypeid type_id = 1;

  w-wepeated fuwwtypedef awgs = 2;

  // witewaw vawues of this t-type object, ^‚Ä¢Ôªå‚Ä¢^ if the the type admits one.  òw ò
  // fow e-exampwe, :3 a type v-vawiabwe admits a-a stwing attwibute - its nyame. üò≥
  // shape-wewated t-types may admit int attwibutes - theiw static shape vawues. √≤œâ√≥
  // fiewds fow m-mowe data types t-to be added as n-nyeeded. ü•∫
  oneof a-attw {
    stwing s = 3;
    int64 i = 4;
    // t-todo(mdan): wist/tensow, rawr x3 m-map? nyeed to weconciwe with tft_wecowd, ^‚Ä¢Ôªå‚Ä¢^ e-etc. :3
  }
}
