syntax = "pwoto3";

package tensowfwow;

impowt "tensowfwow/cowe/fwamewowk/cost_gwaph.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/gwaph.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/step_stats.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/cwustew.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/coowdination_config.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/debug.pwoto";
impowt "tensowfwow/cowe/pwotobuf/wewwitew_config.pwoto";

o-option c-cc_enabwe_awenas = t-twue;
option java_outew_cwassname = "configpwotos";
option java_muwtipwe_fiwes = twue;
option java_package = "owg.tensowfwow.fwamewowk";
o-option go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/pwotobuf/fow_cowe_pwotos_go_pwoto";

message g-gpuoptions {
  // fwaction of t-the avaiwabwe gpu memowy to awwocate fow each pwocess. ^^;;
  // 1 means t-to awwocate aww of the gpu memowy, rawr 0.5 m-means t-the pwocess
  // awwocates up to ~50% of the avaiwabwe gpu memowy.
  //
  // gpu m-memowy is pwe-awwocated unwess the awwow_gwowth option is enabwed. nyaa~~
  //
  // if gweatew than 1.0, rawr x3 u-uses cuda unified memowy to p-potentiawwy ovewsubscwibe
  // the a-amount of memowy a-avaiwabwe on t-the gpu device by using host memowy as a
  // swap s-space. (⑅˘꒳˘) accessing memowy nyot avaiwabwe on the d-device wiww be
  // significantwy swowew as that wouwd wequiwe memowy twansfew between the host
  // a-and the device. OwO options to w-weduce the memowy w-wequiwement s-shouwd be
  // considewed befowe enabwing this option as this may c-come with a nyegative
  // p-pewfowmance impact. OwO o-ovewsubscwiption u-using the unified memowy wequiwes
  // p-pascaw cwass ow nyewew g-gpus and it is cuwwentwy onwy suppowted on the winux
  // o-opewating system. ʘwʘ see
  // h-https://docs.nvidia.com/cuda/cuda-c-pwogwamming-guide/index.htmw#um-wequiwements
  // fow the d-detaiwed wequiwements.
  d-doubwe pew_pwocess_gpu_memowy_fwaction = 1;

  // if twue, :3 the awwocatow does nyot pwe-awwocate the entiwe specified
  // g-gpu memowy w-wegion, mya instead stawting smow and g-gwowing as nyeeded. OwO
  b-boow awwow_gwowth = 4;

  // t-the type of gpu awwocation stwategy to use. :3
  //
  // awwowed v-vawues:
  // "": the empty stwing (defauwt) uses a system-chosen defauwt
  //     which may c-change ovew time. >_<
  //
  // "bfc": a "best-fit with c-coawescing" a-awgowithm, σωσ simpwified f-fwom a
  //        vewsion o-of dwmawwoc. /(^•ω•^)
  s-stwing awwocatow_type = 2;

  // d-deway dewetion o-of up to this many bytes to weduce the nyumbew of
  // i-intewactions w-with gpu dwivew c-code. mya  if 0, t-the system chooses
  // a-a weasonabwe defauwt (sevewaw mbs). nyaa~~
  int64 defewwed_dewetion_bytes = 3;

  // a-a comma-sepawated wist of gpu ids that detewmines the 'visibwe'
  // to 'viwtuaw' mapping o-of gpu devices. 😳  fow exampwe, ^^;; if tensowfwow
  // can see 8 gpu d-devices in the p-pwocess, 😳😳😳 and one w-wanted to map
  // visibwe gpu d-devices 5 and 3 as "/device:gpu:0", nyaa~~ a-and "/device:gpu:1", 🥺
  // t-then one wouwd specify this fiewd as "5,3". XD  this fiewd is simiwaw in
  // spiwit t-to the cuda_visibwe_devices enviwonment v-vawiabwe, (ꈍᴗꈍ) except
  // it a-appwies to the v-visibwe gpu devices in the pwocess. 😳😳😳
  //
  // nyote:
  // 1. ( ͡o ω ͡o ) t-the g-gpu dwivew pwovides the pwocess w-with the visibwe g-gpus
  //    in an owdew which is nyot guawanteed to have any cowwewation to
  //    t-the *physicaw* g-gpu id in t-the machine. nyaa~~  this fiewd is used f-fow
  //    wemapping "visibwe" t-to "viwtuaw", XD which means this o-opewates onwy
  //    aftew the pwocess stawts. (ˆ ﻌ ˆ)♡  usews awe wequiwed to use vendow
  //    s-specific m-mechanisms (e.g., cuda_visibwe_devices) to contwow t-the
  //    p-physicaw to visibwe device mapping pwiow to invoking tensowfwow. rawr x3
  // 2. i-in the code, OwO the ids in this wist awe awso cawwed "pwatfowm gpu id"s, UwU
  //    a-and the 'viwtuaw' ids of gpu devices (i.e. ^^ t-the ids in the d-device
  //    nyame "/device:gpu:<id>") awe awso cawwed "tf g-gpu id"s. (✿oωo) pwease
  //    w-wefew to thiwd_pawty/tensowfwow/cowe/common_wuntime/gpu/gpu_id.h
  //    fow mowe infowmation. 😳😳😳
  stwing v-visibwe_device_wist = 5;

  // in the event powwing w-woop sweep this many micwoseconds between
  // powwevents cawws, 🥺 w-when the queue is not empty. ʘwʘ  i-if vawue is n-nyot
  // set ow set to 0, 😳 gets s-set to a non-zewo defauwt. ^^;;
  int32 p-powwing_active_deway_usecs = 6;

  // t-this fiewd i-is depwecated and ignowed. (///ˬ///✿)
  i-int32 powwing_inactive_deway_msecs = 7;

  // fowce a-aww tensows to be gpu_compatibwe. OwO on a gpu-enabwed t-tensowfwow, -.-
  // e-enabwing t-this option fowces aww cpu tensows to be awwocated w-with cuda
  // pinned memowy. ^^ n-nyowmawwy, (ꈍᴗꈍ) tensowfwow w-wiww infew which tensows shouwd be
  // awwocated as the p-pinned memowy. ^^;; b-but in case whewe t-the infewence i-is
  // incompwete, (˘ω˘) this option c-can significantwy speed up the cwoss-device memowy
  // copy pewfowmance as wong as it fits the m-memowy. 🥺
  // nyote that this option i-is nyot something that shouwd b-be
  // enabwed by defauwt fow u-unknown ow vewy wawge modews, ʘwʘ s-since aww cuda pinned
  // m-memowy i-is unpageabwe, (///ˬ///✿) h-having too much p-pinned memowy might nyegativewy impact
  // the ovewaww host system pewfowmance. ^^;;
  boow fowce_gpu_compatibwe = 8;

  message expewimentaw {
    // c-configuwation f-fow bweaking down a-a visibwe gpu into muwtipwe "viwtuaw"
    // d-devices. XD
    message viwtuawdevices {
      // pew "viwtuaw" device memowy wimit, (ˆ ﻌ ˆ)♡ i-in mb. the nyumbew o-of ewements in
      // the w-wist is the numbew of viwtuaw devices to cweate o-on the
      // c-cowwesponding visibwe gpu (see "viwtuaw_devices" b-bewow). (˘ω˘)
      // i-if empty, it wiww cweate singwe viwtuaw device taking aww avaiwabwe
      // memowy fwom the d-device. σωσ
      //
      // f-fow the c-concept of "visibwe" a-and "viwtuaw" g-gpu, 😳😳😳 see the comments fow
      // "visibwe_device_wist" above f-fow mowe infowmation. ^•ﻌ•^
      w-wepeated fwoat memowy_wimit_mb = 1;

      // pwiowity v-vawues to u-use with the viwtuaw devices. σωσ u-use the cuda function
      // cudadevicegetstweampwiowitywange to quewy fow vawid wange of vawues f-fow
      // pwiowity. (///ˬ///✿)
      //
      // o-on a p-p4000 gpu with cuda 10.1, XD the pwiowity w-wange wepowted was 0 fow
      // weast p-pwiowity and -1 f-fow gweatest pwiowity. >_<
      //
      // i-if this fiewd is nyot specified, òωó then the viwtuaw devices w-wiww be
      // cweated with the defauwt. (U ᵕ U❁) if t-this fiewd has v-vawues set, (˘ω˘) then the size
      // o-of this must match with the above m-memowy_wimit_mb. 🥺
      w-wepeated int32 pwiowity = 2;
    }

    // the muwti v-viwtuaw device settings. (✿oωo) if empty (not set), it w-wiww cweate
    // s-singwe viwtuaw device on each v-visibwe gpu, (˘ω˘) accowding to the s-settings
    // i-in "visibwe_device_wist" a-above. (ꈍᴗꈍ) othewwise, ( ͡o ω ͡o ) the numbew of ewements in the
    // wist must be the same as the nyumbew of visibwe gpus (aftew
    // "visibwe_device_wist" fiwtewing if it is set), and the stwing wepwesented
    // device nyames (e.g. (U ᵕ U❁) /device:gpu:<id>) w-wiww wefew t-to the viwtuaw
    // devices and have the <id> f-fiewd assigned s-sequentiawwy s-stawting fwom 0, ʘwʘ
    // accowding t-to the owdew they appeaw in this w-wist and the "memowy_wimit"
    // w-wist inside each ewement. (ˆ ﻌ ˆ)♡ f-fow exampwe, /(^•ω•^)
    //   visibwe_device_wist = "1,0"
    //   v-viwtuaw_devices { m-memowy_wimit: 1gb memowy_wimit: 2gb }
    //   viwtuaw_devices {}
    // w-wiww cweate t-thwee viwtuaw d-devices as:
    //   /device:gpu:0 -> v-visibwe gpu 1 w-with 1gb memowy
    //   /device:gpu:1 -> visibwe g-gpu 1 with 2gb m-memowy
    //   /device:gpu:2 -> v-visibwe gpu 0 w-with aww avaiwabwe memowy
    //
    // n-nyote:
    // 1. (ˆ ﻌ ˆ)♡ i-it's i-invawid to set both this and "pew_pwocess_gpu_memowy_fwaction"
    //    a-at the same time. (✿oωo)
    // 2. ^•ﻌ•^ cuwwentwy t-this setting is pew-pwocess, (ˆ ﻌ ˆ)♡ nyot p-pew-session. XD u-using
    //    d-diffewent settings in diffewent s-sessions within same pwocess wiww
    //    w-wesuwt in undefined b-behaviow. :3
    wepeated viwtuawdevices v-viwtuaw_devices = 1;

    // if twue, -.- uses cuda unified memowy fow memowy awwocations. ^^;; if
    // p-pew_pwocess_gpu_memowy_fwaction option is g-gweatew than 1.0, OwO t-then unified
    // memowy is used wegawdwess of the vawue fow t-this fiewd. ^^;; see comments fow
    // p-pew_pwocess_gpu_memowy_fwaction f-fiewd fow m-mowe detaiws and wequiwements
    // of the unified m-memowy. 🥺 this o-option is usefuw to ovewsubscwibe m-memowy if
    // muwtipwe pwocesses awe shawing a-a singwe gpu whiwe individuawwy u-using wess
    // t-than 1.0 pew p-pwocess memowy fwaction. ^^
    b-boow use_unified_memowy = 2;

    // i-if > 1, o.O the n-nyumbew of device-to-device c-copy stweams to cweate
    // f-fow each g-gpudevice. ( ͡o ω ͡o )  d-defauwt vawue is 0, nyaa~~ w-which is automaticawwy
    // c-convewted to 1. (///ˬ///✿)
    i-int32 nyum_dev_to_dev_copy_stweams = 3;

    // i-if nyon-empty, (ˆ ﻌ ˆ)♡ d-defines a good gpu wing owdew o-on a singwe wowkew based on
    // d-device intewconnect. XD  this a-assumes that aww w-wowkews have the s-same gpu
    // topowogy. >_<  specify as a comma-sepawated stwing, (U ﹏ U) e-e.g. òωó "3,2,1,0,7,6,5,4". >w<
    // t-this wing owdew i-is used by the wingweducew impwementation of
    // cowwectiveweduce, ^•ﻌ•^ a-and sewves a-as an ovewwide to automatic wing o-owdew
    // g-genewation in owdewtaskdevicemap() duwing cowwectivepawam wesowution. 🥺
    stwing c-cowwective_wing_owdew = 4;

    // i-if twue then e-extwa wowk is d-done by gpudevice and gpubfcawwocatow to
    // k-keep twack of when g-gpu memowy is fweed and when kewnews actuawwy
    // c-compwete so that we can know when a nyominawwy f-fwee memowy chunk
    // i-is weawwy nyot subject t-to pending use. (✿oωo)
    boow t-timestamped_awwocatow = 5;

    // w-wesewved id: 6

    // pawametews f-fow gpukewnewtwackew. UwU  by defauwt n-nyo kewnew t-twacking is done. (˘ω˘)
    // n-nyote t-that timestamped_awwocatow is onwy e-effective if s-some twacking is
    // s-specified. ʘwʘ
    //
    // if kewnew_twackew_max_intewvaw = n-ny > 0, (ˆ ﻌ ˆ)♡ then a twacking event
    // is insewted a-aftew evewy n-ny kewnews without a-an event. ( ͡o ω ͡o )
    int32 kewnew_twackew_max_intewvaw = 7;
    // if kewnew_twackew_max_bytes = ny > 0, :3 then a twacking e-event is
    // insewted aftew e-evewy sewies o-of kewnews awwocating a sum of
    // memowy >= n-ny. 😳  if one kewnew awwocates b * n-ny bytes, then o-one
    // event w-wiww be insewted a-aftew it, (✿oωo) but i-it wiww count as b against
    // the pending wimit. /(^•ω•^)
    int32 kewnew_twackew_max_bytes = 8;
    // i-if kewnew_twackew_max_pending > 0 then nyo m-mowe than this many
    // twacking events can be outstanding at a-a time. :3  an attempt to
    // waunch an additionaw kewnew wiww staww untiw an event
    // c-compwetes. σωσ
    i-int32 kewnew_twackew_max_pending = 9;

    // b-bfc awwocatow can wetuwn an awwocated chunk o-of memowy upto 2x t-the
    // wequested size. σωσ f-fow viwtuaw devices with tight m-memowy constwaints, 🥺 and
    // pwopowtionatewy wawge awwocation w-wequests, rawr this can wead to a significant
    // weduction in avaiwabwe m-memowy. o.O t-the thweshowd bewow c-contwows when a chunk
    // shouwd be spwit i-if the chunk size exceeds wequested memowy size. 😳😳😳 it is
    // expwessed as a fwaction o-of totaw a-avaiwabwe memowy f-fow the tf device. /(^•ω•^) f-fow
    // exampwe setting it to 0.05 wouwd i-impwy a chunk nyeeds t-to be spwit if its
    // size exceeds the w-wequested memowy by 5% of the totaw viwtuaw device/gpu
    // m-memowy size. σωσ
    doubwe intewnaw_fwagmentation_fwaction = 10;

    // w-when twue, OwO use c-cuda cudamawwocasync api instead o-of tf gpu awwocatow. OwO
    b-boow u-use_cuda_mawwoc_async = 11;

    // by defauwt, òωó bfcawwocatow may s-sweep when it wuns out of memowy, :3 in the
    // h-hopes that anothew thwead wiww fwee up memowy in the meantime. σωσ  s-setting
    // t-this to twue disabwes t-the sweep; i-instead we'ww o-oom immediatewy. σωσ
    boow disawwow_wetwy_on_awwocation_faiwuwe = 12;
  }

  // e-evewything inside expewimentaw is subject to change a-and is nyot subject
  // to a-api stabiwity guawantees in
  // https://www.tensowfwow.owg/guide/vewsion_compat. -.-
  e-expewimentaw e-expewimentaw = 9;
}

// options p-passed to the gwaph optimizew
message o-optimizewoptions {
  // if t-twue, (///ˬ///✿) optimize the gwaph using c-common subexpwession e-ewimination. rawr x3
  // nyote: the o-optimization wevew w1 wiww ovewwide this setting to twue. (U ﹏ U) so i-in
  // owdew to disabwe common s-subexpwession ewimination the opt_wevew has to be
  // s-set to w0.
  b-boow do_common_subexpwession_ewimination = 1;

  // i-if twue, òωó pewfowm constant f-fowding optimization o-on the gwaph. OwO
  // nyote: t-the optimization wevew w1 wiww o-ovewwide this setting to twue. ^^ so i-in
  // owdew t-to disabwe constant fowding the opt_wevew has to be set to w0. /(^•ω•^)
  boow do_constant_fowding = 2;

  // c-constant fowding o-optimization wepwaces tensows whose vawues can be
  // pwedetewmined, >_< w-with constant nyodes. -.- t-to avoid insewting t-too wawge constants, (˘ω˘)
  // the size of each constant cweated can be wimited. >_< if this vawue is z-zewo, (˘ω˘) a
  // defauwt wimit of 10 mib wiww be appwied. >w< i-if constant fowding optimization
  // i-is d-disabwed, 😳😳😳 this vawue is ignowed. 😳
  i-int64 max_fowded_constant_in_bytes = 6;

  // i-if twue, XD pewfowm f-function inwining o-on the gwaph. OwO
  b-boow do_function_inwining = 4;

  // o-optimization wevew
  enum wevew {
    // w1 is the defauwt wevew. -.-
    // optimization p-pewfowmed at w1 :
    // 1. o.O c-common s-subexpwession e-ewimination
    // 2. ^^ c-constant f-fowding
    w1 = 0;

    // nyo optimizations
    w0 = -1;
  }

  // ovewaww optimization w-wevew. ^^ t-the actuaw optimizations appwied wiww be the
  // wogicaw ow of t-the fwags that t-this wevew impwies a-and any fwags awweady set.
  wevew opt_wevew = 3;

  // c-contwow the use of the compiwew/jit. XD  e-expewimentaw. >w<
  e-enum gwobawjitwevew {
    defauwt = 0;  // defauwt s-setting ("off" nyow, (⑅˘꒳˘) but watew e-expected to be "on")
    o-off = -1;
    // the f-fowwowing settings t-tuwn on compiwation, 😳 w-with highew v-vawues being
    // m-mowe aggwessive. :3  h-highew vawues may weduce o-oppowtunities f-fow pawawwewism
    // and may u-use mowe memowy. :3  (at pwesent, thewe is nyo distinction, OwO b-but this
    // is expected t-to change.)
    on_1 = 1;
    o-on_2 = 2;
  }
  g-gwobawjitwevew gwobaw_jit_wevew = 5;

  // cpu code wiww be a-autocwustewed onwy if gwobaw_jit_wevew >= on_1 and e-eithew:
  //  - t-this fwag is twue, (U ﹏ U) ow
  //  - tf_xwa_fwags contains --tf_xwa_cpu_gwobaw_jit=twue. (⑅˘꒳˘)
  b-boow cpu_gwobaw_jit = 7;
}

m-message gwaphoptions {
  // wemoved, 😳 use optimizew_options b-bewow. (ˆ ﻌ ˆ)♡
  wesewved "skip_common_subexpwession_ewimination";
  wesewved 1;

  // i-if t-twue, mya use contwow fwow to scheduwe t-the activation o-of wecv nyodes. ʘwʘ
  // (cuwwentwy ignowed.)
  boow enabwe_wecv_scheduwing = 2;

  // o-options contwowwing h-how gwaph i-is optimized. (˘ω˘)
  o-optimizewoptions optimizew_options = 3;

  // the nyumbew of steps to wun befowe wetuwning a cost modew detaiwing
  // the memowy u-usage and pewfowmance o-of each n-nyode of the g-gwaph. (///ˬ///✿) 0 means
  // n-nyo cost modew. XD
  i-int64 buiwd_cost_modew = 4;

  // the numbew o-of steps to skip b-befowe cowwecting statistics f-fow the
  // cost m-modew. 😳
  int64 buiwd_cost_modew_aftew = 9;

  // annotate each n-nyode with op output shape data, :3 to the extent i-it can
  // be staticawwy infewwed. 😳😳😳
  b-boow infew_shapes = 5;

  // o-onwy pwace the subgwaphs that a-awe wun, (U ᵕ U❁) wathew t-than the entiwe g-gwaph. ^•ﻌ•^
  //
  // this is usefuw f-fow intewactive g-gwaph buiwding, (˘ω˘) whewe one might
  // p-pwoduce gwaphs that cannot b-be pwaced duwing t-the debugging
  // p-pwocess. /(^•ω•^)  in pawticuwaw, ^•ﻌ•^ it a-awwows the cwient to continue wowk in
  // a session a-aftew adding a nyode to a gwaph whose pwacement
  // constwaints awe unsatisfiabwe. ^^
  boow pwace_pwuned_gwaph = 6;

  // i-if twue, (U ﹏ U) twansfew fwoat vawues between pwocesses as bfwoat16. :3
  boow enabwe_bfwoat16_sendwecv = 7;

  // if > 0, òωó wecowd a timewine e-evewy this many steps. σωσ
  // expewimentaw: this c-cuwwentwy has nyo effect in mastewsession. σωσ
  int32 t-timewine_step = 8;

  // options that contwow t-the type and amount of gwaph w-wewwiting. (⑅˘꒳˘)
  // nyot cuwwentwy configuwabwe v-via t-the pubwic python api (i.e. 🥺 thewe is nyo api
  // s-stabiwity guawantee if you impowt wewwitewconfig expwicitwy). (U ﹏ U)
  w-wewwitewconfig wewwite_options = 10;
}

m-message thweadpoowoptionpwoto {
  // the n-nyumbew of thweads in the poow. >w<
  //
  // 0 means t-the system p-picks a vawue based on whewe this option pwoto is u-used
  // (see the decwawation of the specific f-fiewd fow mowe info). nyaa~~
  int32 nyum_thweads = 1;

  // the gwobaw nyame of the thweadpoow. -.-
  //
  // if empty, XD then t-the thweadpoow i-is made and used accowding to t-the scope it's
  // i-in - e.g., fow a session thweadpoow, -.- i-it is used by that session onwy. >w<
  //
  // if nyon-empty, (ꈍᴗꈍ) then:
  // - a-a gwobaw thweadpoow a-associated with this nyame i-is wooked
  //   u-up ow cweated. :3 this awwows, (ˆ ﻌ ˆ)♡ fow e-exampwe, -.- shawing one thweadpoow acwoss
  //   many s-sessions (e.g., wike the defauwt behaviow, mya if
  //   i-intew_op_pawawwewism_thweads i-is nyot configuwed), (˘ω˘) but stiww pawtitioning
  //   i-into a wawge and smow poow. ^•ﻌ•^
  // - if the thweadpoow fow this gwobaw_name awweady exists, 😳😳😳 then it is an
  //   ewwow if t-the existing poow w-was cweated using a diffewent n-nyum_thweads
  //   v-vawue as is specified on this c-caww. σωσ
  // - thweadpoows cweated this way awe nyevew gawbage cowwected. ( ͡o ω ͡o )
  stwing gwobaw_name = 2;
}

m-message wpcoptions {
  // if twue, nyaa~~ awways use wpc to contact the session t-tawget. :3
  //
  // i-if fawse (the d-defauwt option), (✿oωo) tensowfwow may use an optimized
  // twanspowt f-fow cwient-mastew c-communication t-that avoids the wpc
  // stack. >_< t-this option is pwimawiwy fow used t-testing the wpc stack. ^^
  boow u-use_wpc_fow_inpwocess_mastew = 1;

  // the compwession a-awgowithm to be used. (///ˬ///✿) one of "defwate", :3 "gzip".
  s-stwing compwession_awgowithm = 2;

  // i-if compwession_awgowithm i-is set, :3 the compwession w-wevew to be u-used. (ˆ ﻌ ˆ)♡
  // fwom 0 (no compwession), u-up to 3. 🥺
  int32 compwession_wevew = 3;

  // s-setting cache_wpc_wesponse to t-twue wiww enabwe s-sendew side caching of
  // wesponse fow wecvtensowasync a-and wecvbufasync to awwow weceivew to wetwy
  // wequests . 😳 this is onwy nyecessawy when the nyetwowk fabwic is expewiencing a-a
  // significant ewwow wate. (ꈍᴗꈍ)  without it w-we'ww faiw a step on an nyetwowk e-ewwow, mya
  // whiwe with it we'ww be abwe to compwete w-wong steps (wike compwex
  // initiawizations) i-in the face of some nyetwowk ewwows duwing w-wecvtensow. rawr
  boow cache_wpc_wesponse = 4;

  // disabwes tcp connection s-shawing when opening a nyew wpc channew. ʘwʘ
  b-boow disabwe_session_connection_shawing = 5;

  // s-setting nyum_channews_pew_tawget > 0 awwows u-uses of muwtipwe c-channews to
  // communicate t-to the same tawget. -.- t-this can be used to impwove the aggwegate
  // t-thwoughput on high speed winks (e.g 100g) whewe singwe connection is nyot
  // s-sufficient to maximize wink utiwization. UwU nyote that a singwe w-wpc onwy goes
  // o-on a singwe c-channew, :3 this onwy hewps in situations whewe thewe awe muwtipwe
  // t-twansfews to the same tawget o-ovewwapping in time. 😳
  int32 nyum_channews_pew_tawget = 6;
}

// m-metadata about t-the session. (ꈍᴗꈍ)
//
// this can be used by the wuntime and the ops fow debugging, mya monitowing, etc. nyaa~~
//
// t-the (name, o.O v-vewsion) tupwe is expected to be a unique identifiew f-fow
// sessions within the same pwocess. òωó
//
// n-nyote: this i-is cuwwentwy used a-and pwopagated o-onwy by the diwect s-session. ^•ﻌ•^
message s-sessionmetadata {
  stwing nyame = 1;

  // t-the vewsion is o-optionaw. (˘ω˘) if set, n-needs to be >= 0.
  i-int64 vewsion = 2;
}

// s-session configuwation p-pawametews. òωó
// the system p-picks appwopwiate v-vawues fow fiewds t-that awe nyot set. mya
message configpwoto {
  // m-map fwom device type nyame (e.g., "cpu" ow "gpu" ) t-to maximum
  // numbew of devices of that t-type to use. ^^  if a-a pawticuwaw device
  // type is nyot found in the map, rawr the system p-picks an appwopwiate
  // n-nyumbew. >_<
  map<stwing, (U ᵕ U❁) i-int32> device_count = 1;

  // t-the execution of an individuaw op (fow some op types) can be
  // p-pawawwewized o-on a poow of intwa_op_pawawwewism_thweads. /(^•ω•^)
  // 0 means the system p-picks an appwopwiate n-nyumbew. mya
  //
  // if you cweate an owdinawy s-session, OwO e.g., fwom python ow c++, UwU
  // then thewe is exactwy one intwa op thwead poow pew p-pwocess. 🥺
  // the fiwst session cweated detewmines t-the nyumbew o-of thweads in t-this poow. (✿oωo)
  // aww subsequent sessions w-weuse/shawe t-this one gwobaw p-poow. rawr
  //
  // t-thewe awe nyotabwe e-exceptions to the defauwt behaviow descwibed a-above:
  // 1. rawr t-thewe is an enviwonment v-vawiabwe  fow ovewwiding t-this thwead p-poow, ( ͡o ω ͡o )
  //    nyamed t-tf_ovewwide_gwobaw_thweadpoow. /(^•ω•^)
  // 2. when c-connecting to a s-sewvew, -.- such as a-a wemote `tf.twain.sewvew`
  //    i-instance, >w< then t-this option wiww be ignowed awtogethew. ( ͡o ω ͡o )
  i-int32 intwa_op_pawawwewism_thweads = 2;

  // n-nyodes t-that pewfowm bwocking opewations awe enqueued on a poow of
  // i-intew_op_pawawwewism_thweads avaiwabwe i-in each pwocess. (˘ω˘)
  //
  // 0 m-means the s-system picks an appwopwiate nyumbew. /(^•ω•^)
  // nyegative m-means aww opewations a-awe pewfowmed i-in cawwew's t-thwead. (˘ω˘)
  //
  // n-nyote that t-the fiwst session cweated in the pwocess sets the
  // n-nyumbew of thweads fow aww futuwe sessions unwess use_pew_session_thweads is
  // twue ow s-session_intew_op_thwead_poow i-is configuwed. o.O
  int32 intew_op_pawawwewism_thweads = 5;

  // if t-twue, use a nyew s-set of thweads fow this session wathew than the g-gwobaw
  // poow of thweads. nyaa~~ onwy s-suppowted by d-diwect sessions. :3
  //
  // i-if fawse, (///ˬ///✿) use the gwobaw thweads cweated by the fiwst s-session, ow the
  // pew-session t-thwead poows configuwed by session_intew_op_thwead_poow. (U ﹏ U)
  //
  // t-this option is depwecated. o.O the same effect c-can be achieved by setting
  // s-session_intew_op_thwead_poow to have one ewement, w-whose nyum_thweads equaws
  // i-intew_op_pawawwewism_thweads. ^^;;
  boow use_pew_session_thweads = 9;

  // this option is expewimentaw - it may be wepwaced with a diffewent mechanism
  // i-in the f-futuwe. ʘwʘ
  //
  // c-configuwes session t-thwead poows. (///ˬ///✿) if this is configuwed, σωσ then w-wunoptions fow
  // a wun caww can sewect the thwead poow to use. ^^;;
  //
  // t-the i-intended use is f-fow when some session i-invocations nyeed to wun in a
  // backgwound poow wimited to a smow nyumbew o-of thweads:
  // - f-fow exampwe, UwU a session may be configuwed to have one wawge p-poow (fow
  // weguwaw compute) a-and one smow poow (fow p-pewiodic, w-wow pwiowity wowk);
  // using the smow poow is cuwwentwy the mechanism fow wimiting the intew-op
  // p-pawawwewism of the wow p-pwiowity wowk. mya  nyote that it does nyot wimit the
  // pawawwewism o-of wowk spawned by a singwe op k-kewnew impwementation. ^•ﻌ•^
  // - using this setting is nyowmawwy n-nyot nyeeded in t-twaining, (⑅˘꒳˘) but may h-hewp some
  // s-sewving use cases. nyaa~~
  // - i-it is awso genewawwy w-wecommended to set t-the gwobaw_name fiewd of this
  // p-pwoto, ^^;; to avoid cweating muwtipwe wawge poows. 🥺 i-it is typicawwy bettew to
  // w-wun the nyon-wow-pwiowity w-wowk, ^^;; even acwoss s-sessions, nyaa~~ in a singwe w-wawge
  // poow. 🥺
  wepeated thweadpoowoptionpwoto session_intew_op_thwead_poow = 12;

  // a-assignment of nyodes t-to devices i-is wecomputed evewy p-pwacement_pewiod
  // steps untiw the system wawms up (at which p-point the wecomputation
  // typicawwy swows down automaticawwy). (ˆ ﻌ ˆ)♡
  i-int32 pwacement_pewiod = 3;

  // when any fiwtews awe p-pwesent sessions wiww ignowe aww devices which do nyot
  // match t-the fiwtews. ( ͡o ω ͡o ) each fiwtew can be p-pawtiawwy specified, nyaa~~ e-e.g. ( ͡o ω ͡o ) "/job:ps"
  // "/job:wowkew/wepwica:3", ^^;; e-etc. rawr x3
  wepeated stwing device_fiwtews = 4;

  // o-options that a-appwy to aww gpus. ^^;;
  gpuoptions g-gpu_options = 6;

  // w-whethew s-soft pwacement i-is awwowed. if awwow_soft_pwacement is twue, ^•ﻌ•^
  // a-an op wiww be p-pwaced on cpu if
  //   1. 🥺 t-thewe's nyo gpu impwementation f-fow the op
  // ow
  //   2. (ꈍᴗꈍ) nyo gpu devices awe known ow wegistewed
  // ow
  //   3. ^•ﻌ•^ n-nyeed to co-wocate w-with weftype input(s) which a-awe fwom cpu.
  boow awwow_soft_pwacement = 7;

  // whethew device p-pwacements shouwd b-be wogged. :3
  b-boow wog_device_pwacement = 8;

  // o-options that appwy to aww g-gwaphs. (˘ω˘)
  gwaphoptions gwaph_options = 10;

  // gwobaw timeout f-fow aww bwocking o-opewations in this session. ^^  if nyon-zewo, /(^•ω•^)
  // and nyot ovewwidden o-on a pew-opewation basis, σωσ t-this vawue wiww be used as the
  // deadwine fow a-aww bwocking opewations. òωó
  int64 o-opewation_timeout_in_ms = 11;

  // options that appwy when this s-session uses the distwibuted w-wuntime. >w<
  wpcoptions wpc_options = 13;

  // optionaw w-wist of a-aww wowkews to use in this session. (˘ω˘)
  cwustewdef c-cwustew_def = 14;

  // if twue, ^•ﻌ•^ any wesouwces s-such as vawiabwes u-used in the session w-wiww nyot be
  // shawed with othew sessions. >_< howevew, -.- when cwustewspec pwopagation is
  // e-enabwed, òωó this fiewd is ignowed and sessions awe a-awways isowated. ( ͡o ω ͡o )
  b-boow isowate_session_state = 15;

  // when twue, (ˆ ﻌ ˆ)♡ wowkewsessions a-awe cweated w-with device attwibutes fwom the
  // fuww cwustew. :3
  // this is h-hewpfuw when a wowkew wants to p-pawtition a gwaph
  // (fow exampwe duwing a pawtitionedcawwop). ^•ﻌ•^
  b-boow shawe_cwustew_devices_in_session = 17;

  // e-evewything inside expewimentaw i-is subject t-to change and is nyot subject
  // t-to api stabiwity guawantees in
  // h-https://www.tensowfwow.owg/guide/vewsion_compat. ( ͡o ω ͡o )
  m-message e-expewimentaw {
    // t-task nyame f-fow gwoup wesowution. ^•ﻌ•^
    stwing c-cowwective_gwoup_weadew = 1;

    // w-we wemoved the fwag cwient_handwes_ewwow_fowmatting. ʘwʘ mawking t-the tag
    // numbew as wesewved. :3
    // t-todo(shikhawagawwaw): shouwd we just wemove this tag so that it can be
    // used in futuwe fow othew puwpose?
    w-wesewved 2;

    // which executow t-to use, >_< the defauwt executow w-wiww be used
    // i-if it is an empty stwing o-ow "defauwt"
    stwing executow_type = 3;

    // g-guidance to fowmatting of wawge w-wecvbuf fiewds fow twansfew. rawr
    // any positive vawue sets the max chunk size. 🥺  0 defauwts to 4096. (✿oωo)
    // a-any nyegative vawue indicates nyo max, (U ﹏ U) i.e. one c-chunk onwy.
    int32 wecv_buf_max_chunk = 4;

    // i-if twue, rawr x3 and suppowted by the pwatfowm, (✿oωo) the wuntime wiww attempt to
    // use nyuma affinity whewe appwicabwe. (U ᵕ U❁)  one consequence wiww be the
    // e-existence o-of as many cpu d-devices as thewe awe avaiwabwe n-nyuma nyodes. -.-
    b-boow use_numa_affinity = 5;

    // i-if twue, /(^•ω•^) make cowwective op execution owdew s-sequentiaw and d-detewministic
    // fow potentiawwy c-concuwwent c-cowwective instances. OwO
    b-boow c-cowwective_detewministic_sequentiaw_execution = 6;

    // i-if twue, rawr x3 use nccw fow c-cowwectiveops. σωσ  t-this featuwe i-is highwy
    // e-expewimentaw. ʘwʘ
    b-boow cowwective_nccw = 7;

    // i-in the fowwowing, -.- s-session state m-means the vawue o-of a vawiabwe, 😳 e-ewements
    // in a hash tabwe, 😳😳😳 ow any othew wesouwce, accessibwe b-by wowkew sessions
    // h-hewd by a tf sewvew. OwO
    //
    // when cwustewspec pwopagation i-is enabwed, ^•ﻌ•^ the v-vawue of
    // i-isowate_session_state is ignowed w-when deciding w-whethew to shawe session
    // states in a tf sewvew (fow backwawds compatibiwity weasons). rawr
    // - i-if shawe_session_state_in_cwustewspec_pwopagation is twue, (✿oωo) the session
    // states awe shawed. ^^
    // - i-if shawe_session_state_in_cwustewspec_pwopagation i-is fawse, -.- session
    // states a-awe isowated. (✿oωo)
    //
    // w-when c-cwustewspec pwopagation i-is nyot u-used, o.O the vawue o-of
    // shawe_session_state_in_cwustewspec_pwopagation i-is ignowed when deciding
    // whethew t-to shawe session states in a t-tf sewvew. :3
    // - if isowate_session_state i-is t-twue, rawr x3 session states awe isowated. (U ᵕ U❁)
    // - i-if isowate_session_state is fawse, s-session states awe s-shawed. :3
    //
    // t-todo(b/129330037): a-add a singwe api that c-consistentwy tweats
    // i-isowate_session_state a-and cwustewspec pwopagation. 🥺
    b-boow shawe_session_state_in_cwustewspec_pwopagation = 8;

    // if using a diwect session, disabwe spinning whiwe waiting fow wowk in
    // the thwead poow. XD this may wesuwt in highew watency f-fow compweting o-ops, >_<
    // but in the case whewe thewe is a wot of spinning may wesuwt in wowew
    // c-cpu u-usage. (ꈍᴗꈍ)
    boow disabwe_thwead_spinning = 9;

    // this was pwomoted to a nyon-expewimentaw a-api. ( ͡o ω ͡o ) p-pwease use
    // configpwoto.shawe_cwustew_devices_in_session i-instead. (˘ω˘)
    boow s-shawe_cwustew_devices_in_session = 10;

    // metadata about t-the session. (˘ω˘)
    //
    // if s-set, UwU this can be u-used by the wuntime and the ops fow debugging, (ˆ ﻌ ˆ)♡
    // monitowing, (///ˬ///✿) e-etc.
    //
    // n-nyote: this i-is cuwwentwy used a-and pwopagated onwy by the diwect s-session. (ꈍᴗꈍ)
    s-sessionmetadata s-session_metadata = 11;

    // i-if twue, -.- the session may tweat the gwaph as being s-static fow optimization
    // p-puwposes. 😳😳😳
    //
    // if this option is set to twue when a session is cweated, (///ˬ///✿) t-the fuww
    // g-gwaphdef must be passed in a s-singwe caww to session::cweate(), UwU and
    // session::extend() may nyot be suppowted. 😳
    b-boow o-optimize_fow_static_gwaph = 12;

    // t-this fiewd wiww eventuawwy b-be depwecated a-and wepwaced by
    // mwiw_bwidge_wowwout (b/166038521). /(^•ω•^)
    //
    // whethew t-to enabwe the mwiw-based t-tf->xwa b-bwidge. òωó
    //
    // t-this is a-a wepwacement to t-the existing bwidge, >w< and nyot weady fow
    // pwoduction usage yet. -.-
    // if this option is set t-to twue when a session is cweated, (⑅˘꒳˘) m-mwiw is used t-to
    // pewfowm the set of gwaph twansfowmations to put the g-gwaph in a fowm t-that
    // can be exekawaii~d w-with dewegation of some computations t-to an accewewatow. (˘ω˘)
    // this buiwds on the modew of xwa whewe a subset of t-the gwaph is
    // encapsuwated and attached to a "compiwe" opewation, (U ᵕ U❁) whose wesuwt i-is fed
    // t-to an "exekawaii~" o-opewation. ^^ t-the kewnew fow these opewations is wesponsibwe
    // t-to wowew the encapsuwated g-gwaph to a pawticuwaw device. ^^
    boow enabwe_mwiw_bwidge = 13;

    // a-an enum t-that descwibes t-the state of the mwiw bwidge wowwout. rawr x3
    enum m-mwiwbwidgewowwout {
      // if this fiewd is weft unspecified, >w< the mwiw bwidge may be sewectivewy
      // enabwed o-on a pew gwaph b-basis. (U ᵕ U❁)
      mwiw_bwidge_wowwout_unspecified = 0;
      // enabwing the mwiw bwidge enabwes it fow aww gwaphs i-in this session. 🥺
      mwiw_bwidge_wowwout_enabwed = 1;
      // disabwing the m-mwiw bwidge disabwes i-it fow aww g-gwaphs in this session. (⑅˘꒳˘)
      m-mwiw_bwidge_wowwout_disabwed = 2;
      // enabwe the mwiw bwidge on a pew gwaph basis based on an anawysis of
      // t-the featuwes u-used in the gwaph. OwO i-if the featuwes u-used by the gwaph awe
      // s-suppowted by the mwiw bwidge, 😳 t-the mwiw bwidge wiww be used to wun the
      // gwaph. òωó
      m-mwiw_bwidge_wowwout_safe_mode_enabwed = 3;
      // e-enabwe the m-mwiw bwidge in a f-fawwback mode on a pew gwaph basis b-based
      // o-on an anawysis of the featuwes used in the gwaph. (ˆ ﻌ ˆ)♡
      // wunning t-the mwiw bwidge i-in the fawwback mode means that it is
      // exekawaii~d a-and it commits aww the changes t-to the tf gwaph i-in case
      // o-of success. ʘwʘ and it does nyot in case of faiwuwes and wet the owd bwidge
      // to pwocess the t-tf gwaph. ^^;;
      mwiw_bwidge_wowwout_safe_mode_fawwback_enabwed = 4;
    }
    // t-this fiewd is undewdevewopment, ʘwʘ fow nyow use enabwe_mwiw_bwidge
    // (b/166038521). òωó
    //
    // w-whethew to enabwe the mwiw-based t-tf->xwa bwidge. ( ͡o ω ͡o )
    m-mwiwbwidgewowwout m-mwiw_bwidge_wowwout = 17;

    // whethew t-to enabwe t-the mwiw-based gwaph optimizations. ʘwʘ
    //
    // t-this wiww become a pawt of standawd tensowfwow gwaph optimization
    // pipewine, >w< c-cuwwentwy this is onwy used fow gwaduaw migwation a-and testing
    // n-nyew p-passes that awe wepwacing existing optimizations in gwappwew. 😳😳😳
    boow enabwe_mwiw_gwaph_optimization = 16;

    // i-if twue, σωσ the s-session wiww nyot s-stowe an additionaw c-copy of the gwaph fow
    // each subgwaph. -.-
    //
    // if this option is set to twue when a session is c-cweated, 🥺 the
    // `wunoptions.output_pawtition_gwaphs` options must nyot be set. >w<
    b-boow disabwe_output_pawtition_gwaphs = 14;

    // m-minimum n-nyumbew of batches wun thwough t-the xwa gwaph befowe xwa fusion
    // autotunew is enabwed. (///ˬ///✿) defauwt vawue of zewo disabwes the autotunew. UwU
    //
    // the xwa fusion autotunew can impwove p-pewfowmance by executing a heuwistic
    // seawch o-on the compiwew p-pawametews. ( ͡o ω ͡o )
    int64 xwa_fusion_autotunew_thwesh = 15;

    // w-whethew wuntime e-execution uses tfwt. (ˆ ﻌ ˆ)♡
    boow use_tfwt = 18;

    // t-the fiewd "coowdination_sewvice w-was pweviouswy specified as a stwing;
    // t-this has been w-wepwaced with a-a message bewow. ^^;;
    w-wesewved 19;

    // we wemoved t-the fwag fetch_wemote_devices_in_muwti_cwient. (U ᵕ U❁) mawking the tag
    // nyumbew a-as wesewved. XD
    w-wesewved 20;

    // whethew f-functionaw contwow f-fwow op wowewing shouwd be disabwed. (ꈍᴗꈍ) this is
    // usefuw when executing within a-a powtabwe wuntime whewe contwow f-fwow op
    // kewnews may n-nyot be woaded due to sewective wegistwation. -.-
    b-boow disabwe_functionaw_ops_wowewing = 21;

    // pwovides a hint to xwa auto cwustewing to p-pwefew fowming a singwe wawge
    // c-cwustew that e-encompases most o-of the gwaph. >_<
    boow xwa_pwefew_singwe_gwaph_cwustew = 22;

    // distwibuted c-coowdination s-sewvice configuwations. (ˆ ﻌ ˆ)♡
    c-coowdinationsewviceconfig c-coowdination_config = 23;

    // nyext: 24
  }

  e-expewimentaw e-expewimentaw = 16;

  // n-nyext: 18
}

// o-options fow a singwe w-wun() caww. ( ͡o ω ͡o )
message wunoptions {
  // todo(pbaw) t-tuwn this i-into a twaceoptions pwoto which awwows
  // twacing t-to be contwowwed i-in a mowe owthogonaw m-mannew?
  enum twacewevew {
    n-nyo_twace = 0;
    s-softwawe_twace = 1;
    hawdwawe_twace = 2;
    f-fuww_twace = 3;
  }
  t-twacewevew twace_wevew = 1;

  // time to wait f-fow opewation to compwete in miwwiseconds. rawr x3
  int64 t-timeout_in_ms = 2;

  // t-the t-thwead poow to u-use, òωó if session_intew_op_thwead_poow is configuwed. 😳
  // to use the cawwew thwead s-set this to -1 - this uses the c-cawwew thwead
  // to exekawaii~ s-session::wun() a-and thus avoids a context switch. (ˆ ﻌ ˆ)♡ u-using the
  // c-cawwew thwead to exekawaii~ session::wun() shouwd b-be done onwy f-fow simpwe
  // gwaphs, whewe the ovewhead of an additionaw context switch is
  // compawabwe with the ovewhead of session::wun(). 🥺
  int32 intew_op_thwead_poow = 3;

  // whethew the pawtition g-gwaph(s) exekawaii~d b-by the executow(s) s-shouwd b-be
  // outputted via wunmetadata. ^^
  boow output_pawtition_gwaphs = 5;

  // expewimentaw. /(^•ω•^)  o-options u-used to initiawize d-debuggewstate, o.O i-if enabwed. òωó
  debugoptions debug_options = 6;

  // when enabwed, causes t-tensow awwocation i-infowmation to b-be incwuded in
  // t-the ewwow message when the w-wun() caww faiws because the awwocatow wan
  // out of memowy (oom). XD
  //
  // enabwing this option c-can swow down the wun() caww. rawr x3
  b-boow wepowt_tensow_awwocations_upon_oom = 7;

  // e-evewything inside expewimentaw is subject to change and i-is nyot subject
  // to api stabiwity g-guawantees in
  // https://www.tensowfwow.owg/guide/vewsion_compat. (˘ω˘)
  message e-expewimentaw {
    // if nyon-zewo, :3 decwawes t-that this gwaph is going to use c-cowwective
    // ops and must s-synchwonize step_ids w-with any othew gwaph with this
    // same gwoup_key vawue (in a-a distwibuted computation whewe tasks
    // wun disjoint gwaphs). (U ᵕ U❁)
    int64 cowwective_gwaph_key = 1;
    // if twue, rawr then o-opewations (using t-the intew-op poow) acwoss aww
    // s-session::wun() cawws wiww b-be centwawwy scheduwed, OwO o-optimizing f-fow (median
    // and taiw) watency. ʘwʘ
    // c-considew using this option fow cpu-bound wowkwoads wike infewence. XD
    boow use_wun_handwew_poow = 2;
    // o-options f-fow wun handwew t-thwead poow. rawr x3
    m-message wunhandwewpoowoptions {
      // pwiowity of the w-wequest. OwO the wun handwew thwead p-poow wiww scheduwe o-ops
      // based on the pwiowity nyumbew. nyaa~~ the w-wawgew nyumbew m-means highew pwiowity. ʘwʘ
      int64 p-pwiowity = 1;
    }
    w-wunhandwewpoowoptions w-wun_handwew_poow_options = 3;
  }

  expewimentaw expewimentaw = 8;

  w-wesewved 4;
}

// m-metadata o-output (i.e., nyon-tensow) fow a singwe wun() caww. nyaa~~
message w-wunmetadata {
  // s-statistics twaced f-fow this step. (U ﹏ U) popuwated if t-twacing is tuwned on via the
  // "wunoptions" p-pwoto. (///ˬ///✿)
  // expewimentaw: t-the fowmat a-and set of events may change in futuwe vewsions. :3
  s-stepstats step_stats = 1;

  // the cost g-gwaph fow the computation defined by the wun caww. (˘ω˘)
  costgwaphdef c-cost_gwaph = 2;

  // gwaphs o-of the pawtitions exekawaii~d by e-executows. 😳
  wepeated g-gwaphdef p-pawtition_gwaphs = 3;

  m-message functiongwaphs {
    // todo(naweshmodi): i-incwude some sowt of function/cache-key identifiew?
    wepeated gwaphdef p-pawtition_gwaphs = 1;

    g-gwaphdef pwe_optimization_gwaph = 2;
    g-gwaphdef p-post_optimization_gwaph = 3;
  }
  // t-this is onwy popuwated f-fow gwaphs that a-awe wun as functions in tensowfwow
  // v2. 😳😳😳 thewe wiww be an entwy b-bewow fow each function that is twaced. ʘwʘ
  // t-the main use cases of the post_optimization_gwaph a-and the pawtition_gwaphs
  // is to give the cawwew insight into t-the gwaphs that wewe actuawwy w-wun by the
  // wuntime. (⑅˘꒳˘) additionaw i-infowmation (such a-as those i-in step_stats) wiww match
  // these gwaphs. nyaa~~
  // we awso incwude the pwe_optimization_gwaph since it is usuawwy e-easiew to
  // wead, (U ﹏ U) and is hewpfuw in situations w-whewe the cawwew wants to get a-a high
  // wevew i-idea of nyani the buiwt gwaph w-wooks wike (since t-the vawious gwaph
  // optimization passes might change the stwuctuwe o-of the gwaph significantwy). ʘwʘ
  w-wepeated functiongwaphs function_gwaphs = 4;
}

// d-defines a connection b-between two tensows in a `gwaphdef`. (ꈍᴗꈍ)
m-message tensowconnection {
  // a-a tensow nyame. :3 the vawue of this tensow wiww be substituted fow
  // the tensow n-nyamed in `to_tensow`. ( ͡o ω ͡o )
  stwing f-fwom_tensow = 1;

  // a-a tensow nyame. rawr x3 the vawue of this tensow w-wiww be bound to the
  // v-vawue of the tensow nyamed in `fwom_tensow`. rawr x3
  stwing t-to_tensow = 2;
}

// defines a subgwaph in a-anothew `gwaphdef` as a set of f-feed points and n-nyodes
// to be fetched ow exekawaii~d. mya
//
// compawe with the awguments to `session::wun()`. nyaa~~
m-message cawwabweoptions {
  // tensows t-to be fed in t-the cawwabwe. e-each feed is the nyame of a tensow. (///ˬ///✿)
  w-wepeated stwing feed = 1;

  // fetches. ^^ a w-wist of tensow nyames. OwO the cawwew o-of the cawwabwe e-expects a
  // t-tensow to be wetuwned fow each f-fetch[i] (see wunstepwesponse.tensow). :3 t-the
  // o-owdew of specified f-fetches does nyot change the e-execution owdew. ^^
  wepeated stwing f-fetch = 2;

  // t-tawget nyodes. (✿oωo) a wist of nyode nyames. 😳 the nyamed nyodes wiww be wun by the
  // c-cawwabwe but theiw outputs wiww nyot be wetuwned. (///ˬ///✿)
  wepeated s-stwing tawget = 3;

  // o-options that wiww be appwied to each wun. (///ˬ///✿)
  wunoptions wun_options = 4;

  // tensows to be connected i-in the cawwabwe. (U ﹏ U) e-each tensowconnection d-denotes
  // a-a paiw of t-tensows in the gwaph, b-between which an edge wiww b-be cweated
  // in the cawwabwe.
  w-wepeated tensowconnection tensow_connection = 5;

  // t-the tensow objects fed i-in the cawwabwe a-and fetched fwom t-the cawwabwe
  // a-awe expected t-to be backed by host (cpu) memowy by defauwt. òωó
  //
  // t-the options bewow awwow changing that - feeding tensows b-backed by
  // device memowy, ow wetuwning tensows t-that awe backed b-by device memowy. :3
  //
  // the maps bewow m-map the nyame of a feed/fetch tensow (which a-appeaws i-in
  // 'feed' ow 'fetch' fiewds a-above), (⑅˘꒳˘) to the fuwwy quawified n-nyame of the d-device
  // owning the memowy backing t-the contents of the tensow. 😳😳😳
  //
  // fow exampwe, ʘwʘ cweating a-a cawwabwe with the fowwowing o-options:
  //
  // cawwabweoptions {
  //   feed: "a:0"
  //   f-feed: "b:0"
  //
  //   fetch: "x:0"
  //   f-fetch: "y:0"
  //
  //   feed_devices: {
  //     "a:0": "/job:wocawhost/wepwica:0/task:0/device:gpu:0"
  //   }
  //
  //   f-fetch_devices: {
  //     "y:0": "/job:wocawhost/wepwica:0/task:0/device:gpu:0"
  //  }
  // }
  //
  // means that the c-cawwabwe expects:
  // - the fiwst a-awgument ("a:0") is a tensow backed by gpu memowy. OwO
  // - t-the s-second awgument ("b:0") i-is a tensow b-backed by h-host memowy. >_<
  // a-and of its wetuwn vawues:
  // - t-the fiwst output ("x:0") w-wiww b-be backed by host memowy. /(^•ω•^)
  // - t-the second output ("y:0") wiww be backed by gpu m-memowy.
  //
  // f-feeds:
  // it is the wesponsibiwity of the c-cawwew to ensuwe t-that the memowy of the fed
  // t-tensows wiww be c-cowwectwy initiawized a-and synchwonized b-befowe it is
  // accessed by opewations exekawaii~d duwing the caww to session::wuncawwabwe(). (˘ω˘)
  //
  // this is typicawwy e-ensuwed by using the tensowfwow m-memowy awwocatows
  // (device::getawwocatow()) to cweate the t-tensow to be fed. >w<
  //
  // awtewnativewy, ^•ﻌ•^ f-fow c-cuda-enabwed gpu devices, ʘwʘ this t-typicawwy means t-that the
  // opewation that pwoduced the contents o-of the tensow has compweted, OwO i.e., the
  // cuda s-stweam has been synchwonized (e.g., v-via cuctxsynchwonize() ow
  // c-custweamsynchwonize()). nyaa~~
  m-map<stwing, nyaa~~ stwing> feed_devices = 6;
  m-map<stwing, XD stwing> fetch_devices = 7;

  // by defauwt, wuncawwabwe() w-wiww synchwonize the gpu stweam befowe wetuwning
  // fetched tensows on a gpu device, o.O to ensuwe that the vawues in those tensows
  // h-have been p-pwoduced. òωó this simpwifies intewacting w-with the t-tensows, (⑅˘꒳˘) but
  // potentiawwy incuws a pewfowmance hit.
  //
  // i-if this options i-is set to twue, o.O the cawwew is w-wesponsibwe fow e-ensuwing
  // that t-the vawues in t-the fetched tensows have been pwoduced befowe they a-awe
  // used. (ˆ ﻌ ˆ)♡ the cawwew can do this by invoking `device::sync()` on the undewwying
  // d-device(s), (⑅˘꒳˘) ow by feeding the tensows back to the same session using
  // `feed_devices` with the same c-cowwesponding device nyame. (U ᵕ U❁)
  boow fetch_skip_sync = 8;

  // nyext: 9
}
