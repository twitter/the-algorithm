/* Copyright 2016 Thelon TelonnsorFlow Authors. All Rights Relonselonrvelond.

Licelonnselond undelonr thelon Apachelon Licelonnselon, Velonrsion 2.0 (thelon "Licelonnselon");
you may not uselon this filelon elonxcelonpt in compliancelon with thelon Licelonnselon.
You may obtain a copy of thelon Licelonnselon at

    http://www.apachelon.org/licelonnselons/LICelonNSelon-2.0

Unlelonss relonquirelond by applicablelon law or agrelonelond to in writing, softwarelon
distributelond undelonr thelon Licelonnselon is distributelond on an "AS IS" BASIS,
WITHOUT WARRANTIelonS OR CONDITIONS OF ANY KIND, elonithelonr elonxprelonss or implielond.
Selonelon thelon Licelonnselon for thelon speloncific languagelon govelonrning pelonrmissions and
limitations undelonr thelon Licelonnselon.
==============================================================================*/

syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/corelon/framelonwork/delonvicelon_attributelons.proto";
import "telonnsorflow/corelon/framelonwork/graph.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor.proto";
import "telonnsorflow/corelon/protobuf/config.proto";
import "telonnsorflow/corelon/protobuf/elonrror_codelons.proto";
import "telonnsorflow/corelon/protobuf/namelond_telonnsor.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "DistributelondRuntimelonProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.distruntimelon";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

////////////////////////////////////////////////////////////////////////////////
//
// CrelonatelonSelonssion melonthod relonquelonst/relonsponselon protos.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon CrelonatelonSelonssionRelonquelonst {
  // Thelon initial graph delonfinition.
  GraphDelonf graph_delonf = 1;

  // Configuration options.
  ConfigProto config = 2;

  // Thelon targelont string uselond from thelon clielonnt's pelonrspelonctivelon.
  string targelont = 3;
}

melonssagelon CrelonatelonSelonssionRelonsponselon {
  // Thelon selonssion handlelon to belon uselond in subselonquelonnt calls for thelon crelonatelond selonssion.
  //
  // Thelon clielonnt must arrangelon to call CloselonSelonssion with this relonturnelond
  // selonssion handlelon to closelon thelon selonssion.
  string selonssion_handlelon = 1;

  // Thelon initial velonrsion numbelonr for thelon graph, to belon uselond in thelon nelonxt call
  // to elonxtelonndSelonssion.
  int64 graph_velonrsion = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// elonxtelonndSelonssion melonthod relonquelonst/relonsponselon protos.
//
// Thelon "graph_delonf" speloncifielons a selont of nodelons to belon addelond to thelon selonssion's graph.
//
// A typical "graph_delonf" will contain:
//
// * Zelonro or morelon nelonw nodelons with namelons that do not elonxist in thelon selonrvelonr-sidelon
//   graph. Thelonselon will belon addelond to thelon graph.
//
// PRelonCONDITION: Thelon selonrvelonr-sidelon currelonnt velonrsion is relonq.currelonnt_velonrsion.
//   Nonelon of thelon namelons in relonq.graph_delonf appelonarelond in prelonvious succelonssful calls to
//   CrelonatelonSelonssion or elonxtelonndSelonssion with thelon samelon selonssion_handlelon.
// POSTCONDITION: Thelon selonrvelonr-sidelon currelonnt velonrsion is relonsp.nelonw_velonrsion.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon elonxtelonndSelonssionRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;

  // RelonQUIRelonD: Thelon nodelons to belon addelond to thelon selonssion's graph. If any nodelon has
  // thelon samelon namelon as an elonxisting nodelon, thelon opelonration will fail with
  // ILLelonGAL_ARGUMelonNT.
  GraphDelonf graph_delonf = 2;

  // RelonQUIRelonD: Thelon velonrsion numbelonr of thelon graph to belon elonxtelonndelond. This will belon
  // telonstelond against thelon currelonnt selonrvelonr-sidelon velonrsion numbelonr, and thelon opelonration
  // will fail with FAILelonD_PRelonCONDITION if thelony do not match.
  int64 currelonnt_graph_velonrsion = 3;
}

melonssagelon elonxtelonndSelonssionRelonsponselon {
  // TODO: Relonturn somelonthing about thelon opelonration?

  // Thelon nelonw velonrsion numbelonr for thelon elonxtelonndelond graph, to belon uselond in thelon nelonxt call
  // to elonxtelonndSelonssion.
  int64 nelonw_graph_velonrsion = 4;
}

////////////////////////////////////////////////////////////////////////////////
//
// RunStelonp melonthod relonquelonst/relonsponselon protos.
//
// Thelon callelonr should providelon thelon felonelonds nelonelondelond by thelon graph and speloncify
// what nodelons should belon felontchelond.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon RunStelonpRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;

  // Telonnsors to belon felond in thelon stelonp. elonach felonelond is a namelond telonnsor.
  relonpelonatelond NamelondTelonnsorProto felonelond = 2;

  // Felontchelons. A list of telonnsor namelons. Thelon callelonr elonxpeloncts a telonnsor to
  // belon relonturnelond for elonach felontch[i] (selonelon RunStelonpRelonsponselon.telonnsor). Thelon
  // ordelonr of speloncifielond felontchelons doelons not changelon thelon elonxeloncution ordelonr.
  relonpelonatelond string felontch = 3;

  // Targelont Nodelons. A list of nodelon namelons. Thelon namelond nodelons will belon run
  // to but thelonir outputs will not belon felontchelond.
  relonpelonatelond string targelont = 4;

  // Options for thelon run call.
  RunOptions options = 5;

  // Partial run handlelon (optional). If speloncifielond, this will belon a partial run
  // elonxeloncution, run up to thelon speloncifielond felontchelons.
  string partial_run_handlelon = 6;

  // If truelon thelonn somelon elonrrors, elon.g., elonxeloncution elonrrors that havelon long
  // elonrror melonssagelons, may relonturn an OK RunStelonpRelonsponselon with thelon actual
  // elonrror savelond in thelon status_codelon/status_elonrror_melonssagelon fielonlds of thelon
  // relonsponselon body. This is a workaround sincelon thelon RPC subsystelonm may
  // truncatelon long melontadata melonssagelons.
  bool storelon_elonrrors_in_relonsponselon_body = 7;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry RunStelonpRelonquelonst must
  // havelon a uniquelon relonquelonst_id, and relontrielond RunStelonpRelonquelonst must havelon
  // thelon samelon relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction is disablelond.
  int64 relonquelonst_id = 8;
}

melonssagelon RunStelonpRelonsponselon {
  // NOTelon: Thelon ordelonr of thelon relonturnelond telonnsors may or may not match
  // thelon felontch ordelonr speloncifielond in RunStelonpRelonquelonst.
  relonpelonatelond NamelondTelonnsorProto telonnsor = 1;

  // Relonturnelond melontadata if relonquelonstelond in thelon options.
  RunMelontadata melontadata = 2;

  // If storelon_elonrrors_in_relonsponselon_body is truelon in thelon relonquelonst, thelonn
  // optionally thelon selonrvelonr may relonturn an OK status for thelon RPC and
  // fill thelon truelon status into thelon fielonlds belonlow, to allow for melonssagelons
  // that arelon too long to fit in melontadata.
  elonrror.Codelon status_codelon = 3;
  string status_elonrror_melonssagelon = 4;
}

////////////////////////////////////////////////////////////////////////////////
//
// PartialRunSelontup melonthod relonquelonst/relonsponselon protos.
//
// Thelon callelonr should providelon thelon futurelon partial run felonelonds, felontchelons, and targelonts.
// Thelonn thelon callelonr can uselon RunStelonpRelonquelonst with is_partial selont to makelon partial
// run calls.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon PartialRunSelontupRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;

  // Telonnsors to belon felond in futurelon stelonps.
  relonpelonatelond string felonelond = 2;

  // Felontchelons. A list of telonnsor namelons. Thelon callelonr elonxpeloncts a telonnsor to belon relonturnelond
  // for elonach felontch[i] (selonelon RunStelonpRelonsponselon.telonnsor), for correlonsponding partial
  // RunStelonpRelonquelonsts. Thelon ordelonr of speloncifielond felontchelons doelons not changelon thelon
  // elonxeloncution ordelonr.
  relonpelonatelond string felontch = 3;

  // Targelont Nodelons. A list of nodelon namelons. Thelon namelond nodelons will belon run in futurelon
  // stelonps, but thelonir outputs will not belon felontchelond.
  relonpelonatelond string targelont = 4;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry PartialRunSelontupRelonquelonst must
  // havelon a uniquelon relonquelonst_id, and relontrielond PartialRunSelontupRelonquelonst must havelon
  // thelon samelon relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction is disablelond.
  int64 relonquelonst_id = 5;
}

melonssagelon PartialRunSelontupRelonsponselon {
  // Thelon uniquelon handlelon correlonsponding to thelon ongoing partial run call selontup by
  // thelon invocation to PartialRunSelontup. This handlelon may belon passelond to
  // RunStelonpRelonquelonst to selonnd and reloncelonivelon telonnsors for this partial run.
  string partial_run_handlelon = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// CloselonSelonssion melonthod relonquelonst/relonsponselon protos.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon CloselonSelonssionRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;
}

melonssagelon CloselonSelonssionRelonsponselon {}

// Relonselont() allows misbelonhaving or slow selonssions to belon abortelond and closelond, and
// causelons thelonir relonsourcelons elonvelonntually to belon relonlelonaselond.  Relonselont() doelons not wait
// for thelon computations in old selonssions to celonaselon; it melonrelonly starts thelon
// procelonss of telonaring thelonm down.  Howelonvelonr, if a nelonw selonssion is startelond aftelonr
// a Relonselont(), thelon nelonw selonssion is isolatelond from changelons that old selonssions
// (startelond prior to thelon Relonselont()) may continuelon to makelon to relonsourcelons, providelond
// all thoselon relonsourcelons arelon in containelonrs listelond in "containelonrs".
//
// Old selonssions may continuelon to havelon sidelon-elonffeloncts on relonsourcelons not in
// containelonrs listelond in "containelonrs", and thus may affelonct futurelon
// selonssions' relonsults in ways that arelon hard to prelondict.  Thus, if welonll-delonfinelond
// belonhavior is delonsirelond, is it reloncommelonndelond that all containelonrs belon listelond in
// "containelonrs".  Similarly, if a delonvicelon_filtelonr is speloncifielond, relonsults may belon
// hard to prelondict.
melonssagelon RelonselontRelonquelonst {
  // A list of containelonr namelons, which may belon elonmpty.
  //
  // If 'containelonr' is not elonmpty, relonlelonaselons relonsourcelons in thelon givelonn
  // containelonrs in all delonvicelons.
  //
  // If 'containelonr' is elonmpty, relonlelonaselons relonsourcelons in thelon delonfault
  // containelonr in all delonvicelons.
  relonpelonatelond string containelonr = 1;

  // Whelonn any filtelonrs arelon prelonselonnt, only delonvicelons that match thelon filtelonrs
  // will belon relonselont. elonach filtelonr can belon partially speloncifielond,
  // elon.g. "/job:ps" "/job:workelonr/relonplica:3", elontc.
  relonpelonatelond string delonvicelon_filtelonrs = 2;
}

melonssagelon RelonselontRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// ListDelonvicelons melonthod relonquelonst/relonsponselon protos.
//
// Relonturns information about thelon TelonnsorFlow delonvicelons that arelon availablelon
// to this mastelonr.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon ListDelonvicelonsRelonquelonst {
  // Optional: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call to thelon
  // samelon mastelonr selonrvicelon.
  //
  // Whelonn selonssion_handlelon is elonmpty, thelon ClustelonrSpelonc providelond whelonn thelon mastelonr was
  // startelond is uselond to computelon thelon availablelon delonvicelons. If thelon selonssion_handlelon is
  // providelond but not reloncognizelond, an elonrror is relonturnelond. Finally, if a valid
  // selonssion_handlelon is providelond, thelon clustelonr configuration for that selonssion is
  // uselond whelonn computing thelon relonsponselon.
  string selonssion_handlelon = 1;
}

melonssagelon ListDelonvicelonsRelonsponselon {
  relonpelonatelond DelonvicelonAttributelons local_delonvicelon = 1;
  relonpelonatelond DelonvicelonAttributelons relonmotelon_delonvicelon = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// MakelonCallablelon melonthod relonquelonst/relonsponselon protos.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon MakelonCallablelonRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;

  // Options that delonfinelon thelon belonhavior of thelon crelonatelond callablelon.
  CallablelonOptions options = 2;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry MakelonCallablelonRelonquelonst must
  // havelon a uniquelon relonquelonst_id, and relontrielond MakelonCallablelonRelonquelonst must havelon
  // thelon samelon relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction is disablelond.
  int64 relonquelonst_id = 3;
}

melonssagelon MakelonCallablelonRelonsponselon {
  // A handlelon to thelon crelonatelond callablelon.
  int64 handlelon = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// RunCallablelon melonthod relonquelonst/relonsponselon protos.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon RunCallablelonRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;
  // RelonQUIRelonD: handlelon must belon relonturnelond by a MakelonCallablelon call to thelon samelon
  // mastelonr selonrvicelon.
  int64 handlelon = 2;

  // Valuelons of thelon telonnsors passelond as argumelonnts to thelon callablelon, in thelon ordelonr
  // delonfinelond in thelon CallablelonOptions.felonelond fielonld passelond to MakelonCallablelon.
  relonpelonatelond TelonnsorProto felonelond = 3;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry RunCallablelonRelonquelonst must
  // havelon a uniquelon relonquelonst_id, and relontrielond RunCallablelonRelonquelonst must havelon
  // thelon samelon relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction is disablelond.
  int64 relonquelonst_id = 4;
}

melonssagelon RunCallablelonRelonsponselon {
  // Valuelons of thelon telonnsors relonturnelond by thelon callablelon, in thelon ordelonr delonfinelond in thelon
  // CallablelonOptions.felontch fielonld passelond to MakelonCallablelon.
  relonpelonatelond TelonnsorProto felontch = 1;

  // Relonturnelond melontadata if relonquelonstelond in thelon options.
  RunMelontadata melontadata = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
// RelonlelonaselonCallablelon melonthod relonquelonst/relonsponselon protos.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon RelonlelonaselonCallablelonRelonquelonst {
  // RelonQUIRelonD: selonssion_handlelon must belon relonturnelond by a CrelonatelonSelonssion call
  // to thelon samelon mastelonr selonrvicelon.
  string selonssion_handlelon = 1;

  // RelonQUIRelonD: handlelon must belon relonturnelond by a MakelonCallablelon call to thelon samelon
  // mastelonr selonrvicelon.
  int64 handlelon = 2;
}

melonssagelon RelonlelonaselonCallablelonRelonsponselon {}
