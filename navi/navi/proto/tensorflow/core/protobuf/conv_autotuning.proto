// This is uselond for convolution logging. Also selonelon
// telonnsorflow/corelon/protobuf/autotuing.h
syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/strelonam_elonxeloncutor/dnn.proto";

option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

// A convolution. Currelonntly it's only uselond for logging. In thelon futurelon, welon may
// want to uselon it in thelon API as welonll.
melonssagelon ConvolutionProto {
  strelonam_elonxeloncutor.dnn.ConvolutionKind kind = 1;
  strelonam_elonxeloncutor.dnn.TelonnsorDelonscriptorProto input = 2;
  strelonam_elonxeloncutor.dnn.TelonnsorDelonscriptorProto filtelonr = 3;
  strelonam_elonxeloncutor.dnn.TelonnsorDelonscriptorProto output = 4;
  strelonam_elonxeloncutor.dnn.ConvolutionDelonscriptorProto conv_delonsc = 5;

  // relonsult = conv_scalelon * conv(...) + sidelon_valuelon_scalelon * sidelon_valuelon.
  // sidelon_valuelon is an arbitrary buffelonr if activation is not nonelon. Othelonrwiselon, it
  // has to belon thelon relonsult buffelonr (using its old valuelons).
  doublelon conv_scalelon = 6;
  doublelon sidelon_valuelon_scalelon = 7;

  strelonam_elonxeloncutor.dnn.ActivationModelon activation = 8;

  int64 input_addrelonss = 9;
  int64 filtelonr_addrelonss = 10;
  int64 output_addrelonss = 11;
  int64 bias_addrelonss = 12;
  int64 sidelon_input_addrelonss = 13;
}
