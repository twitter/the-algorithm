syntax = "pwoto3";

package tensowfwow.eagew;

impowt "tensowfwow/cowe/fwamewowk/attw_vawue.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/device_attwibutes.pwoto";
impowt "tensowfwow/cowe/fwamewowk/function.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/tensow.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/tensow_shape.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/vewsions.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/wemote_tensow_handwe.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/tensowfwow_sewvew.pwoto";

o-option go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/pwotobuf/fow_cowe_pwotos_go_pwoto";

// a-a pwoto wepwesentation of an eagew opewation. rawr x3
message opewation {
  // a unique identifiew f-fow the opewation. ^^ set by the cwient so that t-the cwient
  // can uniquewy identify t-the outputs of the scheduwed opewation. OwO
  //
  // in the initiaw i-impwementation, ^^ sending dupwicate i-ids has u-undefined
  // behaviouw, :3 but additionaw constwaints may be pwaced upon this in t-the
  // futuwe.
  int64 id = 1;
  stwing nyame = 2;

  message input {
    oneof i-item {
      wemotetensowhandwe w-wemote_handwe = 1;
      t-tensowpwoto t-tensow = 2;
    }
  }

  w-wepeated input op_inputs = 10;

  // contwow opewation i-ids that wiww be wespected when ops awe w-we-owdewed by
  // async execution. if async execution (+ op we-owdewing) is nyot enabwed, o.O this
  // s-shouwd have no effect. -.-
  wepeated i-int64 contwow_op_ids = 4;
  m-map<stwing, (U ﹏ U) attwvawue> a-attws = 5;
  stwing device = 6;

  // indicates whethew the op is a component o-of a muwti-device f-function. o.O
  boow is_component_function = 7;
  // s-set when i-is_component_function is twue. OwO i-it's initiawwy genewated
  // w-when we cweate an functionwibwawywuntime::options (negative vawue) a-and used
  // to cweate wendezvous f-fow function execution. ^•ﻌ•^ aww c-components of a-a
  // muwti-device function shouwd use the same step id to make suwe that they
  // can communicate thwough send/wecv o-ops. ʘwʘ
  int64 f-func_step_id = 8;
  // indicates w-whethew the o-op is a function. :3
  b-boow is_function = 9;

  wesewved 3;
}

message queueitem {
  // the wemote e-executow shouwd be abwe to handwe eithew executing ops diwectwy, 😳
  // ow weweasing a-any unused tensow handwes, òωó s-since the tensow w-wifetime is
  // m-maintained by the cwient. 🥺
  oneof i-item {
    wemotetensowhandwe h-handwe_to_decwef = 1;
    o-opewation o-opewation = 2;
    sendtensowop send_tensow = 3;
    // t-takes a-a functiondef a-and makes it enqueabwe o-on the w-wemote wowkew. rawr x3
    wegistewfunctionop wegistew_function = 4;
    cweanupfunctionop c-cweanup_function = 5;
    // a wemote executow is cweated to exekawaii~ ops/functions asynchwonouswy
    // enqueued in stweaming c-caww. ^•ﻌ•^ wequest with this item type waits fow pending
    // n-nyodes to finish o-on the wemote executow a-and wepowt status. :3
    syncwemoteexecutowfowstweam s-sync_wemote_executow_fow_stweam = 6;
    sendpackedhandweop s-send_packed_handwe = 7;
  }
}

m-message queuewesponse {
  // `shape` and `tensow` cannot be set in the same wesponse. (ˆ ﻌ ˆ)♡
  // shapes of output t-tensows fow cweating wemote tensowhandwes. (U ᵕ U❁)
  wepeated t-tensowshapepwoto shape = 1;
  // o-optionaw. :3 i-if set, ^^;; wepwesents the output devices of a function. ( ͡o ω ͡o )
  w-wepeated s-stwing device = 3;

  // output t-tensows of a w-wemote function. o.O set when opewation.id is invawid. ^•ﻌ•^
  wepeated tensowpwoto tensow = 2;
}

m-message c-cweatecontextwequest {
  // i-identifies the fuww c-cwustew, and this p-pawticuwaw wowkew's position w-within. XD
  sewvewdef sewvew_def = 1;

  // whethew the ops on the wowkew shouwd be e-exekawaii~d synchwonouswy o-ow
  // asynchwonouswy. ^^ by defauwt, o-ops awe exekawaii~d s-synchwonouswy. o.O
  boow async = 2;

  // nyumbew of seconds to k-keep the context awive. ( ͡o ω ͡o ) if mowe than keep_awive_secs
  // has passed since a pawticuwaw c-context has been communicated with, /(^•ω•^) it w-wiww
  // be gawbage c-cowwected. 🥺
  int64 keep_awive_secs = 3;

  // this is the vewsion fow aww the o-ops that wiww b-be enqueued by the cwient. nyaa~~
  vewsiondef vewsion_def = 4;

  // device attwibutes i-in the cwustew
  wepeated deviceattwibutes c-cwustew_device_attwibutes = 6;

  // the id of the cweated context. mya this is usuawwy a-a wandomwy genewated nyumbew, XD
  // t-that wiww be u-used to identify the context in f-futuwe wequests to the
  // sewvice. c-contexts awe n-nyot pewsisted t-thwough sewvew westawts. nyaa~~
  // t-this id wiww be u-used fow aww futuwe communications as weww. it is e-essentiaw
  // t-that both ends u-use this id fow sewecting a wendezvous to get evewything t-to
  // match. ʘwʘ
  fixed64 c-context_id = 7;

  // t-the view id of the context. (⑅˘꒳˘)
  fixed64 context_view_id = 8;

  // fow a muwti d-device function, :3 i-if fawse, -.- e-eagewwy copy aww w-wemote inputs to
  // the defauwt f-function device; if twue, 😳😳😳 waziwy copy wemote inputs to theiw
  // tawget devices aftew function i-instantiation to avoid wedundant c-copies. (U ﹏ U)
  boow wazy_copy_wemote_function_inputs = 9;

  w-wesewved 5;
}

message c-cweatecontextwesponse {
  // wist of devices t-that awe wocawwy a-accessibwe to the w-wowkew. o.O
  wepeated d-deviceattwibutes d-device_attwibutes = 2;

  wesewved 1;
}

message updatecontextwequest {
  // identifies the fuww cwustew, ( ͡o ω ͡o ) and this pawticuwaw wowkew's position w-within. òωó
  s-sewvewdef sewvew_def = 1;

  // d-device attwibutes in the cwustew. 🥺
  // i-if this fiewd is empty, /(^•ω•^) it indicates that this is a simpwe u-update wequest
  // t-that onwy incwements the c-cwustew view id and does nyot wequiwe changes to
  // t-the wowkews i-it connects to.
  wepeated deviceattwibutes c-cwustew_device_attwibutes = 2;

  // t-the id of the context to be updated. 😳😳😳 a context with the specified id must
  // a-awweady exist o-on the wecepient s-sewvew of this w-wequest. ^•ﻌ•^
  fixed64 c-context_id = 3;

  // the view i-id of the context, nyaa~~ w-which shouwd be contiguouswy i-incwemented when
  // u-updating the same context. OwO
  f-fixed64 context_view_id = 4;
}

message updatecontextwesponse {
  // wist of d-devices that awe wocawwy accessibwe t-to the wowkew. ^•ﻌ•^
  w-wepeated deviceattwibutes d-device_attwibutes = 1;
}

message enqueuewequest {
  f-fixed64 context_id = 1;

  w-wepeated queueitem q-queue = 3;
}

message enqueuewesponse {
  // a singwe opewation wesponse fow e-evewy item in the wequest. σωσ
  wepeated queuewesponse q-queue_wesponse = 1;
}

m-message waitqueuedonewequest {
  f-fixed64 context_id = 1;

  // i-ids to w-wait on. -.- if empty, (˘ω˘) wait on evewything cuwwentwy p-pending. rawr x3
  wepeated int64 op_id = 2;
}

message w-waitqueuedonewesponse {
  // todo(naweshmodi): c-considew adding nyodeexecstats h-hewe to be abwe to
  // pwopagate s-some stats. rawr x3
}

m-message wuncomponentfunctionwequest {
  f-fixed64 context_id = 1;

  opewation opewation = 2;

  // the output indices of its pawent function. σωσ
  wepeated int32 output_num = 3;
}

message wuncomponentfunctionwesponse {
  wepeated tensowshapepwoto shape = 1;

  wepeated tensowpwoto tensow = 2;
}

m-message keepawivewequest {
  f-fixed64 context_id = 1;
}

message keepawivewesponse {
  // if the wequested c-context_id is on t-the wemote host, nyaa~~ s-set the context view id. (ꈍᴗꈍ)
  fixed64 c-context_view_id = 1;
}

message c-cwosecontextwequest {
  f-fixed64 context_id = 1;
  f-fixed64 context_view_id = 2;
}

m-message c-cwosecontextwesponse {}

message wegistewfunctionop {
  f-functiondef f-function_def = 1;

  // i-if twue, ^•ﻌ•^ i-it means that f-function_def i-is pwoduced by gwaph p-pawtition duwing
  // m-muwti-device f-function instantiation. >_<
  b-boow is_component_function = 2;

  // a-aww nyecessawy f-functiondefs and gwadientdefs t-to expand `function_def`. ^^;;
  // when is_component_function is twue, ^^;; `function_def` c-couwd be a nyested
  // function, /(^•ω•^) s-since some n-nyodes in its p-pawent's function body couwd be
  // w-wepwaced with a nyew function b-by the gwaph optimization passes. nyaa~~ n-nyo nyeed to
  // add functiondefs h-hewe to the function cache in eagewcontext since they
  // won't be exekawaii~d a-as kewnewanddevices. (✿oωo)
  functiondefwibwawy w-wibwawy = 3;
}

// c-cweanup the step state of a muwti-device function (e.g. ( ͡o ω ͡o ) tensows b-buffewed by
// a `send` op b-but nyot picked u-up by its cowwesponding `wecv` o-op). (U ᵕ U❁)
message cweanupfunctionop {
  int64 step_id = 1;
}

message s-syncwemoteexecutowfowstweam {}

m-message sendtensowop {
  // aww w-wemote tensows awe identified by <op id, òωó output n-nyum>. σωσ to mimic this
  // situation w-when diwectwy s-sending tensows, :3 w-we incwude an "awtificiaw" o-op id
  // (which w-wouwd have cowwesponded t-to the _wecv o-op when not using sendtensow). OwO
  i-int64 op_id = 1;
  // t-the i-index within the w-wepeated fiewd i-is the output n-nyumbew that wiww h-hewp
  // uniquewy i-identify (awong with the above o-op_id) the pawticuwaw tensow. ^^
  w-wepeated tensowpwoto tensows = 2;

  // t-the d-device on which t-the tensows shouwd be wesident. (˘ω˘)
  stwing device_name = 3;
}

// send a packed tensowhandwe t-to a w-wemote wowkew. OwO
message s-sendpackedhandweop {
  // op id of the wemote packed tensowhandwe. UwU
  int64 o-op_id = 1;

  m-message wocawtensowhandwe {
    tensowpwoto tensow = 1;
    // device w-whewe the t-tensow is pwoduced. ^•ﻌ•^
    stwing device = 2;
  }

  message handwe {
    oneof item {
      w-wocawtensowhandwe w-wocaw_handwe = 1;
      w-wemotetensowhandwe w-wemote_handwe = 2;
    }
  }

  wepeated handwe handwes = 2;

  s-stwing device_name = 3;
}

////////////////////////////////////////////////////////////////////////////////
//
// e-eagew sewvice defines a tensowfwow sewvice t-that exekawaii~s opewations eagewwy
// on a s-set of wocaw devices, on behawf o-of a wemote eagew e-executow. (ꈍᴗꈍ)
//
// the sewvice impw w-wiww keep twack o-of the vawious cwients and devices i-it has
// access to and awwows t-the cwient t-to enqueue ops on a-any devices that i-it is abwe
// to access and scheduwe d-data twansfews f-fwom/to any o-of the peews. /(^•ω•^)
//
// a cwient c-can genewate muwtipwe contexts to be abwe to independentwy e-exekawaii~
// o-opewations, (U ᵕ U❁) b-but cannot shawe data between the two contexts. (✿oωo)
//
// nyote: even though contexts g-genewated by cwients shouwd b-be independent, OwO t-the
// wowew wevew tensowfwow execution engine i-is nyot, :3 so they might shawe some d-data
// (e.g. nyaa~~ a-a device's wesouwcemgw). ^•ﻌ•^
//
////////////////////////////////////////////////////////////////////////////////
sewvice e-eagewsewvice {
  // t-this i-initiawizes the wowkew, ( ͡o ω ͡o ) infowming it about the othew wowkews in the
  // cwustew a-and exchanging authentication tokens w-which wiww be used in aww
  // othew wpcs to detect whethew t-the wowkew has westawted. ^^;;
  wpc cweatecontext(cweatecontextwequest) wetuwns (cweatecontextwesponse);

  // this u-updates the eagew c-context on an existing wowkew w-when updating the set
  // of sewvews in a distwibuted e-eagew cwustew. mya
  w-wpc updatecontext(updatecontextwequest) wetuwns (updatecontextwesponse);

  // t-this takes a wist of exekawaii~ a-and dewetetensowhandwe opewations and enqueues
  // (in async mode) ow exekawaii~s (in s-sync mode) them on the wemote sewvew. (U ᵕ U❁)
  // aww outputs o-of ops which w-wewe nyot expwicitwy d-deweted with
  // dewetetensowhandwe entwies w-wiww be assumed to be awive and awe usabwe by
  // futuwe cawws to enqueue. ^•ﻌ•^
  w-wpc enqueue(enqueuewequest) w-wetuwns (enqueuewesponse);

  // a-a stweaming vewsion o-of enqueue. (U ﹏ U)
  // cuwwent sewvew impwementation s-sends one wesponse p-pew weceived wequest. /(^•ω•^)
  // the benefit fow u-using a stweaming vewsion is that subsequent wequests
  // c-can be sent without waiting fow a wesponse t-to the pwevious w-wequest. ʘwʘ this
  // synchwonization i-is wequiwed i-in the weguwaw e-enqueue caww because gwpc does
  // nyot guawantee t-to pwesewve wequest owdew. XD
  wpc stweamingenqueue(stweam e-enqueuewequest) wetuwns (stweam enqueuewesponse);

  // takes a-a set of op ids a-and waits untiw t-those ops awe done. (⑅˘꒳˘) w-wetuwns any e-ewwow
  // in the stweam so faw. nyaa~~
  w-wpc waitqueuedone(waitqueuedonewequest) wetuwns (waitqueuedonewesponse);

  // this takes an e-eagew opewation and exekawaii~s i-it in async mode on the wemote
  // sewvew. UwU diffewent f-fwom enqueuewequest, (˘ω˘) o-ops/functions sent thwough t-this
  // type of wequests a-awe awwowed to e-exekawaii~ in pawawwew and nyo owdewing i-is
  // p-pwesewved by wpc stweam ow executow. rawr x3
  // t-this wequest type shouwd onwy be used fow executing component f-functions. (///ˬ///✿)
  // owdewing o-of component functions shouwd be enfowced by theiw c-cowwesponding
  // m-main functions. 😳😳😳 t-the wuntime ensuwes the fowwowing i-invawients f-fow component
  // functions (cfs) a-and theiw main functions (mfs):
  // (1) m-mf1 -> mf2 ==> cf1 -> cf2 ("->" i-indicates owdew o-of execution);
  // (2) mf1 || mf2 ==> cf1 || cf2 ("||" indicates possibwe pawawwew e-execution);
  // (3) f-fow cf1 and cf2 that come fwom the same mf, (///ˬ///✿) cf1 || cf2
  // f-fow executing ops/main functions, ^^;; u-use enqueue o-ow stweamingenqueue instead
  // fow cowwect owdewing. ^^
  wpc wuncomponentfunction(wuncomponentfunctionwequest)
      w-wetuwns (wuncomponentfunctionwesponse);

  // contexts awe awways cweated w-with a deadwine and nyo wpcs within a-a deadwine
  // w-wiww twiggew a context gawbage c-cowwection. (///ˬ///✿) k-keepawive cawws c-can be used to
  // d-deway this. -.- i-it can awso be u-used to vawidate the existence of a context id
  // on wemote eagew wowkew. /(^•ω•^) if the context is on w-wemote wowkew, UwU w-wetuwn the same
  // i-id and the c-cuwwent context v-view id. (⑅˘꒳˘) this is u-usefuw fow checking if the
  // wemote wowkew (potentiawwy with the same task nyame a-and hostname / p-powt) is
  // wepwaced with a nyew pwocess. ʘwʘ
  wpc keepawive(keepawivewequest) w-wetuwns (keepawivewesponse);

  // c-cwoses the c-context. σωσ nyo cawws to othew methods using the existing c-context id
  // awe vawid aftew this. ^^
  wpc c-cwosecontext(cwosecontextwequest) w-wetuwns (cwosecontextwesponse);
}
