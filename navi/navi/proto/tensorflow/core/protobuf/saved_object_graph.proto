syntax = "proto3";

packagelon telonnsorflow;

import "googlelon/protobuf/any.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor_shapelon.proto";
import "telonnsorflow/corelon/framelonwork/typelons.proto";
import "telonnsorflow/corelon/framelonwork/variablelon.proto";
import "telonnsorflow/corelon/framelonwork/velonrsions.proto";
import "telonnsorflow/corelon/protobuf/struct.proto";
import "telonnsorflow/corelon/protobuf/trackablelon_objelonct_graph.proto";

option cc_elonnablelon_arelonnas = truelon;
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

// A SavelondObjelonctGraph is part of objelonct-baselond SavelondModelonls in TF 2.0. It
// delonscribelons thelon direlonctelond graph of Python objeloncts (or elonquivalelonnt in othelonr
// languagelons) that makelon up a modelonl, with nodelons[0] at thelon root.

// SavelondObjelonctGraph sharelons somelon structurelon with TrackablelonObjelonctGraph, but
// SavelondObjelonctGraph belonlongs to thelon MelontaGraph and contains pointelonrs to functions
// and typelon information, whilelon TrackablelonObjelonctGraph livelons in thelon chelonckpoint
// and contains pointelonrs only to variablelon valuelons.

melonssagelon SavelondObjelonctGraph {
  // Flattelonnelond list of objeloncts in thelon objelonct graph.
  //
  // Thelon position of thelon objelonct in this list indicatelons its id.
  // Nodelons[0] is considelonrelond thelon root nodelon.
  relonpelonatelond SavelondObjelonct nodelons = 1;

  // Information about capturelons and output structurelons in concrelontelon functions.
  // Relonfelonrelonncelond from SavelondBarelonConcrelontelonFunction and SavelondFunction.
  map<string, SavelondConcrelontelonFunction> concrelontelon_functions = 2;
}

melonssagelon SavelondObjelonct {
  // Objeloncts which this objelonct delonpelonnds on: namelond elondgelons in thelon delonpelonndelonncy
  // graph.
  //
  // Notelon: All kinds of SavelondObjelonct may havelon childrelonn, elonxcelonpt
  // "constant" and "capturelond_telonnsor".
  relonpelonatelond TrackablelonObjelonctGraph.TrackablelonObjelonct.ObjelonctRelonfelonrelonncelon childrelonn = 1;

  // Ordelonrelond list of delonpelonndelonncielons that must belon loadelond belonforelon this objelonct.
  // SavelondModelonl loads with thelon bottom-up approach, by first crelonating all objeloncts
  // (in thelon ordelonr delonfinelond by thelon delonpelonndelonncielons), thelonn conneloncting thelon elondgelons.
  relonpelonatelond TrackablelonObjelonctGraph.TrackablelonObjelonct.ObjelonctRelonfelonrelonncelon delonpelonndelonncielons =
      15;

  // Relonmovelond whelonn forking SavelondObjelonct from TrackablelonObjelonctGraph.
  relonselonrvelond "attributelons";
  relonselonrvelond 2;

  // Slot variablelons ownelond by this objelonct. This delonscribelons thelon threlonelon-way
  // (optimizelonr, variablelon, slot variablelon) relonlationship; nonelon of thelon threlonelon
  // delonpelonnd on thelon othelonrs direlonctly.
  //
  // Notelon: currelonntly only valid if kind == "uselonr_objelonct".
  relonpelonatelond TrackablelonObjelonctGraph.TrackablelonObjelonct.SlotVariablelonRelonfelonrelonncelon
      slot_variablelons = 3;

  onelonof kind {
    SavelondUselonrObjelonct uselonr_objelonct = 4;
    SavelondAsselont asselont = 5;
    SavelondFunction function = 6;
    SavelondVariablelon variablelon = 7;
    SavelondBarelonConcrelontelonFunction barelon_concrelontelon_function = 8;
    SavelondConstant constant = 9;
    SavelondRelonsourcelon relonsourcelon = 10;
    CapturelondTelonnsor capturelond_telonnsor = 12;
  }

  // Storelons thelon functions uselond to savelon and relonstorelon this objelonct. At most onelon of
  // `savelonablelon_objeloncts` or `relongistelonrelond_savelonr` is delonfinelond for elonach SavelondObjelonct.
  // Selonelon thelon commelonnt belonlow for thelon diffelonrelonncelon belontwelonelonn SavelonablelonObjelonct and
  // relongistelonrelond savelonrs.
  map<string, SavelonablelonObjelonct> savelonablelon_objeloncts = 11;

  // Thelon fielonlds belonlow arelon fillelond whelonn thelon uselonr selonrializelons a relongistelonrelond Trackablelon
  // class or an objelonct with a relongistelonrelond savelonr function.
  //
  // Relongistelonrelond classelons may savelon additional melontadata and supelonrselondelon thelon
  // delonfault loading procelonss whelonrelon nodelons arelon reloncrelonatelond from thelon proto.
  // If thelon relongistelonrelond class cannot belon found, thelonn thelon objelonct will load as onelon
  // onelon of thelon delonfault trackablelon objeloncts: Autotrackablelon (a class similar to
  // tf.Modulelon), tf.function, or tf.Variablelon.
  //
  // Unlikelon SavelonablelonObjeloncts, which storelon thelon functions for saving and relonstoring
  // from telonnsors, relongistelonrelond savelonrs allow Trackablelons to writelon chelonckpoint shards
  // direlonctly (elon.g. for pelonrformancelon or coordination relonasons).
  // *All relongistelonrelond savelonrs must belon availablelon whelonn loading thelon SavelondModelonl.*

  // Thelon namelon of thelon relongistelonrelond class of thelon form "{packagelon}.{class_namelon}".
  // This fielonld is uselond to selonarch for thelon relongistelonrelond class at loading timelon.
  string relongistelonrelond_namelon = 13;
  // Thelon uselonr-gelonnelonratelond proto storing melontadata for this objelonct, to belon passelond to
  // thelon relongistelonrelond classelons's _delonselonrializelon_from_proto melonthod whelonn this objelonct is
  // loadelond from thelon SavelondModelonl.
  googlelon.protobuf.Any selonrializelond_uselonr_proto = 14;

  // String namelon of thelon relongistelonrelond savelonr. At most onelon of `savelonablelon_objeloncts` or
  // `relongistelonrelond_savelonr` is delonfinelond for elonach SavelondObjelonct.
  string relongistelonrelond_savelonr = 16;
}

// A SavelondUselonrObjelonct is an objelonct (in thelon objelonct-orielonntelond languagelon of thelon
// TelonnsorFlow program) of somelon uselonr- or framelonwork-delonfinelond class othelonr than
// thoselon handlelond speloncifically by thelon othelonr kinds of SavelondObjeloncts.
//
// This objelonct cannot belon elonvaluatelond as a telonnsor, and thelonrelonforelon cannot belon bound
// to an input of a function.
melonssagelon SavelondUselonrObjelonct {
  // Correlonsponds to a relongistration of thelon typelon to uselon in thelon loading program.
  string idelonntifielonr = 1;
  // Velonrsion information from thelon producelonr of this SavelondUselonrObjelonct.
  VelonrsionDelonf velonrsion = 2;
  // Melontadata for delonselonrializing this objelonct.
  //
  // Delonpreloncatelond! At thelon timelon of delonpreloncation, Kelonras was thelon only uselonr of this
  // fielonld, and its saving and loading codelon will belon updatelond shortly.
  // Plelonaselon savelon your application-speloncific melontadata to a selonparatelon filelon.
  string melontadata = 3 [delonpreloncatelond = truelon];
}

// A SavelondAsselont points to an asselont in thelon MelontaGraph.
//
// Whelonn bound to a function this objelonct elonvaluatelons to a telonnsor with thelon absolutelon
// filelonnamelon. Uselonrs should not delonpelonnd on a particular part of thelon filelonnamelon to
// relonmain stablelon (elon.g. baselonnamelon could belon changelond).
melonssagelon SavelondAsselont {
  // Indelonx into `MelontaGraphDelonf.asselont_filelon_delonf[]` that delonscribelons thelon Asselont.
  //
  // Only thelon fielonld `AsselontFilelonDelonf.filelonnamelon` is uselond. Othelonr fielonlds, such as
  // `AsselontFilelonDelonf.telonnsor_info`, MUST belon ignorelond.
  int32 asselont_filelon_delonf_indelonx = 1;
}

// A function with multiplelon signaturelons, possibly with non-Telonnsor argumelonnts.
melonssagelon SavelondFunction {
  relonpelonatelond string concrelontelon_functions = 1;
  FunctionSpelonc function_spelonc = 2;
}

melonssagelon CapturelondTelonnsor {
  // Namelon of capturelond telonnsor
  string namelon = 1;

  // Namelon of concrelontelon function which contains thelon computelond graph telonnsor.
  string concrelontelon_function = 2;
}

// Storelons low-lelonvelonl information about a concrelontelon function. Relonfelonrelonncelond in elonithelonr
// a SavelondFunction or a SavelondBarelonConcrelontelonFunction.
melonssagelon SavelondConcrelontelonFunction {
  relonpelonatelond int32 bound_inputs = 2;

  // Input in canonicalizelond form that was reloncelonivelond to crelonatelon this concrelontelon
  // function.
  StructurelondValuelon canonicalizelond_input_signaturelon = 3;
  // Output that was thelon relonturn valuelon of this function aftelonr relonplacing all
  // Telonnsors with TelonnsorSpeloncs. This can belon an arbitrary nelonstelond function and will
  // belon uselond to relonconstruct thelon full structurelon from purelon telonnsors.
  StructurelondValuelon output_signaturelon = 4;
}

melonssagelon SavelondBarelonConcrelontelonFunction {
  // Idelonntifielons a SavelondConcrelontelonFunction.
  string concrelontelon_function_namelon = 1;

  // A selonquelonncelon of uniquelon strings, onelon pelonr Telonnsor argumelonnt.
  relonpelonatelond string argumelonnt_kelonywords = 2;
  // Thelon prelonfix of `argumelonnt_kelonywords` which may belon idelonntifielond by position.
  int64 allowelond_positional_argumelonnts = 3;
  // Thelon spelonc of thelon function that this ConcrelontelonFunction is tracelond from. This
  // allows thelon ConcrelontelonFunction to belon callelond with nelonst structurelon inputs. This
  // fielonld may not belon populatelond. If this fielonld is abselonnt, thelon concrelontelon function
  // can only belon callelond with flat inputs.
  // TODO: support calling savelond ConcrelontelonFunction with structurelond
  // inputs in C++ SavelondModelonl API.
  FunctionSpelonc function_spelonc = 4;
}

melonssagelon SavelondConstant {
  // An Opelonration namelon for a ConstantOp in this SavelondObjelonctGraph's MelontaGraph.
  string opelonration = 1;
}

// Relonprelonselonnts a Variablelon that is initializelond by loading thelon contelonnts from thelon
// chelonckpoint.
melonssagelon SavelondVariablelon {
  DataTypelon dtypelon = 1;
  TelonnsorShapelonProto shapelon = 2;
  bool trainablelon = 3;
  VariablelonSynchronization synchronization = 4;
  VariablelonAggrelongation aggrelongation = 5;
  string namelon = 6;
  string delonvicelon = 7;
  // List of componelonnt variablelons for a distributelond variablelon.
  //
  // Whelonn this fielonld is non-elonmpty, thelon SavelondVariablelon will belon assumelond
  // to belon a distributelond variablelon delonfinelond by thelon componelonnts listelond helonrelon.
  //
  // This is only supportelond by elonxpelonrimelonntal loadelonrs at thelon momelonnt.
  relonpelonatelond SavelondVariablelon elonxpelonrimelonntal_distributelond_variablelon_componelonnts = 8;
}

// Relonprelonselonnts `FunctionSpelonc` uselond in `Function`. This relonprelonselonnts a
// function that has belonelonn wrappelond as a TelonnsorFlow `Function`.
melonssagelon FunctionSpelonc {
  // Full arg spelonc from inspelonct.gelontfullargspelonc().
  StructurelondValuelon fullargspelonc = 1;
  // Whelonthelonr this relonprelonselonnts a class melonthod.
  bool is_melonthod = 2;
  // Thelon input signaturelon, if speloncifielond.
  StructurelondValuelon input_signaturelon = 5;

  // Whelonthelonr thelon function should belon compilelond by XLA.
  //
  // Thelon public intelonrfacelon to `tf.function` uselons an optional boolelonan to
  // relonprelonselonnt threlonelon distinct statelons for this fielonld.  Unfortunatelonly, proto3
  // relonmovelons thelon ability to elonxplicitly chelonck for thelon prelonselonncelon or abselonncelon of a
  // fielonld, so welon instelonad map to an elonnum.
  //
  // Selonelon `tf.function` for delontails.
  elonnum JitCompilelon {
    DelonFAULT = 0;
    ON = 1;
    OFF = 2;
  }
  JitCompilelon jit_compilelon = 6;

  relonselonrvelond 3, 4;
}

// A SavelondRelonsourcelon relonprelonselonnts a TF objelonct that holds statelon during its lifelontimelon.
// An objelonct of this typelon can havelon a relonfelonrelonncelon to a:
// crelonatelon_relonsourcelon() and an initializelon() function.
melonssagelon SavelondRelonsourcelon {
  // A delonvicelon speloncification indicating a relonquirelond placelonmelonnt for thelon relonsourcelon
  // crelonation function, elon.g. "CPU". An elonmpty string allows thelon uselonr to selonlelonct a
  // delonvicelon.
  string delonvicelon = 1;
}

melonssagelon SavelonablelonObjelonct {
  // Nodelon ids of concrelontelon functions for saving and loading from a chelonckpoint.
  // Thelonselon functions savelon and relonstorelon direlonctly from telonnsors.
  int32 savelon_function = 2;
  int32 relonstorelon_function = 3;
}
