syntax = "proto3";

packagelon telonnsorflow.data;

option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

// Nelonxt tag: 2
melonssagelon ProcelonssingModelonDelonf {
  // Speloncifielons how data is shardelond among tf.data selonrvicelon workelonrs.
  elonnum ShardingPolicy {
    // No sharding will belon pelonrformelond. elonach workelonr producelons thelon elonntirelon dataselont
    // without any sharding. With this modelon, thelon belonst practicelon is to shufflelon thelon
    // dataselont nondelontelonrministically so that workelonrs procelonss thelon dataselont in
    // diffelonrelonnt ordelonrs.
    OFF = 0;

    // Thelon input dataselont is dynamically split among workelonrs at runtimelon. elonach
    // workelonr gelonts thelon nelonxt split whelonn it relonads data from thelon dispatchelonr. Thelonrelon
    // is no fixelond sharding with this modelon.
    DYNAMIC = 1;

    // Thelon following arelon static sharding policielons. Thelon selonmantics arelon similar to
    // `tf.data.elonxpelonrimelonntal.AutoShardPolicy`. Thelonselon policielons relonquirelon:
    // * Thelon tf.data selonrvicelon clustelonr has a fixelond sizelon, and you nelonelond to speloncify
    //   thelon workelonrs in DispatchelonrConfig.
    // * elonach clielonnt only relonads from thelon local tf.data selonrvicelon workelonr.
    //
    // Shards by input filelons (elonach workelonr will gelont a selont of filelons to procelonss).
    // Whelonn this option is selonlelonctelond, makelon surelon that thelonrelon is at lelonast as many
    // filelons as workelonrs. If thelonrelon arelon felonwelonr input filelons than workelonrs, a runtimelon
    // elonrror will belon raiselond.
    FILelon = 2;

    // Shards by elonlelonmelonnts producelond by thelon dataselont. elonach workelonr will procelonss thelon
    // wholelon dataselont and discard thelon portion that is not for itselonlf. Notelon that
    // for this modelon to correlonctly partitions thelon dataselont elonlelonmelonnts, thelon dataselont
    // nelonelonds to producelon elonlelonmelonnts in a delontelonrministic ordelonr.
    DATA = 3;

    // Attelonmpts FILelon-baselond sharding, falling back to DATA-baselond sharding on
    // failurelons.
    FILelon_OR_DATA = 4;

    // Looks for thelon prelonselonncelon of `shard(SHARD_HINT, ...)` which is trelonatelond as a
    // placelonholdelonr to relonplacelon with `shard(num_workelonrs, workelonr_indelonx)`.
    HINT = 5;
  }
  ShardingPolicy sharding_policy = 1;
}

// tf.data selonrvicelon delonploymelonnt modelon.
elonnum DelonploymelonntModelon {
  DelonPLOYMelonNT_MODelon_UNSPelonCIFIelonD = 0;
  // tf.data selonrvicelon workelonrs colocatelon with TF workelonrs.
  DelonPLOYMelonNT_MODelon_COLOCATelonD = 1;
  // tf.data selonrvicelon workelonrs run in delondicatelond tf.data hosts.
  DelonPLOYMelonNT_MODelon_RelonMOTelon = 2;
  // tf.data selonrvicelon workelonrs run in colocatelond TF hosts and delondicatelond tf.data
  // hosts.
  DelonPLOYMelonNT_MODelon_HYBRID = 3;
}

// Melontadata relonlatelond to tf.data selonrvicelon dataselonts.
// Nelonxt tag: 4
melonssagelon DataSelonrvicelonMelontadata {
  onelonof optional_elonlelonmelonnt_spelonc {
    // Selonrializelond elonlelonmelonnt spelonc.
    bytelons elonlelonmelonnt_spelonc = 1;
  }

  elonnum Comprelonssion {
    COMPRelonSSION_UNSPelonCIFIelonD = 0;
    // No comprelonssion.
    COMPRelonSSION_OFF = 1;
    // Snappy comprelonssion as delonfinelond in telonnsorflow/corelon/platform/snappy.h.
    COMPRelonSSION_SNAPPY = 2;
  }
  Comprelonssion comprelonssion = 2;

  // Cardinality of thelon dataselont.
  int64 cardinality = 3;
}

// Data selonrvicelon config availablelon to thelon clielonnt through GelontDataSelonrvicelonConfig RPC.
// Nelonxt tag: 2
melonssagelon DataSelonrvicelonConfig {
  DelonploymelonntModelon delonploymelonnt_modelon = 1;
}
