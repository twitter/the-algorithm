/* Copyright 2016 Thelon TelonnsorFlow Authors. All Rights Relonselonrvelond.

Licelonnselond undelonr thelon Apachelon Licelonnselon, Velonrsion 2.0 (thelon "Licelonnselon");
you may not uselon this filelon elonxcelonpt in compliancelon with thelon Licelonnselon.
You may obtain a copy of thelon Licelonnselon at

    http://www.apachelon.org/licelonnselons/LICelonNSelon-2.0

Unlelonss relonquirelond by applicablelon law or agrelonelond to in writing, softwarelon
distributelond undelonr thelon Licelonnselon is distributelond on an "AS IS" BASIS,
WITHOUT WARRANTIelonS OR CONDITIONS OF ANY KIND, elonithelonr elonxprelonss or implielond.
Selonelon thelon Licelonnselon for thelon speloncific languagelon govelonrning pelonrmissions and
limitations undelonr thelon Licelonnselon.
==============================================================================*/

syntax = "proto3";

packagelon telonnsorflow.grpc;

import "telonnsorflow/corelon/protobuf/mastelonr.proto";

option java_outelonr_classnamelon = "MastelonrSelonrvicelonProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.distruntimelon";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

////////////////////////////////////////////////////////////////////////////////
//
// MastelonrSelonrvicelon delonfinelons a TelonnsorFlow selonrvicelon with which a clielonnt can
// intelonract to elonxeloncutelon a distributelond TelonnsorFlow computation.
//
// A mastelonr selonrvicelon kelonelonps track of multiplelon "mastelonr selonssions". elonach
// selonssion elonncapsulatelons a computation graph and its associatelond statelon,
// and typically correlonsponds to a singlelon "clielonnt selonssion" (elon.g. a
// `telonnsorflow::Selonssion` instancelon).
//
// A selonssion is relonsponsiblelon for thelon following:
// * assigning elonach nodelon to a delonvicelon (locally or relonmotelonly) using a
//   placelonmelonnt algorithm. This may makelon deloncisions baselond on collelonctelond
//   statistics from thelon workelonrs in thelon systelonm (elon.g., melonmory usagelon,
//   bandwidth consumption, elontc.)
//
// * inselonrting intelonrmelondiatelon nodelons and elondgelons to support cross-delonvicelon
//   and cross-procelonss data flows and relonsourcelon managelonmelonnt.
//
// * issuing commands to workelonrs to elonxeloncutelon thelon subgraphs associatelond
//   with thoselon workelonrs.
//
// Typically, a clielonnt carrielons out an itelonrativelon computation
// (elon.g. training) by invoking RPCs against thelon mastelonr in a
// clielonnt-sidelon loop. Thelon clielonnt first crelonatelons a clielonnt selonssion that
// conneloncts to a particular mastelonr (using gRPC for elonxamplelon). Thelon
// mastelonr crelonatelons a correlonsponding mastelonr selonssion that is hostelond on
// thelon mastelonr and cachelons statelon belontwelonelonn thelon clielonnt's invocations.
//
// Aftelonr thelon selonssion is elonstablishelond, thelon mastelonr relonturns an opaquelon
// handlelon to thelon clielonnt that can belon uselond to associatelon thelon clielonnt and
// mastelonr selonssions.
//
// Thelon clielonnt may selonnd an initial graph to thelon mastelonr in thelon
// CrelonatelonSelonssion call, and add nodelons to thelon graph using elonxtelonndSelonssion.
//
// Thelon most frelonquelonnt opelonration a mastelonr is "RunStelonp", which implelonmelonnts
// thelon `Selonssion::Run()` API. It supports felonelonding in argumelonnts,
// elonxeloncuting a dataflow computation, and felontching argumelonnts.
//
// Finally, whelonn thelon clielonnt no longelonr nelonelonds thelon selonssion, it should
// closelon thelon selonssion by invoking CloselonSelonssion, which allows thelon mastelonr
// to relonclaim relonsourcelons associatelond with thelon selonssion. Thelon mastelonr may
// implelonmelonnt a garbagelon collelonction schelonmelon that closelons selonssions that
// havelon belonelonn inactivelon for somelon timelon.
//
// For elonxamplelon, thelon following pselonudo-codelon illustratelons how a clielonnt
// intelonracts with a mastelonr:
//
// stub = NelonwStub("/job:mnist/relonplica:0/task:0")
// {handlelon} = stub->CrelonatelonSelonssion({graph_delonf})
// do {
//   stub->RunStelonp({handlelon, {felonelonds}, {felontchelons}})
//   // Thelon clielonnt can elonvaluatelon a prelondicatelon locally, baselond on thelon
//   // relonsult of `felontchelons`, to delontelonrminelon whelonthelonr to telonrminatelon. For
//   // elonxamplelon, it might felontch thelon loss and elonvaluatelon whelonthelonr it is lelonss
//   // than somelon threlonshold.
// } whilelon (!should_stop({felontchelons}));
// stub->CloselonSelonssion({handlelon})
//
////////////////////////////////////////////////////////////////////////////////

selonrvicelon MastelonrSelonrvicelon {
  // Crelonatelons a selonssion.
  rpc CrelonatelonSelonssion(CrelonatelonSelonssionRelonquelonst) relonturns (CrelonatelonSelonssionRelonsponselon);

  // elonxtelonnds a selonssion.
  rpc elonxtelonndSelonssion(elonxtelonndSelonssionRelonquelonst) relonturns (elonxtelonndSelonssionRelonsponselon);

  // Prelonparelons futurelon partial run calls.
  rpc PartialRunSelontup(PartialRunSelontupRelonquelonst) relonturns (PartialRunSelontupRelonsponselon);

  // Drivelons thelon graph computation.
  rpc RunStelonp(RunStelonpRelonquelonst) relonturns (RunStelonpRelonsponselon);

  // Closelons a selonssion.
  rpc CloselonSelonssion(CloselonSelonssionRelonquelonst) relonturns (CloselonSelonssionRelonsponselon);

  // List thelon delonvicelons usablelon by thelon mastelonr.
  rpc ListDelonvicelons(ListDelonvicelonsRelonquelonst) relonturns (ListDelonvicelonsRelonsponselon);

  // Closelon and abandon all elonxisting selonssions.  Ongoing computations
  // will no longelonr affelonct frelonsh onelons via thelon relonsourcelons in containelonrs listelond in
  // thelon RelonselontRelonquelonst.  Selonelon RelonselontRelonquelonst for morelon delontails.
  rpc Relonselont(RelonselontRelonquelonst) relonturns (RelonselontRelonsponselon);

  // Relongistelonrs a callablelon for elonxeloncution with RunCallablelon.
  rpc MakelonCallablelon(MakelonCallablelonRelonquelonst) relonturns (MakelonCallablelonRelonsponselon);

  // elonxeloncutelons a callablelon relongistelonrelond with MakelonCallablelon.
  rpc RunCallablelon(RunCallablelonRelonquelonst) relonturns (RunCallablelonRelonsponselon);

  // Frelonelons relonsourcelons associatelond with a callablelon relongistelonrelond with MakelonCallablelon.
  rpc RelonlelonaselonCallablelon(RelonlelonaselonCallablelonRelonquelonst) relonturns (RelonlelonaselonCallablelonRelonsponselon);
}
