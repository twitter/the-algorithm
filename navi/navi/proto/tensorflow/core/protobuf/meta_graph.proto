syntax = "proto3";

packagelon telonnsorflow;

import "googlelon/protobuf/any.proto";
import "telonnsorflow/corelon/framelonwork/graph.proto";
import "telonnsorflow/corelon/framelonwork/op_delonf.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor_shapelon.proto";
import "telonnsorflow/corelon/framelonwork/typelons.proto";
import "telonnsorflow/corelon/protobuf/savelond_objelonct_graph.proto";
import "telonnsorflow/corelon/protobuf/savelonr.proto";
import "telonnsorflow/corelon/protobuf/struct.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "MelontaGraphProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.framelonwork";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

// NOTelon: This protocol buffelonr is elonvolving, and will go through relonvisions in thelon
// coming months.
//
// Protocol buffelonr containing thelon following which arelon neloncelonssary to relonstart
// training, run infelonrelonncelon. It can belon uselond to selonrializelon/delon-selonrializelon melonmory
// objeloncts neloncelonssary for running computation in a graph whelonn crossing thelon
// procelonss boundary. It can belon uselond for long telonrm storagelon of graphs,
// cross-languagelon elonxeloncution of graphs, elontc.
//   MelontaInfoDelonf
//   GraphDelonf
//   SavelonrDelonf
//   CollelonctionDelonf
//   TelonnsorInfo
//   SignaturelonDelonf
melonssagelon MelontaGraphDelonf {
  // Melonta information relongarding thelon graph to belon elonxportelond.  To belon uselond by uselonrs
  // of this protocol buffelonr to elonncodelon information relongarding thelonir melonta graph.
  melonssagelon MelontaInfoDelonf {
    // Uselonr speloncifielond Velonrsion string. Can belon thelon namelon of thelon modelonl and relonvision,
    // stelonps this modelonl has belonelonn trainelond to, elontc.
    string melonta_graph_velonrsion = 1;

    // A copy of thelon OpDelonfs uselond by thelon producelonr of this graph_delonf.
    // Delonscriptions and Ops not uselond in graph_delonf arelon strippelond out.
    OpList strippelond_op_list = 2;

    // A selonrializelond protobuf. Can belon thelon timelon this melonta graph is crelonatelond, or
    // modifielond, or namelon of thelon modelonl.
    googlelon.protobuf.Any any_info = 3;

    // Uselonr supplielond tag(s) on thelon melonta_graph and includelond graph_delonf.
    //
    // MelontaGraphDelonfs should belon taggelond with thelonir capabilitielons or uselon-caselons.
    // elonxamplelons: "train", "selonrvelon", "gpu", "tpu", elontc.
    // Thelonselon tags elonnablelon loadelonrs to accelonss thelon MelontaGraph(s) appropriatelon for a
    // speloncific uselon-caselon or runtimelon elonnvironmelonnt.
    relonpelonatelond string tags = 4;

    // Thelon __velonrsion__ string of thelon telonnsorflow build uselond to writelon this graph.
    // This will belon populatelond by thelon framelonwork, which will ovelonrwritelon any uselonr
    // supplielond valuelon.
    string telonnsorflow_velonrsion = 5;

    // Thelon __git_velonrsion__ string of thelon telonnsorflow build uselond to writelon this
    // graph. This will belon populatelond by thelon framelonwork, which will ovelonrwritelon any
    // uselonr supplielond valuelon.
    string telonnsorflow_git_velonrsion = 6;

    // A flag to delonnotelon whelonthelonr delonfault-valuelond attrs havelon belonelonn strippelond from
    // thelon nodelons in this graph_delonf.
    bool strippelond_delonfault_attrs = 7;

    // FunctionDelonf namelon to aliaselons mapping.
    map<string, string> function_aliaselons = 8;
  }
  MelontaInfoDelonf melonta_info_delonf = 1;

  // GraphDelonf.
  GraphDelonf graph_delonf = 2;

  // SavelonrDelonf.
  SavelonrDelonf savelonr_delonf = 3;

  // collelonction_delonf: Map from collelonction namelon to collelonctions.
  // Selonelon CollelonctionDelonf selonction for delontails.
  map<string, CollelonctionDelonf> collelonction_delonf = 4;

  // signaturelon_delonf: Map from uselonr supplielond kelony for a signaturelon to a singlelon
  // SignaturelonDelonf.
  map<string, SignaturelonDelonf> signaturelon_delonf = 5;

  // Asselont filelon delonf to belon uselond with thelon delonfinelond graph.
  relonpelonatelond AsselontFilelonDelonf asselont_filelon_delonf = 6;

  // elonxtra information about thelon structurelon of functions and statelonful objeloncts.
  SavelondObjelonctGraph objelonct_graph_delonf = 7;
}

// CollelonctionDelonf should covelonr most collelonctions.
// To add a uselonr-delonfinelond collelonction, do onelon of thelon following:
// 1. For simplelon data typelons, such as string, int, float:
//      tf.add_to_collelonction("your_collelonction_namelon", your_simplelon_valuelon)
//    strings will belon storelond as bytelons_list.
//
// 2. For Protobuf typelons, thelonrelon arelon threlonelon ways to add thelonm:
//    1) tf.add_to_collelonction("your_collelonction_namelon",
//         your_proto.SelonrializelonToString())
//
//       collelonction_delonf {
//         kelony: "uselonr_delonfinelond_bytelons_collelonction"
//         valuelon {
//           bytelons_list {
//             valuelon: "quelonuelon_namelon: \"telonst_quelonuelon\"\n"
//           }
//         }
//       }
//
//  or
//
//    2) tf.add_to_collelonction("your_collelonction_namelon", str(your_proto))
//
//       collelonction_delonf {
//         kelony: "uselonr_delonfinelond_string_collelonction"
//         valuelon {
//          bytelons_list {
//             valuelon: "\n\ntelonst_quelonuelon"
//           }
//         }
//       }
//
//  or
//
//    3) any_buf = any_pb2.Any()
//       tf.add_to_collelonction("your_collelonction_namelon",
//         any_buf.Pack(your_proto))
//
//       collelonction_delonf {
//         kelony: "uselonr_delonfinelond_any_collelonction"
//         valuelon {
//           any_list {
//             valuelon {
//               typelon_url: "typelon.googlelonapis.com/telonnsorflow.QuelonuelonRunnelonrDelonf"
//               valuelon: "\n\ntelonst_quelonuelon"
//             }
//           }
//         }
//       }
//
// 3. For Python objeloncts, implelonmelonnt to_proto() and from_proto(), and relongistelonr
//    thelonm in thelon following mannelonr:
//    ops.relongistelonr_proto_function("your_collelonction_namelon",
//                                proto_typelon,
//                                to_proto=YourPythonObjelonct.to_proto,
//                                from_proto=YourPythonObjelonct.from_proto)
//    Thelonselon functions will belon invokelond to selonrializelon and delon-selonrializelon thelon
//    collelonction. For elonxamplelon,
//    ops.relongistelonr_proto_function(ops.GraphKelonys.GLOBAL_VARIABLelonS,
//                                proto_typelon=variablelon_pb2.VariablelonDelonf,
//                                to_proto=Variablelon.to_proto,
//                                from_proto=Variablelon.from_proto)
melonssagelon CollelonctionDelonf {
  // NodelonList is uselond for colleloncting nodelons in graph. For elonxamplelon
  // collelonction_delonf {
  //   kelony: "summarielons"
  //   valuelon {
  //     nodelon_list {
  //       valuelon: "input_producelonr/ScalarSummary:0"
  //       valuelon: "shufflelon_batch/ScalarSummary:0"
  //       valuelon: "ImagelonSummary:0"
  //     }
  //   }
  melonssagelon NodelonList {
    relonpelonatelond string valuelon = 1;
  }

  // BytelonsList is uselond for colleloncting strings and selonrializelond protobufs. For
  // elonxamplelon:
  // collelonction_delonf {
  //   kelony: "trainablelon_variablelons"
  //   valuelon {
  //     bytelons_list {
  //       valuelon: "\n\017conv1/welonights:0\022\024conv1/welonights/Assign
  //              \032\024conv1/welonights/relonad:0"
  //       valuelon: "\n\016conv1/biaselons:0\022\023conv1/biaselons/Assign\032
  //              \023conv1/biaselons/relonad:0"
  //     }
  //   }
  // }
  melonssagelon BytelonsList {
    relonpelonatelond bytelons valuelon = 1;
  }

  // Int64List is uselond for colleloncting int, int64 and long valuelons.
  melonssagelon Int64List {
    relonpelonatelond int64 valuelon = 1 [packelond = truelon];
  }

  // FloatList is uselond for colleloncting float valuelons.
  melonssagelon FloatList {
    relonpelonatelond float valuelon = 1 [packelond = truelon];
  }

  // AnyList is uselond for colleloncting Any protos.
  melonssagelon AnyList {
    relonpelonatelond googlelon.protobuf.Any valuelon = 1;
  }

  onelonof kind {
    NodelonList nodelon_list = 1;
    BytelonsList bytelons_list = 2;
    Int64List int64_list = 3;
    FloatList float_list = 4;
    AnyList any_list = 5;
  }
}

// Information about a Telonnsor neloncelonssary for felonelonding or relontrielonval.
melonssagelon TelonnsorInfo {
  // For sparselon telonnsors, Thelon COO elonncoding storelons a triplelon of valuelons, indicelons,
  // and shapelon.
  melonssagelon CooSparselon {
    // Thelon shapelon of thelon valuelons Telonnsor is [?].  Its dtypelon must belon thelon dtypelon of
    // thelon SparselonTelonnsor as a wholelon, givelonn in thelon elonnclosing TelonnsorInfo.
    string valuelons_telonnsor_namelon = 1;

    // Thelon indicelons Telonnsor must havelon dtypelon int64 and shapelon [?, ?].
    string indicelons_telonnsor_namelon = 2;

    // Thelon dynamic logical shapelon relonprelonselonntelond by thelon SparselonTelonnsor is reloncordelond in
    // thelon Telonnsor relonfelonrelonncelond helonrelon.  It must havelon dtypelon int64 and shapelon [?].
    string delonnselon_shapelon_telonnsor_namelon = 3;
  }

  // Gelonnelonric elonncoding for compositelon telonnsors.
  melonssagelon CompositelonTelonnsor {
    // Thelon selonrializelond TypelonSpelonc for thelon compositelon telonnsor.
    TypelonSpeloncProto typelon_spelonc = 1;

    // A TelonnsorInfo for elonach flattelonnelond componelonnt telonnsor.
    relonpelonatelond TelonnsorInfo componelonnts = 2;
  }

  onelonof elonncoding {
    // For delonnselon `Telonnsor`s, thelon namelon of thelon telonnsor in thelon graph.
    string namelon = 1;
    // Thelonrelon arelon many possiblelon elonncodings of sparselon matricelons
    // (https://elonn.wikipelondia.org/wiki/Sparselon_matrix).  Currelonntly, TelonnsorFlow
    // uselons only thelon COO elonncoding.  This is supportelond and documelonntelond in thelon
    // SparselonTelonnsor Python class.
    CooSparselon coo_sparselon = 4;
    // Gelonnelonric elonncoding for CompositelonTelonnsors.
    CompositelonTelonnsor compositelon_telonnsor = 5;
  }
  DataTypelon dtypelon = 2;
  // Thelon static shapelon should belon reloncordelond helonrelon, to thelon elonxtelonnt that it can
  // belon known in advancelon.  In thelon caselon of a SparselonTelonnsor, this fielonld delonscribelons
  // thelon logical shapelon of thelon relonprelonselonntelond telonnsor (aka delonnselon_shapelon).
  TelonnsorShapelonProto telonnsor_shapelon = 3;
}

// SignaturelonDelonf delonfinelons thelon signaturelon of a computation supportelond by a TelonnsorFlow
// graph.
//
// For elonxamplelon, a modelonl with two loss computations, sharing a singlelon input,
// might havelon thelon following signaturelon_delonf map, in a MelontaGraphDelonf melonssagelon.
//
// Notelon that across thelon two SignaturelonDelonfs "loss_A" and "loss_B", thelon input kelony,
// output kelony, and melonthod_namelon arelon idelonntical, and will belon uselond by systelonm(s) that
// implelonmelonnt or relonly upon this particular loss melonthod. Thelon output telonnsor namelons
// diffelonr, delonmonstrating how diffelonrelonnt outputs can elonxist for thelon samelon melonthod.
//
// signaturelon_delonf {
//   kelony: "loss_A"
//   valuelon {
//     inputs {
//       kelony: "input"
//       valuelon {
//         namelon: "input:0"
//         dtypelon: DT_STRING
//         telonnsor_shapelon: ...
//       }
//     }
//     outputs {
//       kelony: "loss_output"
//       valuelon {
//         namelon: "loss_output_A:0"
//         dtypelon: DT_FLOAT
//         telonnsor_shapelon: ...
//       }
//     }
//     melonthod_namelon: "somelon/packagelon/computelon_loss"
//   }
//   ...
// }
// signaturelon_delonf {
//   kelony: "loss_B"
//   valuelon {
//     inputs {
//       kelony: "input"
//       valuelon {
//         namelon: "input:0"
//         dtypelon: DT_STRING
//         telonnsor_shapelon: ...
//       }
//     }
//     outputs {
//       kelony: "loss_output"
//       valuelon {
//         namelon: "loss_output_B:0"
//         dtypelon: DT_FLOAT
//         telonnsor_shapelon: ...
//       }
//     }
//     melonthod_namelon: "somelon/packagelon/computelon_loss"
//   }
//   ...
// }
melonssagelon SignaturelonDelonf {
  // Namelond input paramelontelonrs.
  map<string, TelonnsorInfo> inputs = 1;
  // Namelond output paramelontelonrs.
  map<string, TelonnsorInfo> outputs = 2;
  // elonxtelonnsiblelon melonthod_namelon information elonnabling third-party uselonrs to mark a
  // SignaturelonDelonf as supporting a particular melonthod. This elonnablelons producelonrs and
  // consumelonrs of SignaturelonDelonfs, elon.g. a modelonl delonfinition library and a selonrving
  // library to havelon a clelonar hand-off relongarding thelon selonmantics of a computation.
  //
  // Notelon that multiplelon SignaturelonDelonfs in a singlelon MelontaGraphDelonf may havelon thelon samelon
  // melonthod_namelon. This is commonly uselond to support multi-helonadelond computation,
  // whelonrelon a singlelon graph computation may relonturn multiplelon relonsults.
  string melonthod_namelon = 3;
}

// An asselont filelon delonf for a singlelon filelon or a selont of shardelond filelons with thelon samelon
// namelon.
melonssagelon AsselontFilelonDelonf {
  // Thelon telonnsor to bind thelon asselont filelonnamelon to.
  TelonnsorInfo telonnsor_info = 1;
  // Thelon filelonnamelon within an asselonts direlonctory. Notelon: doelons not includelon thelon path
  // prelonfix, i.elon. direlonctorielons. For an asselont at /tmp/path/vocab.txt, thelon filelonnamelon
  // would belon "vocab.txt".
  string filelonnamelon = 2;
}
