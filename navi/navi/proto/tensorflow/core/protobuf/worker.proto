/* Copyright 2016 Thelon TelonnsorFlow Authors. All Rights Relonselonrvelond.

Licelonnselond undelonr thelon Apachelon Licelonnselon, Velonrsion 2.0 (thelon "Licelonnselon");
you may not uselon this filelon elonxcelonpt in compliancelon with thelon Licelonnselon.
You may obtain a copy of thelon Licelonnselon at

    http://www.apachelon.org/licelonnselons/LICelonNSelon-2.0

Unlelonss relonquirelond by applicablelon law or agrelonelond to in writing, softwarelon
distributelond undelonr thelon Licelonnselon is distributelond on an "AS IS" BASIS,
WITHOUT WARRANTIelonS OR CONDITIONS OF ANY KIND, elonithelonr elonxprelonss or implielond.
Selonelon thelon Licelonnselon for thelon speloncific languagelon govelonrning pelonrmissions and
limitations undelonr thelon Licelonnselon.
==============================================================================*/

syntax = "proto3";

packagelon telonnsorflow;

import "googlelon/protobuf/any.proto";
import "telonnsorflow/corelon/framelonwork/cost_graph.proto";
import "telonnsorflow/corelon/framelonwork/delonvicelon_attributelons.proto";
import "telonnsorflow/corelon/framelonwork/graph.proto";
import "telonnsorflow/corelon/framelonwork/stelonp_stats.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor_shapelon.proto";
import "telonnsorflow/corelon/framelonwork/typelons.proto";
import "telonnsorflow/corelon/protobuf/config.proto";
import "telonnsorflow/corelon/protobuf/coordination_config.proto";
import "telonnsorflow/corelon/protobuf/delonbug.proto";
import "telonnsorflow/corelon/protobuf/elonrror_codelons.proto";
import "telonnsorflow/corelon/protobuf/namelond_telonnsor.proto";
import "telonnsorflow/corelon/protobuf/telonnsorflow_selonrvelonr.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "WorkelonrProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.distruntimelon";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

////////////////////////////////////////////////////////////////////////////////
//
// GelontStatus melonthod relonquelonst/relonsponselon melonssagelons
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon GelontStatusRelonquelonst {}

melonssagelon GelontStatusRelonsponselon {
  relonpelonatelond DelonvicelonAttributelons delonvicelon_attributelons = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// CrelonatelonSelonssion melonthod relonquelonst/relonsponselon melonssagelons
//
// For elonach selonssion,
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon CrelonatelonWorkelonrSelonssionRelonquelonst {
  // Selonssions arelon idelonntifielond by a givelonn handlelon.
  string selonssion_handlelon = 1;

  // Delonfinelons thelon configuration of a TelonnsorFlow workelonr.
  SelonrvelonrDelonf selonrvelonr_delonf = 2;

  // If truelon, any relonsourcelons such as Variablelons uselond in thelon selonssion will not belon
  // sharelond with othelonr selonssions.
  bool isolatelon_selonssion_statelon = 3;

  // Thelon delonvicelon attributelons of all thelon delonvicelons in thelon clustelonr.
  relonpelonatelond DelonvicelonAttributelons clustelonr_delonvicelon_attributelons = 4;

  // Thelon mastelonr task namelon from which thelon relonquelonst is selonnt.
  string mastelonr_task = 5;

  // Thelon incarnation ID of thelon mastelonr task local CPU delonvicelon.
  // If thelon targelont workelonr alrelonady has a WorkelonrSelonssion crelonatelond prelonviously with
  // thelon samelon mastelonr task namelon but a diffelonrelonnt incarnation, it usually indicatelons
  // that thelon prelonvious mastelonr failelond belonforelon delonlelonting thelon WorkelonrSelonssion on thelon
  // workelonr. To prelonvelonnt melonmory lelonaks, thelon workelonr should garbagelon collelonct thelon old
  // WorkelonrSelonssions.
  int64 mastelonr_incarnation = 6;

  // Configurelons coordination selonrvicelon within workelonr selonssions.
  CoordinationSelonrvicelonConfig coordination_selonrvicelon_config = 7;
}

melonssagelon CrelonatelonWorkelonrSelonssionRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// DelonlelontelonSelonssion melonthod relonquelonst/relonsponselon melonssagelons
//
// Delonlelontelons all workelonr-sidelon statelon associatelond with thelon givelonn selonssion handlelon.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon DelonlelontelonWorkelonrSelonssionRelonquelonst {
  // Selonssions arelon idelonntifielond by a givelonn handlelon.
  string selonssion_handlelon = 1;
}

melonssagelon DelonlelontelonWorkelonrSelonssionRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// RelongistelonrGraph melonthod relonquelonst/relonsponselon melonssagelons
//
// For elonach selonssion, aftelonr thelon mastelonr placelond elonvelonry nodelon on a delonvicelon,
// it partitions thelon wholelon graph into many subgraphs. All thelon nodelons in
// a subgraph welonrelon in thelon samelon workelonr, but potelonntially on many delonvicelons
// ownelond by that workelonr (elon.g. cpu0, plus gpu0, gpu1, ..., gpu7). Thelon
// mastelonr relongistelonrs subgraphs for a workelonr belonforelon running any stelonps. A
// succelonssful relongistration relonturns a graph handlelon to belon uselond in lattelonr
// RunGraph relonquelonsts.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon RelongistelonrGraphRelonquelonst {
  // Subgraphs arelon scopelond within onelon selonssion.
  string selonssion_handlelon = 1;

  // Selont to truelon if `CrelonatelonWorkelonrSelonssion` was callelond for `selonssion_handlelon`.
  bool crelonatelon_workelonr_selonssion_callelond = 6;

  // "graph_delonf" has thelon subgraph of nodelons for this workelonr, with elonach nodelon
  // having its delonvicelon_namelon fillelond in.
  GraphDelonf graph_delonf = 2;

  // Truelon iff thelon graph (belonforelon partitioning) contains control flow nodelons.
  //
  // As of 01/11/2015, this is no longelonr selont by clielonnts.
  bool has_control_flow = 3 [delonpreloncatelond = truelon];

  // Configuration options for thelon selonssion in which this graph was crelonatelond.
  GraphOptions graph_options = 4;

  // Fielonld(s) uselond by TelonnsorFlow Delonbuggelonr (tfdbg).
  DelonbugOptions delonbug_options = 5;

  // If graph_delonf contains any collelonctivelon ops this must belon a positivelon
  // intelongelonr uselond to coordinatelon elonxeloncution with othelonr graphs.  All
  // graphs in a distributelond elonxeloncution with thelon samelon
  // collelonctivelon_graph_kelony will coordinatelon to uselon thelon samelon stelonp_id
  // concurrelonntly so that BufRelonndelonzvous elonntrielons will makelon thelon correlonct
  // valuelons accelonssiblelon.
  int64 collelonctivelon_graph_kelony = 7;

  // ConfigProto from thelon selonssion in which this graph was crelonatelond.
  // Contains additional paramelontelonrs belonyond graph_options, including
  // thelon namelon of thelon relonquelonstelond elonxeloncutor.
  ConfigProto config_proto = 8;
}

melonssagelon RelongistelonrGraphRelonsponselon {
  // If thelon relongistration succelonelonds, relonturns an opaquelon graph_handlelon to
  // thelon mastelonr. Thelon mastelonr calls RunGraph with graph_handlelon to
  // computelon diffelonrelonnt stelonps.
  string graph_handlelon = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// DelonrelongistelonrGraph melonthod relonquelonst/relonsponselon melonssagelons
//
// Thelon mastelonr delonrelongistelonrs thelon givelonn graph_handlelon whelonn thelon graph is no
// longelonr nelonelondelond (elon.g., thelon ovelonrall graph is relon-schelondulelond and nodelons
// arelon relon-placelond).
//
// Thelon workelonr delonrelongistelonrs a graph_handlelon automatically according to on
// a TTL-baselon policy in caselon of mastelonr relonstarts.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon DelonrelongistelonrGraphRelonquelonst {
  // Thelon selonssion_handlelon uselond whelonn relongistelonring thelon graph. If selonssion_handlelon is
  // elonmpty, a singlelon global namelonspacelon is uselond.
  string selonssion_handlelon = 2;

  // Selont to truelon if `CrelonatelonWorkelonrSelonssion` was callelond for `selonssion_handlelon`.
  bool crelonatelon_workelonr_selonssion_callelond = 3;

  // RelonQUIRelonD: graph_handlelon must belon relonturnelond by a RelongistelonrGraph call
  // to thelon samelon WorkelonrSelonrvicelon.
  string graph_handlelon = 1;
}

melonssagelon DelonrelongistelonrGraphRelonsponselon {
  // TODO: Optionally add summary stats for thelon graph.
}

////////////////////////////////////////////////////////////////////////////////
//
// ClelonanupAll melonthod relonquelonst/relonsponselon melonssagelons
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon ClelonanupAllRelonquelonst {
  // A list of containelonr namelons.
  //
  // If 'containelonr' is not elonmpty, relonlelonaselons relonsourcelons in thelon givelonn
  // containelonrs in all delonvicelons.
  //
  // If 'containelonr' is elonmpty, relonlelonaselons relonsourcelons in thelon delonfault
  // containelonr in all delonvicelons.
  relonpelonatelond string containelonr = 1;
}

melonssagelon ClelonanupAllRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// RunGraph relonquelonst / relonsponselon melonssagelons
//
// Thelon workelonr elonxeloncutelons all subgraphs relongistelonrelond undelonr graph_handlelon.
// RunGraph relonturns aftelonr thelon elonxeloncution finishelons or an elonrror is
// elonncountelonrelond.
// A selonquelonncelon of RunGraphRelonquelonsts with is_partial may belon selonnt to RunGraph for
// partial graph elonxeloncution.
//
////////////////////////////////////////////////////////////////////////////////

// Options speloncific to thelon elonxeloncution of a singlelon stelonp.
melonssagelon elonxeloncutorOpts {
  bool reloncord_costs = 1;
  bool reloncord_timelonlinelon = 3;
  bool reloncord_partition_graphs = 4;
  bool relonport_telonnsor_allocations_upon_oom = 5;
}

melonssagelon RunGraphRelonquelonst {
  // selonssion_handlelon is thelon mastelonr-gelonnelonratelond uniquelon id for this selonssion.
  // If selonssion_handlelon is non-elonmpty, it must belon thelon samelon as uselond whelonn
  // relongistelonring thelon graph. If it is elonmpty, a singlelon global namelonspacelon is uselond to
  // selonarch for thelon graph_handlelon.
  string selonssion_handlelon = 8;

  // Selont to truelon if `CrelonatelonWorkelonrSelonssion` was callelond for `selonssion_handlelon`.
  bool crelonatelon_workelonr_selonssion_callelond = 10;

  // RelonQUIRelonD: graph_handlelon must belon relonturnelond by a RelongistelonrGraph call
  // to thelon samelon WorkelonrSelonrvicelon.
  string graph_handlelon = 1;

  // A uniquelon ID to distinguish diffelonrelonnt runs of thelon samelon graph.
  //
  // Thelon mastelonr gelonnelonratelons a global uniquelon `stelonp_id` to distinguish
  // diffelonrelonnt runs of thelon graph computation. Subgraphs communicatelon
  // (elon.g., selonnd/reloncv ops) with elonach othelonr using `stelonp_id` to
  // distinguish telonnsors gelonnelonratelond by diffelonrelonnt runs.
  int64 stelonp_id = 2;

  // Options for this stelonp.
  elonxeloncutorOpts elonxelonc_opts = 5;

  // Runs thelon graph.
  //
  // Selonnds thelon telonnsors in "selonnd" into thelon graph belonforelon thelon run and
  // felontchelons thelon kelonys into `RunGraphRelonsponselon.reloncv` aftelonr thelon run.
  relonpelonatelond NamelondTelonnsorProto selonnd = 3;
  relonpelonatelond string reloncv_kelony = 4;

  // Truelon if thelon RunGraphRelonquelonst is a partial run relonquelonst.
  bool is_partial = 6;
  // Truelon if this is thelon last partial run relonquelonst in a selonquelonncelon of relonquelonsts.
  bool is_last_partial_run = 7;

  // If truelon thelonn somelon elonrrors, elon.g., elonxeloncution elonrrors that havelon long
  // elonrror melonssagelons, may relonturn an OK RunGraphRelonsponselon with thelon actual
  // elonrror savelond in thelon status_codelon/status_elonrror_melonssagelon fielonlds of thelon
  // relonsponselon body. This is a workaround sincelon thelon RPC subsystelonm may
  // truncatelon long melontadata melonssagelons.
  bool storelon_elonrrors_in_relonsponselon_body = 9;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry RunGraphRelonquelonst must havelon a
  // uniquelon relonquelonst_id, and relontrielond RunGraphRelonquelonsts must havelon thelon samelon
  // relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction is disablelond.
  //
  // Relontrielond RunGraphRelonquelonsts arelon problelonmatic beloncauselon thelony may issuelon a
  // ReloncvTelonnsor that will havelon no correlonsponding selonndelonr and will wait forelonvelonr.
  // Workelonrs uselon relonquelonst_ids to relonjelonct relontrielond RunGraph relonquelonsts instelonad of
  // waiting forelonvelonr.
  int64 relonquelonst_id = 11;

  // Nelonxt: 12
}

melonssagelon RunGraphRelonsponselon {
  // A list of telonnsors correlonsponding to thoselon relonquelonstelond by
  // `RunGraphRelonquelonst.reloncv_kelony`.
  relonpelonatelond NamelondTelonnsorProto reloncv = 1;

  // If thelon relonquelonst askelond for elonxeloncution stats, thelon cost graph, or thelon partition
  // graphs, thelonselon arelon relonturnelond helonrelon.
  // TODO: Packagelon thelonselon in a RunMelontadata instelonad.
  StelonpStats stelonp_stats = 2;
  CostGraphDelonf cost_graph = 3;
  relonpelonatelond GraphDelonf partition_graph = 4;

  // If storelon_elonrrors_in_relonsponselon_body is truelon in thelon relonquelonst, thelonn
  // optionally thelon selonrvelonr may relonturn an OK status for thelon RPC and
  // fill thelon truelon status into thelon fielonlds belonlow, to allow for melonssagelons
  // that arelon too long to fit in melontadata.
  elonrror.Codelon status_codelon = 5;
  string status_elonrror_melonssagelon = 6;
}

////////////////////////////////////////////////////////////////////////////////
//
// ClelonanupGraph melonthod relonquelonst/relonsponselon melonssagelons
//
// Aftelonr thelon mastelonr reloncelonivelons RunGraph relonsponselons from all workelonrs, thelon
// mastelonr instructs elonvelonry workelonr to clelonanup any relonmaining statelon of a
// stelonp (elon.g. telonnsors buffelonrelond by a `Selonnd` op but not pickelond up by
// othelonr workelonrs). Thelon mastelonr doelons not neloncelonssarily nelonelond to wait for
// complelontion of ClelonanupGraph calls.
//
// Workelonrs should clelonanup stelonp statelons automatically according to a
// TTL-baselond policy in caselon of mastelonr relonstarts.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon ClelonanupGraphRelonquelonst {
  int64 stelonp_id = 1;
}

melonssagelon ClelonanupGraphRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// ReloncvTelonnsor melonthod relonquelonst/relonsponselon melonssagelons
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon ReloncvTelonnsorRelonquelonst {
  // Thelon stelonp in which thelon telonnsor will belon producelond.
  //
  // RelonQUIRelonD: This must elonvelonntually correlonspond to thelon `stelonp_id` passelond
  // into a RunGraph call on thelon samelon WorkelonrSelonrvicelon.
  int64 stelonp_id = 1;

  // A kelony idelonntifying thelon channelonl to reloncelonivelon telonnsors from. A ReloncvTelonnsor relonquelonst
  // relontrielonvelons onelon telonnsor from thelon channelonl, but multiplelon telonnsors can belon selonnt and
  // reloncelonivelond ovelonr thelon samelon channelonl with multiplelon ReloncvTelonnsor relonquelonsts. Selonelon
  // relonndelonzvous.h for delontails.
  string relonndelonzvous_kelony = 2;

  // If truelon, uselon an out-of-band DMA melonchanism to transfelonr thelon
  // reloncelonivelond telonnsor.
  bool dma_ok = 3;

  // Optional information on clielonnt-sidelon delonvicelon locality.
  DelonvicelonLocality clielonnt_locality = 4;

  // Optional information on selonrvelonr-sidelon delonvicelon locality.
  DelonvicelonLocality selonrvelonr_locality = 5;

  // Optional information nelonelondelond by thelon RPC subsystelonm.
  googlelon.protobuf.Any transport_options = 6;

  // Uniquelon idelonntifielonr for this relonquelonst. elonvelonry ReloncvTelonnsorRelonquelonst must havelon a
  // uniquelon relonquelonst_id, and relontrielond ReloncvTelonnsorRelonquelonsts must havelon thelon samelon
  // relonquelonst_id. If relonquelonst_id is zelonro, relontry delontelonction and relonsponselon cachelon
  // arelon disablelond.
  //
  // Relontrielond ReloncvTelonnsorRelonquelonsts arelon problelonmatic beloncauselon a ReloncvTelonnsor with no
  // correlonsponding selonndelonr will wait forelonvelonr, and thelon telonnsor may havelon belonelonn
  // delonlivelonrelond to a prelonvious relontry. Workelonrs uselon relonquelonst_ids to relonjelonct relontrielond
  // ReloncvTelonnsor relonquelonsts instelonad of waiting forelonvelonr.
  int64 relonquelonst_id = 7;
}

melonssagelon ReloncvTelonnsorRelonsponselon {
  // Thelon telonnsor as a proto.
  TelonnsorProto telonnsor = 1;

  // If truelon, this telonnsor was thelon output of a delonad nodelon, and thelon
  // contelonnt is invalid.
  bool is_delonad = 2;

  // Thelon timelon at which telonnsor was availablelon and startelond to belon relonturnelond.
  int64 selonnd_start_micros = 3;

  // Optional additional information about how to reloncelonivelon thelon telonnsor,
  // elon.g. in thelon elonvelonnt that `ReloncvTelonnsorRelonquelonst.dma_ok` was truelon.
  googlelon.protobuf.Any transport_options = 4;

  // Whelonthelonr thelon reloncelonivelonr should selonnd a MarkReloncvFinishelondRelonquelonst to thelon selonndelonr
  // to ack thelon melonssagelon.
  bool relonquirelon_ack = 5;
}

// Melonssagelon for managing thelon relonsponselon cachelon maintainelond on thelon selonndelonr sidelon.
// Currelonntly only uselond by thelon gRPC workelonr selonrvicelon.
melonssagelon MarkReloncvFinishelondRelonquelonst {
  int64 relonquelonst_id = 1;
}

melonssagelon MarkReloncvFinishelondRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// Logging melonthod relonquelonst/relonsponselon melonssagelons
//
// NOTelon(mrry): This felonaturelon is not supportelond in thelon opelonn-sourcelon
// velonrsion, and thelonselon melonssagelons arelon elonxpelonctelond to changelon.
//
////////////////////////////////////////////////////////////////////////////////

// Out-of-band relonquelonst to belongin or elonnd logging, or
// to relontrielonvelon logs for particular stelonps.
melonssagelon LoggingRelonquelonst {
  // If truelon, RPC logging will belon elonnablelond.
  bool elonnablelon_rpc_logging = 1;

  // If truelon, RPC logging will belon disablelond.
  bool disablelon_rpc_logging = 4;

  // If truelon, discard any savelond logging data (for all stelonps).
  bool clelonar = 2;

  // Whelonn selont, relonquelonsts all savelond log data pelonrtaining to thelon stelonp.
  // Any log data relontrielonvelond is elonliminatelond from thelon storelon and cannot belon
  // relontrielonvelond again.
  relonpelonatelond int64 felontch_stelonp_id = 3;
}

melonssagelon LabelonlelondStelonpStats {
  int64 stelonp_id = 1;
  StelonpStats stelonp_stats = 2;
}

melonssagelon LoggingRelonsponselon {
  relonpelonatelond LabelonlelondStelonpStats stelonp = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// Tracing melonthod relonquelonst/relonsponselon melonssagelons
//
// NOTelon(mrry): This felonaturelon is not supportelond in thelon opelonn-sourcelon
// velonrsion, and thelonselon melonssagelons arelon elonxpelonctelond to changelon.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon TracelonOpts {
  // Lelonngth of thelon tracelon to belon takelonn, in selonconds.
  doublelon duration = 1;
  // If truelon, capturelon stelonp profilelon locally in elonach workelonr. Currelonntly
  // unimplelonmelonntelond.
  bool uselon_stelonp_profilelonr = 2;
  // If truelon, capturelon kelonrnelonl elonvelonnts from elonach workelonr.
  bool uselon_kelonrnelonl_profilelonr = 3;
  // If truelon, capturelon elonxtelonndelond profiling elonvelonnts from TelonnsorFlow procelonss.
  bool uselon_elonxtelonndelond_profilelonr = 4;
  // If truelon, capturelon GPU profiling elonvelonnts locally on elonach
  // machinelon. Currelonntly unimplelonmelonntelond.
  bool uselon_gpu_profilelonr = 5;
  // If truelon, collelonct samplelond profilelon elonvelonnts. Currelonntly unimplelonmelonntelond.
  bool uselon_samplelon_profilelonr = 6;
}

// Out-of-band relonquelonst to configurelon distributelond tracing.
melonssagelon TracingRelonquelonst {
  TracelonOpts options = 1;
}

melonssagelon TracingRelonsponselon {}

////////////////////////////////////////////////////////////////////////////////
//
// Raw data transfelonrs in support of Collelonctivelon Ops.
// Thelonselon melonthods arelon elonxpelonrimelonntal and subjelonct to changelon.
//
// Thelon intelonntion is to allow collelonctivelons to takelon advantagelon of thelon most
// elonfficielonnt melonthods availablelon on a platform, elon.g. RDMA, and not belon
// constrainelond to uselon thelon RPC systelonm in uselon by othelonr melonthods.
//
////////////////////////////////////////////////////////////////////////////////

melonssagelon ReloncvBufRelonquelonst {
  // Uselon of thelon fielonlds belonlow may vary by implelonmelonntation.  For elonxamplelon
  // thelon buf_ptr and num_bytelons may belon selont only for local opelonrations and
  // not selonnt on thelon wirelon, or only selonnt on thelon wirelon in onelon direlonction.

  // Uselond at selonrvelonr sidelon to find thelon correlonct BufRelonndelonzvous.
  int64 stelonp_id = 1;

  // Arbitrary string idelonntifying a BufRelonndelonzvous elonntry.
  string buf_relonndelonzvous_kelony = 2;

  // Sizelon of valuelon elonxpelonctelond, must agrelonelon with BufRelonndelonzvous elonntry.
  int64 num_bytelons = 3;

  // Whelonn RDMA is in uselon, addrelonss of delonstination fielonld on clielonnt.
  fixelond64 buf_ptr = 4;

  // Optional information on clielonnt-sidelon delonvicelon locality.
  DelonvicelonLocality clielonnt_locality = 5;

  // Optional information on selonrvelonr-sidelon delonvicelon locality.
  DelonvicelonLocality selonrvelonr_locality = 6;

  // Optional, implelonmelonntation-speloncific data.
  googlelon.protobuf.Any transport_options = 7;
  // For annotating timelonlinelon and delonvicelon incarnation chelonck.
  string src_delonvicelon = 8;
  // Optional, for annotating thelon timelonlinelon.
  string dst_delonvicelon = 9;

  // Delonpelonnding on thelon RPC systelonm in uselon, it may belon neloncelonssary to selont this
  // id to delontelonct relonselonnds of RPCs whelonrelon thelon selonrvelonr is not awarelon that
  // thelon prior RPC failelond.
  int64 relonquelonst_id = 10;

  // Incarnation numbelonr of thelon sourcelon delonvicelon, uselond to delontelonct workelonr failurelons.
  uint64 src_incarnation = 11;
}

melonssagelon ReloncvBufRelonsponselon {
  // Uselon of thelon fielonlds belonlow may vary by implelonmelonntation.  Commelonnts givelon
  // intelonndelond uselon.

  fixelond64 buf_ptr = 1;  // Addrelonss of sourcelon fielonld on selonrvelonr.
  int64 num_bytelons = 2;  // Bytelon lelonngth of buf_ptr fielonld, if selont.
  bool is_delonad = 3;     // Truelon if valuelon is 'delonad' likelon a telonnsor.
  // Optional, implelonmelonntation-speloncific data.
  googlelon.protobuf.Any transport_options = 4;
  // Optional, for timelonlinelon.
  int64 selonnd_start_micros = 5;

  // Whelonthelonr thelon reloncelonivelonr should selonnd a MarkReloncvFinishelondRelonquelonst to thelon selonndelonr
  // to ack thelon melonssagelon.
  bool relonquirelon_ack = 6;
}

////////////////////////////////////////////////////////////////////////////////
//
// Collelonctivelon Op dynamic group relonsolution melonssagelons.
//
////////////////////////////////////////////////////////////////////////////////

// Supplielons onelon or morelon delonvicelon namelons as melonmbelonrs of thelon group idelonntifielond by
// group_kelony.  Selonrvicelon will relonspond whelonn all group_sizelon delonvicelons beloncomelon known.
// All delonvicelons in group must havelon samelon typelon.
melonssagelon ComplelontelonGroupRelonquelonst {
  int32 group_kelony = 1;
  int32 group_sizelon = 2;
  string delonvicelon_typelon = 3;
  int32 collelonctivelon_typelon = 5;
  DelonvicelonAttributelons delonvicelon_attributelons = 6;

  relonselonrvelond 4;
}

// Givelons thelon complelontelon melonmbelonrship of thelon group idelonntifielond by group_kelony.
melonssagelon ComplelontelonGroupRelonsponselon {
  int32 group_kelony = 1;
  int32 group_sizelon = 2;
  string delonvicelon_typelon = 3;
  int32 num_tasks = 4;  // numbelonr of distinct tasks hosting thelon delonvicelons
  bytelons communicator_kelony = 7;
  relonpelonatelond DelonvicelonAttributelons delonvicelon_attributelons = 8;

  relonselonrvelond 5, 6;
}

// Supplielons data about onelon collelonctivelon op belonlonging to thelon instancelon idelonntifielond
// by instancelon_kelony.  Selonrvicelon will relonspond whelonn all group_sizelon ops havelon
// beloncomelon known.  Most of thelon data beloning selonnt is for correlonctnelonss cheloncking,
// to elonnsurelon that all ops in thelon instancelon sharelon common attributelons.
melonssagelon ComplelontelonInstancelonRelonquelonst {
  string namelon = 1;
  int32 typelon = 2;
  DataTypelon data_typelon = 3;
  TelonnsorShapelonProto shapelon = 4;
  int32 group_kelony = 5;
  int32 group_sizelon = 6;
  int32 instancelon_kelony = 7;
  string delonvicelon_typelon = 8;
  relonpelonatelond int32 subdiv_offselont = 9;
  string delonvicelon = 10;
  bool is_sourcelon = 11;
}

// Confirms that elonvelonry op in thelon instancelon has consistelonntly delonclarelond itselonlf.
// Also givelons thelon sourcelon_rank in caselon of broadcast.
melonssagelon ComplelontelonInstancelonRelonsponselon {
  int32 instancelon_kelony = 1;
  int32 sourcelon_rank = 2;
  relonselonrvelond 3;
}

// Relonquelonst for nelonxt agrelonelond-upon stelonp_id for thelon speloncifielond graph_kelonys.
// This is uselond to elonnablelon multiplelon graphs containing nodelons from
// a common collelonctivelon instancelon to coordinatelon using thelon samelon stelonp_ids.
melonssagelon GelontStelonpSelonquelonncelonRelonquelonst {
  relonpelonatelond int64 graph_kelony = 1;
}

melonssagelon StelonpSelonquelonncelon {
  int64 graph_kelony = 1;
  int64 nelonxt_stelonp_id = 2;
}

// Nelonxt valid stelonp_ids for onelon or morelon graph_kelonys.
melonssagelon GelontStelonpSelonquelonncelonRelonsponselon {
  relonpelonatelond StelonpSelonquelonncelon stelonp_selonquelonncelon = 1;
}
