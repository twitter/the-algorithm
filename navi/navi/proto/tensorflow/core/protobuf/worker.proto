/* copywight 2016 the tensowfwow a-authows. σωσ aww wights w-wesewved. XD

wicensed u-undew the a-apache wicense, :3 v-vewsion 2.0 (the "wicense");
you m-may nyot use t-this fiwe except i-in compwiance with the wicense. rawr
you may obtain a copy of the wicense at

    http://www.apache.owg/wicenses/wicense-2.0

u-unwess wequiwed by appwicabwe waw ow agweed t-to in wwiting, 😳 softwawe
distwibuted u-undew the wicense is distwibuted on an "as is" basis, 😳😳😳
w-without wawwanties ow conditions o-of any kind, (ꈍᴗꈍ) eithew e-expwess ow impwied. 🥺
see the wicense fow the specific wanguage govewning pewmissions a-and
wimitations undew the wicense. ^•ﻌ•^
==============================================================================*/

syntax = "pwoto3";

package tensowfwow;

i-impowt "googwe/pwotobuf/any.pwoto";
impowt "tensowfwow/cowe/fwamewowk/cost_gwaph.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/device_attwibutes.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/gwaph.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/step_stats.pwoto";
i-impowt "tensowfwow/cowe/fwamewowk/tensow.pwoto";
impowt "tensowfwow/cowe/fwamewowk/tensow_shape.pwoto";
impowt "tensowfwow/cowe/fwamewowk/types.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/config.pwoto";
impowt "tensowfwow/cowe/pwotobuf/coowdination_config.pwoto";
impowt "tensowfwow/cowe/pwotobuf/debug.pwoto";
i-impowt "tensowfwow/cowe/pwotobuf/ewwow_codes.pwoto";
impowt "tensowfwow/cowe/pwotobuf/named_tensow.pwoto";
impowt "tensowfwow/cowe/pwotobuf/tensowfwow_sewvew.pwoto";

option cc_enabwe_awenas = twue;
option j-java_outew_cwassname = "wowkewpwotos";
option j-java_muwtipwe_fiwes = t-twue;
option j-java_package = "owg.tensowfwow.distwuntime";
option go_package = "github.com/tensowfwow/tensowfwow/tensowfwow/go/cowe/pwotobuf/fow_cowe_pwotos_go_pwoto";

////////////////////////////////////////////////////////////////////////////////
//
// getstatus method wequest/wesponse m-messages
//
////////////////////////////////////////////////////////////////////////////////

m-message getstatuswequest {}

message getstatuswesponse {
  w-wepeated deviceattwibutes d-device_attwibutes = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// cweatesession m-method wequest/wesponse m-messages
//
// fow each session, XD
//
////////////////////////////////////////////////////////////////////////////////

message c-cweatewowkewsessionwequest {
  // sessions awe identified b-by a given handwe. ^•ﻌ•^
  stwing s-session_handwe = 1;

  // d-defines the configuwation of a tensowfwow wowkew. ^^;;
  sewvewdef sewvew_def = 2;

  // if twue, ʘwʘ any wesouwces such as vawiabwes used i-in the session w-wiww nyot be
  // shawed with othew s-sessions. OwO
  b-boow isowate_session_state = 3;

  // t-the device attwibutes of aww the devices in the cwustew. 🥺
  w-wepeated deviceattwibutes cwustew_device_attwibutes = 4;

  // the mastew task name fwom which the wequest is s-sent. (⑅˘꒳˘)
  stwing mastew_task = 5;

  // the incawnation i-id of the m-mastew task wocaw c-cpu device. (///ˬ///✿)
  // if the tawget w-wowkew awweady h-has a wowkewsession c-cweated pweviouswy w-with
  // the same mastew task nyame but a-a diffewent incawnation, (✿oωo) i-it usuawwy i-indicates
  // t-that the pwevious m-mastew faiwed befowe deweting the wowkewsession on the
  // w-wowkew. nyaa~~ to pwevent memowy weaks, >w< the wowkew shouwd gawbage cowwect the owd
  // wowkewsessions. (///ˬ///✿)
  i-int64 mastew_incawnation = 6;

  // configuwes coowdination sewvice within wowkew s-sessions. rawr
  c-coowdinationsewviceconfig c-coowdination_sewvice_config = 7;
}

message cweatewowkewsessionwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// d-dewetesession method w-wequest/wesponse m-messages
//
// dewetes aww wowkew-side state associated with the given session handwe. (U ﹏ U)
//
////////////////////////////////////////////////////////////////////////////////

m-message dewetewowkewsessionwequest {
  // sessions a-awe identified by a given handwe. ^•ﻌ•^
  s-stwing session_handwe = 1;
}

m-message dewetewowkewsessionwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// wegistewgwaph method wequest/wesponse m-messages
//
// f-fow each session, (///ˬ///✿) aftew t-the mastew pwaced e-evewy nyode on a device, o.O
// it pawtitions the whowe gwaph into many subgwaphs. a-aww the nyodes i-in
// a subgwaph w-wewe in the same wowkew, >w< but potentiawwy o-on many d-devices
// owned by that wowkew (e.g. nyaa~~ c-cpu0, pwus gpu0, òωó gpu1, ..., gpu7). (U ᵕ U❁) the
// mastew wegistews subgwaphs fow a-a wowkew befowe w-wunning any steps. (///ˬ///✿) a
// successfuw wegistwation w-wetuwns a gwaph h-handwe to be used in wattew
// wungwaph wequests. (✿oωo)
//
////////////////////////////////////////////////////////////////////////////////

message w-wegistewgwaphwequest {
  // subgwaphs awe scoped within one session. 😳😳😳
  stwing session_handwe = 1;

  // s-set to twue if `cweatewowkewsession` was c-cawwed fow `session_handwe`. (✿oωo)
  b-boow cweate_wowkew_session_cawwed = 6;

  // "gwaph_def" has the subgwaph of nyodes fow this wowkew, w-with each n-nyode
  // having its device_name fiwwed in. (U ﹏ U)
  gwaphdef gwaph_def = 2;

  // t-twue iff the gwaph (befowe p-pawtitioning) contains contwow fwow nyodes. (˘ω˘)
  //
  // as o-of 01/11/2015, 😳😳😳 this is nyo wongew s-set by cwients. (///ˬ///✿)
  b-boow has_contwow_fwow = 3 [depwecated = twue];

  // c-configuwation options f-fow the session i-in which this gwaph w-was cweated. (U ᵕ U❁)
  gwaphoptions g-gwaph_options = 4;

  // f-fiewd(s) used by tensowfwow debuggew (tfdbg). >_<
  d-debugoptions d-debug_options = 5;

  // if g-gwaph_def contains any cowwective ops this must b-be a positive
  // integew used t-to coowdinate e-execution with othew gwaphs. (///ˬ///✿)  aww
  // gwaphs in a distwibuted execution w-with the s-same
  // cowwective_gwaph_key w-wiww coowdinate t-to use the same step_id
  // concuwwentwy s-so that bufwendezvous entwies wiww make the cowwect
  // vawues accessibwe. (U ᵕ U❁)
  int64 cowwective_gwaph_key = 7;

  // configpwoto f-fwom the session in which t-this gwaph was cweated. >w<
  // c-contains additionaw pawametews b-beyond gwaph_options, 😳😳😳 incwuding
  // t-the nyame o-of the wequested e-executow. (ˆ ﻌ ˆ)♡
  configpwoto c-config_pwoto = 8;
}

m-message wegistewgwaphwesponse {
  // if the wegistwation succeeds, (ꈍᴗꈍ) wetuwns an opaque gwaph_handwe to
  // the mastew. t-the mastew cawws w-wungwaph with g-gwaph_handwe to
  // compute d-diffewent steps. 🥺
  stwing gwaph_handwe = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// dewegistewgwaph method wequest/wesponse m-messages
//
// t-the mastew dewegistews t-the given gwaph_handwe when the gwaph is nyo
// w-wongew nyeeded (e.g., t-the ovewaww gwaph is we-scheduwed a-and n-nyodes
// awe we-pwaced). >_<
//
// the wowkew dewegistews a gwaph_handwe automaticawwy accowding to o-on
// a ttw-base p-powicy in case o-of mastew westawts. OwO
//
////////////////////////////////////////////////////////////////////////////////

m-message d-dewegistewgwaphwequest {
  // the session_handwe u-used when wegistewing t-the gwaph. ^^;; if session_handwe i-is
  // empty, (✿oωo) a-a singwe gwobaw nyamespace i-is used. UwU
  stwing session_handwe = 2;

  // set t-to twue if `cweatewowkewsession` was cawwed fow `session_handwe`. ( ͡o ω ͡o )
  b-boow cweate_wowkew_session_cawwed = 3;

  // w-wequiwed: gwaph_handwe must be w-wetuwned by a wegistewgwaph caww
  // to the same w-wowkewsewvice. (✿oωo)
  s-stwing gwaph_handwe = 1;
}

message d-dewegistewgwaphwesponse {
  // todo(mwwy): optionawwy add summawy stats fow t-the gwaph. mya
}

////////////////////////////////////////////////////////////////////////////////
//
// cweanupaww method wequest/wesponse m-messages
//
////////////////////////////////////////////////////////////////////////////////

m-message cweanupawwwequest {
  // a-a wist of containew nyames. ( ͡o ω ͡o )
  //
  // i-if 'containew' is n-nyot empty, :3 weweases wesouwces in the given
  // c-containews in aww devices.
  //
  // if 'containew' i-is empty, 😳 w-weweases wesouwces in the defauwt
  // c-containew in aww devices. (U ﹏ U)
  w-wepeated stwing c-containew = 1;
}

m-message cweanupawwwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// wungwaph wequest / wesponse messages
//
// the wowkew exekawaii~s aww subgwaphs wegistewed undew gwaph_handwe. >w<
// wungwaph wetuwns aftew the execution finishes ow an ewwow is
// encountewed. UwU
// a-a s-sequence of wungwaphwequests with is_pawtiaw may b-be sent to wungwaph f-fow
// pawtiaw g-gwaph execution. 😳
//
////////////////////////////////////////////////////////////////////////////////

// options s-specific to the execution of a-a singwe step. XD
m-message executowopts {
  boow wecowd_costs = 1;
  b-boow wecowd_timewine = 3;
  boow wecowd_pawtition_gwaphs = 4;
  b-boow wepowt_tensow_awwocations_upon_oom = 5;
}

m-message wungwaphwequest {
  // session_handwe is the mastew-genewated u-unique i-id fow this session. (✿oωo)
  // i-if session_handwe i-is non-empty, ^•ﻌ•^ i-it must b-be the same as u-used when
  // w-wegistewing the g-gwaph. mya if it is empty, (˘ω˘) a singwe g-gwobaw nyamespace i-is used to
  // s-seawch fow the gwaph_handwe. nyaa~~
  s-stwing session_handwe = 8;

  // set to twue if `cweatewowkewsession` was cawwed f-fow `session_handwe`. :3
  boow cweate_wowkew_session_cawwed = 10;

  // w-wequiwed: g-gwaph_handwe must b-be wetuwned by a wegistewgwaph c-caww
  // to the same wowkewsewvice.
  s-stwing gwaph_handwe = 1;

  // a-a unique id to distinguish d-diffewent wuns of the same gwaph. (✿oωo)
  //
  // the mastew genewates a gwobaw unique `step_id` to distinguish
  // d-diffewent wuns of the gwaph computation. (U ﹏ U) s-subgwaphs c-communicate
  // (e.g., send/wecv ops) with each othew using `step_id` t-to
  // distinguish t-tensows genewated b-by diffewent w-wuns. (ꈍᴗꈍ)
  int64 step_id = 2;

  // options fow this step. (˘ω˘)
  executowopts e-exec_opts = 5;

  // w-wuns the gwaph. ^^
  //
  // s-sends the tensows in "send" into the gwaph b-befowe the wun and
  // fetches t-the keys into `wungwaphwesponse.wecv` a-aftew the w-wun.
  wepeated nyamedtensowpwoto s-send = 3;
  wepeated s-stwing wecv_key = 4;

  // t-twue if the wungwaphwequest is a-a pawtiaw wun wequest. (⑅˘꒳˘)
  boow i-is_pawtiaw = 6;
  // t-twue if this i-is the wast pawtiaw w-wun wequest i-in a sequence o-of wequests. rawr
  boow i-is_wast_pawtiaw_wun = 7;

  // i-if twue then some ewwows, :3 e.g., e-execution ewwows that have wong
  // e-ewwow messages, OwO may wetuwn a-an ok wungwaphwesponse w-with the a-actuaw
  // ewwow saved in the status_code/status_ewwow_message fiewds of the
  // w-wesponse body. (ˆ ﻌ ˆ)♡ t-this is a wowkawound s-since the wpc subsystem may
  // twuncate wong metadata m-messages.
  boow s-stowe_ewwows_in_wesponse_body = 9;

  // unique i-identifiew fow t-this wequest. :3 evewy wungwaphwequest must have a
  // unique wequest_id, -.- a-and wetwied w-wungwaphwequests m-must have t-the same
  // wequest_id. -.- if wequest_id is zewo, òωó w-wetwy detection i-is disabwed. 😳
  //
  // wetwied wungwaphwequests a-awe pwobwematic because they may issue a
  // w-wecvtensow that wiww have nyo cowwesponding s-sendew a-and wiww wait fowevew. nyaa~~
  // wowkews u-use wequest_ids t-to weject wetwied wungwaph w-wequests instead of
  // waiting f-fowevew. (⑅˘꒳˘)
  int64 w-wequest_id = 11;

  // n-nyext: 12
}

m-message wungwaphwesponse {
  // a-a wist of t-tensows cowwesponding t-to those wequested by
  // `wungwaphwequest.wecv_key`. 😳
  w-wepeated nyamedtensowpwoto wecv = 1;

  // if the w-wequest asked f-fow execution stats, (U ﹏ U) t-the cost gwaph, ow the pawtition
  // gwaphs, /(^•ω•^) these awe wetuwned hewe. OwO
  // t-todo(suhawshs): package these i-in a wunmetadata i-instead. ( ͡o ω ͡o )
  stepstats step_stats = 2;
  costgwaphdef c-cost_gwaph = 3;
  wepeated g-gwaphdef pawtition_gwaph = 4;

  // i-if stowe_ewwows_in_wesponse_body i-is twue in t-the wequest, XD then
  // o-optionawwy the sewvew may wetuwn an ok status fow the wpc and
  // fiww the t-twue status into the fiewds bewow, /(^•ω•^) t-to awwow fow messages
  // that awe too wong to fit in metadata. /(^•ω•^)
  e-ewwow.code status_code = 5;
  stwing status_ewwow_message = 6;
}

////////////////////////////////////////////////////////////////////////////////
//
// cweanupgwaph method wequest/wesponse m-messages
//
// a-aftew the mastew weceives w-wungwaph wesponses fwom aww wowkews, 😳😳😳 the
// mastew i-instwucts evewy w-wowkew to cweanup any wemaining s-state of a
// step (e.g. (ˆ ﻌ ˆ)♡ tensows b-buffewed by a `send` op but nyot picked up by
// othew wowkews). :3 t-the mastew does not nyecessawiwy need to wait f-fow
// compwetion o-of cweanupgwaph c-cawws. òωó
//
// wowkews shouwd cweanup step states a-automaticawwy accowding to a
// ttw-based powicy in case of mastew westawts. 🥺
//
////////////////////////////////////////////////////////////////////////////////

m-message cweanupgwaphwequest {
  i-int64 step_id = 1;
}

m-message c-cweanupgwaphwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// wecvtensow method wequest/wesponse m-messages
//
////////////////////////////////////////////////////////////////////////////////

m-message wecvtensowwequest {
  // the step in which the tensow w-wiww be pwoduced. (U ﹏ U)
  //
  // wequiwed: this must eventuawwy cowwespond t-to the `step_id` passed
  // into a wungwaph c-caww on the s-same wowkewsewvice. XD
  int64 step_id = 1;

  // a-a key identifying t-the channew t-to weceive tensows fwom. ^^ a wecvtensow wequest
  // w-wetwieves one tensow fwom the channew, but muwtipwe t-tensows can be sent and
  // weceived ovew the same channew w-with muwtipwe w-wecvtensow wequests. o.O s-see
  // wendezvous.h f-fow d-detaiws. 😳😳😳
  stwing wendezvous_key = 2;

  // i-if twue, /(^•ω•^) use an out-of-band dma mechanism t-to twansfew the
  // weceived t-tensow. 😳😳😳
  boow dma_ok = 3;

  // optionaw infowmation o-on cwient-side d-device wocawity. ^•ﻌ•^
  devicewocawity c-cwient_wocawity = 4;

  // optionaw infowmation o-on sewvew-side d-device wocawity. 🥺
  devicewocawity s-sewvew_wocawity = 5;

  // o-optionaw infowmation nyeeded b-by the wpc subsystem. o.O
  googwe.pwotobuf.any twanspowt_options = 6;

  // unique i-identifiew fow this wequest. (U ᵕ U❁) e-evewy wecvtensowwequest must have a
  // unique w-wequest_id, ^^ and w-wetwied wecvtensowwequests m-must have the same
  // w-wequest_id. (⑅˘꒳˘) i-if wequest_id is zewo, :3 wetwy detection a-and wesponse cache
  // awe d-disabwed. (///ˬ///✿)
  //
  // wetwied wecvtensowwequests a-awe pwobwematic b-because a wecvtensow with nyo
  // cowwesponding sendew wiww wait fowevew, :3 and t-the tensow may h-have been
  // dewivewed to a pwevious wetwy. wowkews use wequest_ids t-to weject wetwied
  // wecvtensow w-wequests i-instead of waiting fowevew. 🥺
  int64 wequest_id = 7;
}

message wecvtensowwesponse {
  // t-the tensow as a pwoto. mya
  tensowpwoto tensow = 1;

  // i-if twue, XD this tensow was the output o-of a dead nyode, -.- a-and the
  // content is invawid. o.O
  b-boow is_dead = 2;

  // t-the time at which t-tensow was avaiwabwe a-and stawted t-to be wetuwned. (˘ω˘)
  i-int64 send_stawt_micwos = 3;

  // optionaw additionaw infowmation about how to weceive the tensow, (U ᵕ U❁)
  // e.g. i-in the event t-that `wecvtensowwequest.dma_ok` w-was twue. rawr
  googwe.pwotobuf.any t-twanspowt_options = 4;

  // w-whethew t-the weceivew shouwd send a mawkwecvfinishedwequest to the sendew
  // to ack t-the message. 🥺
  b-boow wequiwe_ack = 5;
}

// message fow managing the wesponse c-cache maintained o-on the sendew side. rawr x3
// c-cuwwentwy onwy used by the gwpc wowkew sewvice. ( ͡o ω ͡o )
m-message mawkwecvfinishedwequest {
  int64 w-wequest_id = 1;
}

m-message mawkwecvfinishedwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// wogging method wequest/wesponse m-messages
//
// nyote(mwwy): this f-featuwe is nyot s-suppowted in the open-souwce
// v-vewsion, σωσ and these m-messages awe e-expected to change. rawr x3
//
////////////////////////////////////////////////////////////////////////////////

// o-out-of-band w-wequest t-to begin ow end wogging, (ˆ ﻌ ˆ)♡ ow
// t-to wetwieve wogs f-fow pawticuwaw steps. rawr
message w-woggingwequest {
  // if twue, :3 wpc wogging wiww b-be enabwed. rawr
  boow enabwe_wpc_wogging = 1;

  // i-if twue, (˘ω˘) wpc wogging wiww be disabwed. (ˆ ﻌ ˆ)♡
  b-boow disabwe_wpc_wogging = 4;

  // i-if twue, mya discawd any saved wogging d-data (fow aww steps). (U ᵕ U❁)
  boow cweaw = 2;

  // when set, mya wequests a-aww saved wog d-data pewtaining to the step. ʘwʘ
  // any wog data wetwieved i-is ewiminated f-fwom the stowe and cannot b-be
  // wetwieved again. (˘ω˘)
  wepeated int64 fetch_step_id = 3;
}

m-message wabewedstepstats {
  i-int64 step_id = 1;
  s-stepstats step_stats = 2;
}

m-message woggingwesponse {
  wepeated wabewedstepstats s-step = 1;
}

////////////////////////////////////////////////////////////////////////////////
//
// t-twacing m-method wequest/wesponse m-messages
//
// nyote(mwwy): this featuwe is nyot suppowted in the open-souwce
// vewsion, 😳 and these messages a-awe expected t-to change. òωó
//
////////////////////////////////////////////////////////////////////////////////

m-message twaceopts {
  // w-wength o-of the twace t-to be taken, nyaa~~ in seconds. o.O
  doubwe d-duwation = 1;
  // i-if twue, nyaa~~ captuwe step pwofiwe w-wocawwy in each w-wowkew. (U ᵕ U❁) cuwwentwy
  // unimpwemented. 😳😳😳
  boow u-use_step_pwofiwew = 2;
  // if twue, captuwe kewnew e-events fwom each wowkew. (U ﹏ U)
  b-boow use_kewnew_pwofiwew = 3;
  // i-if twue, ^•ﻌ•^ captuwe extended pwofiwing e-events fwom t-tensowfwow pwocess. (⑅˘꒳˘)
  b-boow use_extended_pwofiwew = 4;
  // if t-twue, >_< captuwe gpu p-pwofiwing events wocawwy on each
  // m-machine. (⑅˘꒳˘) cuwwentwy unimpwemented. σωσ
  b-boow u-use_gpu_pwofiwew = 5;
  // i-if twue, 🥺 cowwect sampwed p-pwofiwe events. :3 cuwwentwy unimpwemented. (ꈍᴗꈍ)
  b-boow use_sampwe_pwofiwew = 6;
}

// out-of-band wequest to configuwe distwibuted twacing. ^•ﻌ•^
message twacingwequest {
  twaceopts o-options = 1;
}

message twacingwesponse {}

////////////////////////////////////////////////////////////////////////////////
//
// waw data twansfews in suppowt of cowwective ops. (˘ω˘)
// these methods awe expewimentaw a-and subject to change. 🥺
//
// the intention i-is to awwow cowwectives to take a-advantage of the most
// efficient methods avaiwabwe o-on a pwatfowm, (✿oωo) e.g. wdma, a-and nyot be
// constwained to use t-the wpc system i-in use by othew methods.
//
////////////////////////////////////////////////////////////////////////////////

message wecvbufwequest {
  // u-use of the fiewds bewow may vawy by impwementation. XD  f-fow exampwe
  // the buf_ptw and n-nyum_bytes may be set onwy fow w-wocaw opewations and
  // nyot s-sent on the wiwe, (///ˬ///✿) o-ow onwy sent on the wiwe in one diwection.

  // u-used at sewvew side to find the cowwect bufwendezvous. ( ͡o ω ͡o )
  i-int64 step_id = 1;

  // awbitwawy stwing identifying a bufwendezvous e-entwy. ʘwʘ
  stwing b-buf_wendezvous_key = 2;

  // size of vawue expected, rawr m-must agwee w-with bufwendezvous entwy. o.O
  i-int64 nyum_bytes = 3;

  // when wdma is in use, ^•ﻌ•^ addwess of destination fiewd on c-cwient. (///ˬ///✿)
  fixed64 b-buf_ptw = 4;

  // optionaw infowmation o-on cwient-side d-device wocawity. (ˆ ﻌ ˆ)♡
  devicewocawity c-cwient_wocawity = 5;

  // optionaw infowmation on sewvew-side d-device wocawity. XD
  devicewocawity sewvew_wocawity = 6;

  // o-optionaw, i-impwementation-specific data.
  googwe.pwotobuf.any t-twanspowt_options = 7;
  // fow annotating timewine and device incawnation check. (✿oωo)
  stwing swc_device = 8;
  // optionaw, -.- fow annotating the t-timewine. XD
  stwing d-dst_device = 9;

  // depending o-on the wpc s-system in use, (✿oωo) it may be nyecessawy t-to set this
  // id to detect wesends of wpcs whewe the sewvew is nyot awawe that
  // the p-pwiow wpc faiwed.
  int64 wequest_id = 10;

  // incawnation nyumbew of the souwce device, (˘ω˘) used t-to detect wowkew f-faiwuwes. (ˆ ﻌ ˆ)♡
  uint64 s-swc_incawnation = 11;
}

message wecvbufwesponse {
  // use o-of the fiewds bewow m-may vawy by i-impwementation. >_<  comments give
  // i-intended use. -.-

  fixed64 buf_ptw = 1;  // a-addwess of souwce f-fiewd on sewvew. (///ˬ///✿)
  int64 nyum_bytes = 2;  // b-byte wength of buf_ptw fiewd, XD if set. ^^;;
  b-boow is_dead = 3;     // twue i-if vawue is 'dead' w-wike a tensow. rawr x3
  // optionaw, OwO i-impwementation-specific d-data. ʘwʘ
  googwe.pwotobuf.any t-twanspowt_options = 4;
  // optionaw, rawr fow t-timewine. UwU
  int64 send_stawt_micwos = 5;

  // w-whethew the weceivew s-shouwd send a mawkwecvfinishedwequest to the s-sendew
  // to ack the message. (ꈍᴗꈍ)
  boow wequiwe_ack = 6;
}

////////////////////////////////////////////////////////////////////////////////
//
// cowwective op dynamic gwoup wesowution messages. (✿oωo)
//
////////////////////////////////////////////////////////////////////////////////

// suppwies one ow mowe d-device nyames as membews of the gwoup identified b-by
// gwoup_key. (⑅˘꒳˘)  sewvice wiww w-wespond when aww gwoup_size devices become known. OwO
// a-aww devices in gwoup must have same type.
m-message compwetegwoupwequest {
  int32 gwoup_key = 1;
  int32 g-gwoup_size = 2;
  stwing device_type = 3;
  int32 c-cowwective_type = 5;
  deviceattwibutes device_attwibutes = 6;

  w-wesewved 4;
}

// g-gives the compwete membewship of the gwoup i-identified by gwoup_key. 🥺
m-message compwetegwoupwesponse {
  i-int32 g-gwoup_key = 1;
  int32 gwoup_size = 2;
  stwing d-device_type = 3;
  int32 nyum_tasks = 4;  // nyumbew of distinct tasks hosting t-the devices
  bytes communicatow_key = 7;
  wepeated deviceattwibutes d-device_attwibutes = 8;

  w-wesewved 5, >_< 6;
}

// s-suppwies data about one cowwective op bewonging to the instance i-identified
// by instance_key. (ꈍᴗꈍ)  s-sewvice wiww wespond when a-aww gwoup_size ops h-have
// become known. 😳  most of the data being sent is fow cowwectness checking, 🥺
// to ensuwe t-that aww ops in t-the instance shawe common attwibutes. nyaa~~
message compweteinstancewequest {
  s-stwing nyame = 1;
  int32 type = 2;
  d-datatype data_type = 3;
  t-tensowshapepwoto s-shape = 4;
  i-int32 gwoup_key = 5;
  int32 g-gwoup_size = 6;
  i-int32 instance_key = 7;
  stwing device_type = 8;
  wepeated i-int32 subdiv_offset = 9;
  stwing d-device = 10;
  b-boow is_souwce = 11;
}

// c-confiwms that evewy o-op in the instance h-has consistentwy decwawed i-itsewf. ^•ﻌ•^
// awso g-gives the souwce_wank i-in case of bwoadcast. (ˆ ﻌ ˆ)♡
message compweteinstancewesponse {
  i-int32 instance_key = 1;
  int32 souwce_wank = 2;
  w-wesewved 3;
}

// wequest fow nyext agweed-upon s-step_id fow t-the specified gwaph_keys. (U ᵕ U❁)
// this is used to enabwe muwtipwe gwaphs c-containing n-nyodes fwom
// a common cowwective i-instance to coowdinate u-using the same step_ids. mya
message getstepsequencewequest {
  wepeated int64 g-gwaph_key = 1;
}

m-message stepsequence {
  int64 gwaph_key = 1;
  int64 nyext_step_id = 2;
}

// n-nyext vawid s-step_ids fow one ow mowe gwaph_keys. 😳
message getstepsequencewesponse {
  w-wepeated stepsequence step_sequence = 1;
}
