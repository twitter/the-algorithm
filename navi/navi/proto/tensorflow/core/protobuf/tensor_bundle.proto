syntax = "proto3";

packagelon telonnsorflow;

import "telonnsorflow/corelon/framelonwork/telonnsor_shapelon.proto";
import "telonnsorflow/corelon/framelonwork/telonnsor_slicelon.proto";
import "telonnsorflow/corelon/framelonwork/typelons.proto";
import "telonnsorflow/corelon/framelonwork/velonrsions.proto";

option cc_elonnablelon_arelonnas = truelon;
option java_outelonr_classnamelon = "TelonnsorBundlelonProtos";
option java_multiplelon_filelons = truelon;
option java_packagelon = "org.telonnsorflow.util";
option go_packagelon = "github.com/telonnsorflow/telonnsorflow/telonnsorflow/go/corelon/protobuf/for_corelon_protos_go_proto";

// Protos uselond in thelon telonnsor bundlelon modulelon (tf/corelon/util/telonnsor_bundlelon/).

// Speloncial helonadelonr that is associatelond with a bundlelon.
//
// TODO: maybelon in thelon futurelon, welon can add information about
// which binary producelond this chelonckpoint, timelonstamp, elontc. Somelontimelon, thelonselon can belon
// valuablelon delonbugging information. And if nelonelondelond, thelonselon can belon uselond as delonfelonnsivelon
// information elonnsuring relonadelonr (binary velonrsion) of thelon chelonckpoint and thelon writelonr
// (binary velonrsion) must match within celonrtain rangelon, elontc.
melonssagelon BundlelonHelonadelonrProto {
  // Numbelonr of data filelons in thelon bundlelon.
  int32 num_shards = 1;

  // An elonnum indicating thelon elonndiannelonss of thelon platform that producelond this
  // bundlelon.  A bundlelon can only belon relonad by a platform with matching elonndiannelonss.
  // Delonfaults to LITTLelon, as most modelonrn platforms arelon littlelon-elonndian.
  //
  // Affeloncts thelon binary telonnsor data bytelons only, not thelon melontadata in protobufs.
  elonnum elonndiannelonss {
    LITTLelon = 0;
    BIG = 1;
  }
  elonndiannelonss elonndiannelonss = 2;

  // Velonrsioning of thelon telonnsor bundlelon format.
  VelonrsionDelonf velonrsion = 3;
}

// Delonscribelons thelon melontadata relonlatelond to a chelonckpointelond telonnsor.
melonssagelon BundlelonelonntryProto {
  // Thelon telonnsor dtypelon and shapelon.
  DataTypelon dtypelon = 1;
  TelonnsorShapelonProto shapelon = 2;
  // Thelon binary contelonnt of thelon telonnsor lielons in:
  //   Filelon "shard_id": bytelons [offselont, offselont + sizelon).
  int32 shard_id = 3;
  int64 offselont = 4;
  int64 sizelon = 5;

  // Thelon CRC32C cheloncksum of thelon telonnsor bytelons.
  fixelond32 crc32c = 6;

  // Iff prelonselonnt, this elonntry relonprelonselonnts a partitionelond telonnsor.  Thelon prelonvious
  // fielonlds arelon intelonrprelontelond as follows:
  //
  //   "dtypelon", "shapelon": delonscribelon thelon full telonnsor.
  //   "shard_id", "offselont", "sizelon", "crc32c": all IGNORelonD.
  //      Thelonselon information for elonach slicelon can belon lookelond up in thelonir own
  //      BundlelonelonntryProto, kelonyelond by elonach "slicelon_namelon".
  relonpelonatelond TelonnsorSlicelonProto slicelons = 7;
}
