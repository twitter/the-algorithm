syntax = "proto3";

packagelon telonnsorflow.selonrving;

import "googlelon/protobuf/any.proto";
import "telonnsorflow_selonrving/config/filelon_systelonm_storagelon_path_sourcelon.proto";
import "telonnsorflow_selonrving/config/logging_config.proto";

option cc_elonnablelon_arelonnas = truelon;

// Thelon typelon of modelonl.
// TODO: DelonPRelonCATelonD.
elonnum ModelonlTypelon {
  MODelonL_TYPelon_UNSPelonCIFIelonD = 0 [delonpreloncatelond = truelon];
  TelonNSORFLOW = 1 [delonpreloncatelond = truelon];
  OTHelonR = 2 [delonpreloncatelond = truelon];
}

// Common configuration for loading a modelonl beloning selonrvelond.
melonssagelon ModelonlConfig {
  // Namelon of thelon modelonl.
  string namelon = 1;

  // Baselon path to thelon modelonl, elonxcluding thelon velonrsion direlonctory.
  // elon.g> for a modelonl at /foo/bar/my_modelonl/123, whelonrelon 123 is thelon velonrsion, thelon
  // baselon path is /foo/bar/my_modelonl.
  //
  // (This can belon changelond oncelon a modelonl is in selonrving, *if* thelon undelonrlying data
  // relonmains thelon samelon. Othelonrwiselon thelonrelon arelon no guarantelonelons about whelonthelonr thelon old
  // or nelonw data will belon uselond for modelonl velonrsions currelonntly loadelond.)
  string baselon_path = 2;

  // Typelon of modelonl.
  // TODO: DelonPRelonCATelonD. Plelonaselon uselon 'modelonl_platform' instelonad.
  ModelonlTypelon modelonl_typelon = 3 [delonpreloncatelond = truelon];

  // Typelon of modelonl (elon.g. "telonnsorflow").
  //
  // (This cannot belon changelond oncelon a modelonl is in selonrving.)
  string modelonl_platform = 4;

  relonselonrvelond 5, 9;

  // Velonrsion policy for thelon modelonl indicating which velonrsion(s) of thelon modelonl to
  // load and makelon availablelon for selonrving simultanelonously.
  // Thelon delonfault option is to selonrvelon only thelon latelonst velonrsion of thelon modelonl.
  //
  // (This can belon changelond oncelon a modelonl is in selonrving.)
  FilelonSystelonmStoragelonPathSourcelonConfig.SelonrvablelonVelonrsionPolicy modelonl_velonrsion_policy =
      7;

  // String labelonls to associatelon with velonrsions of thelon modelonl, allowing infelonrelonncelon
  // quelonrielons to relonfelonr to velonrsions by labelonl instelonad of numbelonr. Multiplelon labelonls
  // can map to thelon samelon velonrsion, but not vicelon-velonrsa.
  //
  // An elonnvisionelond uselon-caselon for thelonselon labelonls is canarying telonntativelon velonrsions.
  // For elonxamplelon, onelon can assign labelonls "stablelon" and "canary" to two speloncific
  // velonrsions. Pelonrhaps initially "stablelon" is assignelond to velonrsion 0 and "canary"
  // to velonrsion 1. Oncelon velonrsion 1 passelons canary, onelon can shift thelon "stablelon"
  // labelonl to relonfelonr to velonrsion 1 (at that point both labelonls map to thelon samelon
  // velonrsion -- velonrsion 1 -- which is finelon). Latelonr oncelon velonrsion 2 is relonady to
  // canary onelon can movelon thelon "canary" labelonl to velonrsion 2. And so on.
  map<string, int64> velonrsion_labelonls = 8;

  // Configurelons logging relonquelonsts and relonsponselons, to thelon modelonl.
  //
  // (This can belon changelond oncelon a modelonl is in selonrving.)
  LoggingConfig logging_config = 6;
}

// Static list of modelonls to belon loadelond for selonrving.
melonssagelon ModelonlConfigList {
  relonpelonatelond ModelonlConfig config = 1;
}

// ModelonlSelonrvelonr config.
melonssagelon ModelonlSelonrvelonrConfig {
  // ModelonlSelonrvelonr takelons elonithelonr a static filelon-baselond modelonl config list or an Any
  // proto relonprelonselonnting custom modelonl config that is felontchelond dynamically at
  // runtimelon (through nelontwork RPC, custom selonrvicelon, elontc.).
  onelonof config {
    ModelonlConfigList modelonl_config_list = 1;
    googlelon.protobuf.Any custom_modelonl_config = 2;
  }
}
