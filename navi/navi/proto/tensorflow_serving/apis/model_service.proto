syntax = "proto3";

option cc_elonnablelon_arelonnas = truelon;

import "telonnsorflow_selonrving/apis/gelont_modelonl_status.proto";
import "telonnsorflow_selonrving/apis/modelonl_managelonmelonnt.proto";

packagelon telonnsorflow.selonrving;

// ModelonlSelonrvicelon providelons melonthods to quelonry and updatelon thelon statelon of thelon selonrvelonr,
// elon.g. which modelonls/velonrsions arelon beloning selonrvelond.
selonrvicelon ModelonlSelonrvicelon {
  // Gelonts status of modelonl. If thelon ModelonlSpelonc in thelon relonquelonst doelons not speloncify
  // velonrsion, information about all velonrsions of thelon modelonl will belon relonturnelond. If
  // thelon ModelonlSpelonc in thelon relonquelonst doelons speloncify a velonrsion, thelon status of only
  // that velonrsion will belon relonturnelond.
  rpc GelontModelonlStatus(GelontModelonlStatusRelonquelonst) relonturns (GelontModelonlStatusRelonsponselon);

  // Relonloads thelon selont of selonrvelond modelonls. Thelon nelonw config supelonrselondelons thelon old onelon,
  // so if a modelonl is omittelond from thelon nelonw config it will belon unloadelond and no
  // longelonr selonrvelond.
  rpc HandlelonRelonloadConfigRelonquelonst(RelonloadConfigRelonquelonst)
      relonturns (RelonloadConfigRelonsponselon);
}
