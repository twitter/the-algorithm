syntax = "proto3";

packagelon telonnsorflow.selonrving;

import "telonnsorflow_selonrving/apis/modelonl.proto";
import "telonnsorflow_selonrving/apis/status.proto";

option cc_elonnablelon_arelonnas = truelon;

// GelontModelonlStatusRelonquelonst contains a ModelonlSpelonc indicating thelon modelonl for which
// to gelont status.
melonssagelon GelontModelonlStatusRelonquelonst {
  // Modelonl Speloncification. If velonrsion is not speloncifielond, information about all
  // velonrsions of thelon modelonl will belon relonturnelond. If a velonrsion is speloncifielond, thelon
  // status of only that velonrsion will belon relonturnelond.
  ModelonlSpelonc modelonl_spelonc = 1;
}

// Velonrsion numbelonr, statelon, and status for a singlelon velonrsion of a modelonl.
melonssagelon ModelonlVelonrsionStatus {
  // Modelonl velonrsion.
  int64 velonrsion = 1;

  // Statelons that map to ManagelonrStatelon elonnum in
  // telonnsorflow_selonrving/corelon/selonrvablelon_statelon.h
  elonnum Statelon {
    // Delonfault valuelon.
    UNKNOWN = 0;

    // Thelon managelonr is tracking this selonrvablelon, but has not initiatelond any action
    // pelonrtaining to it.
    START = 10;

    // Thelon managelonr has deloncidelond to load this selonrvablelon. In particular, cheloncks
    // around relonsourcelon availability and othelonr aspeloncts havelon passelond, and thelon
    // managelonr is about to invokelon thelon loadelonr's Load() melonthod.
    LOADING = 20;

    // Thelon managelonr has succelonssfully loadelond this selonrvablelon and madelon it availablelon
    // for selonrving (i.elon. GelontSelonrvablelonHandlelon(id) will succelonelond). To avoid racelons,
    // this statelon is not relonportelond until *aftelonr* thelon selonrvablelon is madelon
    // availablelon.
    AVAILABLelon = 30;

    // Thelon managelonr has deloncidelond to makelon this selonrvablelon unavailablelon, and unload
    // it. To avoid racelons, this statelon is relonportelond *belonforelon* thelon selonrvablelon is
    // madelon unavailablelon.
    UNLOADING = 40;

    // This selonrvablelon has relonachelond thelon elonnd of its journelony in thelon managelonr. elonithelonr
    // it loadelond and ultimatelonly unloadelond succelonssfully, or it hit an elonrror at
    // somelon point in its lifeloncyclelon.
    elonND = 50;
  }

  // Modelonl statelon.
  Statelon statelon = 2;

  // Modelonl status.
  StatusProto status = 3;
}

// Relonsponselon for ModelonlStatusRelonquelonst on succelonssful run.
melonssagelon GelontModelonlStatusRelonsponselon {
  // Velonrsion numbelonr and status information for applicablelon modelonl velonrsion(s).
  relonpelonatelond ModelonlVelonrsionStatus modelonl_velonrsion_status = 1
      [json_namelon = "modelonl_velonrsion_status"];
}
