'\nImplementing HashedPercentileDiscretizer Layer\n'
_A=None
from twitter.deepbird.util.hashing import integer_multiplicative_hashing_uniform,integer_multiplicative_hashing
from libtwml import percentile_discretizer_bin_indices
import numpy as np,tensorflow.compat.v1 as tf,twml
from twml.layers.layer import Layer
from twml.layers.partition import Partition
from twml.layers.stitch import Stitch
class HashedPercentileDiscretizer(Layer):
	'\n  HashedPercentileDiscretizer layer is constructed by PercentileDiscretizerCalibrator\n  after accumulating data\n  and performing minimum description length (PercentileDiscretizer) calibration.\n\n  HashedPercentileDiscretizer takes sparse continuous features and converts then to sparse\n  binary features. Each binary output feature is associated to an HashedPercentileDiscretizer\n  bin.\n  Each HashedPercentileDiscretizer input feature is converted to n_bin bins.\n  Each HashedPercentileDiscretizer calibration tries to find bin delimiters such\n  that the number of features values\n  per bin is roughly equal (for each given HashedPercentileDiscretizer feature).\n  Note that if an input feature is rarely used, so will its associated output bin/features.\n  The difference between this layer and PercentileDiscretizer is that the\n  DeterministicPercentileDiscretize always assigns the same output id in the SparseTensor to the\n  same input feature id + bin. This is useful if you want to user transfer learning on pre-trained\n  sparse to dense embedding layers, but re-calibrate your discretizer on newer data.\n  '
	def __init__(A,n_feature,n_bin,out_bits,bin_values=_A,hash_keys=_A,hash_values=_A,bin_ids=_A,feature_offsets=_A,hash_fn=integer_multiplicative_hashing_uniform,**K):
		"\n    Creates a non-initialized `HashedPercentileDiscretizer` object.\n    Before using the table you will have to initialize it. After initialization\n    the table will be immutable.\n\n    Parent class args:\n      see [tf.layers.Layer](https://www.tensorflow.org/api_docs/python/tf/layers/Layer)\n      for documentation of parent class arguments.\n\n    Required args:\n      n_feature:\n        number of unique features accumulated during HashedPercentileDiscretizer calibration.\n        This is the number of features in the hash map.\n        Used to initialize bin_values, hash_keys, hash_values,\n        bin_ids, bin_values and feature_offsets.\n      n_bin:\n        number of HashedPercentileDiscretizer bins used for\n        HashedPercentileDiscretizer calibration. Used to initialize bin_values, hash_keys,\n        hash_values, bin_ids, bin_values and feature_offsets.\n      out_bits:\n        Determines the maximum value for output feature IDs.\n        The dense_shape of the SparseTensor returned by lookup(x)\n        will be [x.shape[0], 1 << output_bits].\n\n    Optional args:\n      hash_keys:\n        contains the features ID that HashedPercentileDiscretizer discretizes and knows\n        about. The hash map (hash_keys->hash_values) is used for two reasons:\n          1. divide inputs into two feature spaces:\n          HashedPercentileDiscretizer vs non-HashedPercentileDiscretizer\n          2. transate the HashedPercentileDiscretizer features into a hash_feature ID that\n          HashedPercentileDiscretizer understands.\n        The hash_map is expected to contain n_feature items.\n      hash_values:\n        translates the feature IDs into hash_feature IDs for HashedPercentileDiscretizer.\n      bin_ids:\n        a 1D Tensor of size n_feature * n_bin + 1 which contains\n        unique IDs to which the HashedPercentileDiscretizer features will be translated to.\n        For example, tf.Tensor(np.arange(n_feature * n_bin)) would produce\n        the most efficient output space.\n      bin_values:\n        a 1D Tensor aligned with bin_ids.\n        For a given hash_feature ID j, it's value bin's are indexed between\n        `j*n_bin` and `j*n_bin + n_bin-1`.\n        As such, bin_ids[j*n_bin+i] is translated from a hash_feature ID of j\n        and a inputs value between\n        `bin_values[j*n_bin + i]` and `bin_values[j*n_bin+i+1]`.\n      feature_offsets:\n        a 1D Tensor specifying the starting location of bins for a given feature id.\n        For example, tf.Tensor(np.arange(0, bin_values.size, n_bin, dtype='int64')).\n      hash_fn:\n        a function that takes in `feature_ids`, `bucket_indices` and `output_size` and\n        hashes the bucketed features into the `output_size` buckets. The default uses knuth's\n        multiplicative hashing\n    ";H=out_bits;I=n_bin;E=feature_offsets;F=bin_ids;G=bin_values;B=hash_values;C=hash_keys;D=n_feature;super(HashedPercentileDiscretizer,A).__init__(**K);J=D*(I+1);A._n_feature=D;A._n_bin=I
		if not A.built:A.build(input_shape=_A)
		A.output_size=tf.convert_to_tensor(1<<H,tf.int64);A._out_bits=H;C=C
		if C is _A:C=np.empty(D,dtype=np.int64)
		B=B
		if B is _A:B=np.empty(D,dtype=np.int64)
		L=tf.lookup.KeyValueTensorInitializer(C,B);A.hash_map=tf.lookup.StaticHashTable(L,-1);A.bin_ids=F
		if F is _A:F=np.empty(J,dtype=np.int64)
		A.bin_values=G
		if G is _A:G=np.empty(J,dtype=np.float32)
		A.feature_offsets=E
		if E is _A:E=np.empty(D,dtype=np.int64)
		A.hash_fn=hash_fn
	def build(A,input_shape):'\n    Creates the variables of the layer:\n    hash_keys, hash_values, bin_ids, bin_values, feature_offsets and self.output_size.\n    ';A.partition=Partition();A.stitch=Stitch();A.built=True
	def call(A,inputs,**Y):
		'Looks up `keys` in a table, outputs the corresponding values.\n\n    Implements HashedPercentileDiscretizer inference where inputs are intersected with a\n    hash_map.\n    Part of the inputs are discretized using twml.discretizer\n    to produce a discretizer_output SparseTensor.\n    This SparseTensor is then joined with the original inputs SparseTensor,\n    but only for the inputs keys that did not get discretized.\n\n    Args:\n      inputs: A 2D SparseTensor that is input to HashedPercentileDiscretizer for\n        discretization. It has a dense_shape of [batch_size, input_size]\n      name: A name for the operation (optional).\n    Returns:\n      A `SparseTensor` of the same type as `inputs`.\n      Its dense_shape is [shape_input.dense_shape[0], 1 << output_bits].\n    ';B=inputs
		if isinstance(B,tf.SparseTensor):B=twml.SparseTensor.from_tf(B)
		assert isinstance(B,twml.SparseTensor);I=B.ids;F=B.indices;G=B.values;D=A.hash_map.lookup(F);D=tf.cast(D,tf.int64);C=tf.not_equal(D,tf.constant(-1,tf.int64));J=tf.cast(C,tf.int32);C=tf.reshape(C,[-1]);K=tf.boolean_mask(F,C);G,L,M=A.partition(J,G,tf.where(C,D,F));E,N=L;O,P=G;E=twml.util.limit_bits(E,A._out_bits);A.non_discretizer_keys=E;Q=percentile_discretizer_bin_indices(N,P,A.bin_ids,A.bin_values,A.feature_offsets);R,S=Q;H=A.hash_fn(K,R,A.output_size);A.discretizer_out_keys=H;T=A.stitch([O,S],[E,H],M);U,V=T;W=tf.to_int64(B.dense_shape[0]);X=[W,A.output_size];return twml.SparseTensor(I,V,U,X).to_tf()