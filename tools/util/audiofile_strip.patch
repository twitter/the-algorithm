diff --git a/libaudiofile/FileHandle.cpp b/libaudiofile/FileHandle.cpp
index 8562d4b..5d6342a 100644
--- a/libaudiofile/FileHandle.cpp
+++ b/libaudiofile/FileHandle.cpp
@@ -74,26 +74,8 @@ _AFfilehandle *_AFfilehandle::create(int fileFormat)
 		case AF_FILE_AIFF:
 		case AF_FILE_AIFFC:
 			return new AIFFFile();
-		case AF_FILE_NEXTSND:
-			return new NeXTFile();
 		case AF_FILE_WAVE:
 			return new WAVEFile();
-		case AF_FILE_BICSF:
-			return new IRCAMFile();
-		case AF_FILE_AVR:
-			return new AVRFile();
-		case AF_FILE_IFF_8SVX:
-			return new IFFFile();
-		case AF_FILE_SAMPLEVISION:
-			return new SampleVisionFile();
-		case AF_FILE_VOC:
-			return new VOCFile();
-		case AF_FILE_NIST_SPHERE:
-			return new NISTFile();
-		case AF_FILE_CAF:
-			return new CAFFile();
-		case AF_FILE_FLAC:
-			return new FLACFile();
 		default:
 			return NULL;
 	}
diff --git a/libaudiofile/aupv.c b/libaudiofile/aupv.c
index 64e798b..374838b 100644
--- a/libaudiofile/aupv.c
+++ b/libaudiofile/aupv.c
@@ -47,7 +47,7 @@ AUpvlist AUpvnew (int maxitems)
 	if (aupvlist == NULL)
 		return AU_NULL_PVLIST;
 
-	aupvlist->items = calloc(maxitems, sizeof (struct _AUpvitem));
+	aupvlist->items = (struct _AUpvitem *)calloc(maxitems, sizeof (struct _AUpvitem));
 
 	assert(aupvlist->items);
 	if (aupvlist->items == NULL)
diff --git a/libaudiofile/g711.c b/libaudiofile/g711.c
index 8fb2323..1b323ec 100644
--- a/libaudiofile/g711.c
+++ b/libaudiofile/g711.c
@@ -74,8 +74,7 @@ static int search(int val, const short *table, int size)
  * John Wiley & Sons, pps 98-111 and 472-476.
  */
 unsigned char
-_af_linear2alaw(pcm_val)
-	int		pcm_val;	/* 2's complement (16-bit range) */
+_af_linear2alaw(int	pcm_val)
 {
 	int		mask;
 	int		seg;
@@ -110,8 +109,7 @@ _af_linear2alaw(pcm_val)
  *
  */
 int
-_af_alaw2linear(a_val)
-	unsigned char	a_val;
+_af_alaw2linear(unsigned char	a_val)
 {
 	int		t;
 	int		seg;
diff --git a/libaudiofile/units.cpp b/libaudiofile/units.cpp
index ffd0a63..51d2dc3 100644
--- a/libaudiofile/units.cpp
+++ b/libaudiofile/units.cpp
@@ -32,24 +32,12 @@
 #include "units.h"
 
 #include "AIFF.h"
-#include "AVR.h"
-#include "CAF.h"
-#include "FLACFile.h"
-#include "IFF.h"
-#include "IRCAM.h"
-#include "NeXT.h"
-#include "NIST.h"
 #include "Raw.h"
-#include "SampleVision.h"
-#include "VOC.h"
 #include "WAVE.h"
 
 #include "compression.h"
 
-#include "modules/ALAC.h"
-#include "modules/FLAC.h"
 #include "modules/G711.h"
-#include "modules/IMA.h"
 #include "modules/MSADPCM.h"
 #include "modules/PCM.h"
 
@@ -99,20 +87,6 @@ const Unit _af_units[_AF_NUM_UNITS] =
 		_AF_AIFF_NUM_INSTPARAMS,
 		_af_aiff_inst_params
 	},
-	{
-		AF_FILE_NEXTSND,
-		"NeXT .snd/Sun .au", "NeXT .snd/Sun .au Format", "next",
-		true,
-		NeXTFile::completeSetup,
-		NeXTFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		_AF_NEXT_NUM_COMPTYPES,
-		_af_next_compression_types,
-		0,	/* maximum marker count */
-		0,	/* maximum instrument count */
-		0,	/* maximum number of loops per instrument */
-		0, NULL
-	},
 	{
 		AF_FILE_WAVE,
 		"MS RIFF WAVE", "Microsoft RIFF WAVE Format", "wave",
@@ -128,144 +102,6 @@ const Unit _af_units[_AF_NUM_UNITS] =
 		_AF_WAVE_NUM_INSTPARAMS,
 		_af_wave_inst_params
 	},
-	{
-		AF_FILE_IRCAM,
-		"BICSF", "Berkeley/IRCAM/CARL Sound Format", "bicsf",
-		true,
-		IRCAMFile::completeSetup,
-		IRCAMFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		_AF_IRCAM_NUM_COMPTYPES,
-		_af_ircam_compression_types,
-		0,		// maximum marker count
-		0,		// maximum instrument count
-		0,		// maximum number of loops per instrument
-		0,		// number of instrument parameters
-		NULL	// instrument parameters
-	},
-	{
-		AF_FILE_MPEG1BITSTREAM,
-		"MPEG", "MPEG Audio Bitstream", "mpeg",
-		false
-	},
-	{
-		AF_FILE_SOUNDDESIGNER1,
-		"Sound Designer 1", "Sound Designer 1 File Format", "sd1",
-		false
-	},
-	{
-		AF_FILE_SOUNDDESIGNER2,
-		"Sound Designer 2", "Sound Designer 2 File Format", "sd2",
-		false
-	},
-	{
-		AF_FILE_AVR,
-		"AVR", "Audio Visual Research File Format", "avr",
-		true,
-		AVRFile::completeSetup,
-		AVRFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		0,	/* number of compression types */
-		NULL,	/* compression types */
-		0,	/* maximum marker count */
-		0,	/* maximum instrument count */
-		0,	/* maximum number of loops per instrument */
-		0,	/* number of instrument parameters */
-	},
-	{
-		AF_FILE_IFF_8SVX,
-		"IFF/8SVX", "Amiga IFF/8SVX Sound File Format", "iff",
-		true,
-		IFFFile::completeSetup,
-		IFFFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 8,
-		0,	/* number of compression types */
-		NULL,	/* compression types */
-		0,	/* maximum marker count */
-		0,	/* maximum instrument count */
-		0,	/* maximum number of loops per instrument */
-		0,	/* number of instrument parameters */
-	},
-	{
-		AF_FILE_SAMPLEVISION,
-		"Sample Vision", "Sample Vision File Format", "smp",
-		true,
-		SampleVisionFile::completeSetup,
-		SampleVisionFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		0,		// number of compression types
-		NULL,	// compression types
-		0,		// maximum marker count
-		0,		// maximum instrument count
-		0,		// maximum number of loops per instrument
-		0,		// number of instrument parameters
-		NULL	// instrument parameters
-	},
-	{
-		AF_FILE_VOC,
-		"VOC", "Creative Voice File Format", "voc",
-		true,
-		VOCFile::completeSetup,
-		VOCFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		_AF_VOC_NUM_COMPTYPES,
-		_af_voc_compression_types,
-		0,		// maximum marker count
-		0,		// maximum instrument count
-		0,		// maximum number of loops per instrument
-		0,		// number of instrument parameters
-		NULL	// instrument parameters
-	},
-	{
-		AF_FILE_NIST_SPHERE,
-		"NIST SPHERE", "NIST SPHERE File Format", "nist",
-		true,
-		NISTFile::completeSetup,
-		NISTFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		0,	/* number of compression types */
-		NULL,	/* compression types */
-		0,	/* maximum marker count */
-		0,	/* maximum instrument count */
-		0,	/* maximum number of loops per instrument */
-		0,	/* number of instrument parameters */
-		NULL	/* instrument parameters */
-	},
-	{
-		AF_FILE_SOUNDFONT2,
-		"SoundFont 2", "SoundFont 2 File Format", "sf2",
-		false
-	},
-	{
-		AF_FILE_CAF,
-		"CAF", "Core Audio Format", "caf",
-		true,
-		CAFFile::completeSetup,
-		CAFFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		_AF_CAF_NUM_COMPTYPES,
-		_af_caf_compression_types,
-		0,		// maximum marker count
-		0,		// maximum instrument count
-		0,		// maximum number of loops per instrument
-		0,		// number of instrument parameters
-		NULL	// instrument parameters
-	},
-	{
-		AF_FILE_FLAC,
-		"FLAC", "Free Lossless Audio Codec", "flac",
-		true,
-		FLACFile::completeSetup,
-		FLACFile::recognize,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		_AF_FLAC_NUM_COMPTYPES,
-		_af_flac_compression_types,
-		0,		// maximum marker count
-		0,		// maximum instrument count
-		0,		// maximum number of loops per instrument
-		0,		// number of instrument parameters
-		NULL	// instrument parameters
-	}
 };
 
 const CompressionUnit _af_compression[_AF_NUM_COMPRESSION] =
@@ -309,19 +145,6 @@ const CompressionUnit _af_compression[_AF_NUM_COMPRESSION] =
 		_af_g711_format_ok,
 		_AFg711initcompress, _AFg711initdecompress
 	},
-	{
-		AF_COMPRESSION_IMA,
-		true,
-		"ima4",	/* label */
-		"IMA ADPCM",	/* short name */
-		"IMA DVI ADPCM",
-		4.0,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		true,	/* needsRebuffer */
-		false,	/* multiple_of */
-		_af_ima_adpcm_format_ok,
-		_af_ima_adpcm_init_compress, _af_ima_adpcm_init_decompress
-	},
 	{
 		AF_COMPRESSION_MS_ADPCM,
 		true,
@@ -335,34 +158,4 @@ const CompressionUnit _af_compression[_AF_NUM_COMPRESSION] =
 		_af_ms_adpcm_format_ok,
 		_af_ms_adpcm_init_compress, _af_ms_adpcm_init_decompress
 	},
-	{
-		AF_COMPRESSION_FLAC,
-#if ENABLE(FLAC)
-		true,
-#else
-		false,
-#endif
-		"flac",	// label
-		"FLAC",	// short name
-		"Free Lossless Audio Codec",
-		1.0,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		false,	// needsRebuffer
-		false,	// multiple_of
-		_af_flac_format_ok,
-		_af_flac_init_compress, _af_flac_init_decompress
-	},
-	{
-		AF_COMPRESSION_ALAC,
-		true,
-		"alac",	// label
-		"ALAC",	// short name
-		"Apple Lossless Audio Codec",
-		1.0,
-		AF_SAMPFMT_TWOSCOMP, 16,
-		true,	// needsRebuffer
-		false,	// multiple_of
-		_af_alac_format_ok,
-		_af_alac_init_compress, _af_alac_init_decompress
-	}
 };
