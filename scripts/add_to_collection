# The contents of this file are subject to the Common Public Attribution
# License Version 1.0. (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public
# License Version 1.1, but Sections 14 and 15 have been added to cover use of
# software over a computer network and provide for limited attribution for the
# Original Developer. In addition, Exhibit A has been modified to be consistent
# with Exhibit B.
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
#
# The Original Code is reddit.
#
# The Original Developer is the Initial Developer.  The Initial Developer of
# the Original Code is reddit Inc.
#
# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit
# Inc. All Rights Reserved.
###############################################################################

from r2.lib.db.thing import NotFound
from r2.models import Target, Collection, CollectionStorage, Subreddit


def run(collection, sr):
    try:
        sr = Subreddit._by_name(sr)
    except NotFound:
        raise ValueError("specified subreddit does not exist")

    collection = Collection.by_name(collection)
    if not collection:
        raise ValueError("specified collection does not exist")
    
    srs = Target(collection).subreddits_slow

    if sr not in srs:
        srs.append(sr)
    else:
        raise ValueError("specified subreddit is already in that collection")

    srs.sort(key=lambda sr: sr._downs, reverse=True)
    sr_names = [sr.name for sr in srs]
    sr_names_column = {'sr_names': 
                       CollectionStorage.SR_NAMES_DELIM.join(sr_names)}

    CollectionStorage._set_values(collection.name, sr_names_column)
    print "%s has been added to %s" % (sr.name, collection.name)
